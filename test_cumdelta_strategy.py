#!/usr/bin/env python3
"""
–¢–µ—Å—Ç CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_cumdelta_strategy_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from bot.strategy.base import CumDeltaConfig, BaseStrategy
        print("‚úÖ CumDeltaConfig –∏ BaseStrategy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        print("‚úÖ CumDeltaSRStrategy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        from bot.strategy.implementations.cumdelta_sr_strategy import (
            create_cumdelta_sr_strategy,
            create_conservative_cumdelta_sr,
            create_aggressive_cumdelta_sr
        )
        print("‚úÖ –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_cumdelta_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CumDelta"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CumDelta...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = CumDeltaConfig()
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.strategy_name}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        required_params = [
            'delta_window', 'min_delta_threshold', 'support_window',
            'support_resistance_tolerance', 'volume_multiplier'
        ]
        
        for param in required_params:
            if hasattr(config, param):
                print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param}: {getattr(config, param)}")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param}")
                return False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        config.validate()
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_cumdelta_strategy_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = CumDeltaConfig(
            delta_window=20,
            min_delta_threshold=100.0,
            support_window=20,
            support_resistance_tolerance=0.002,
            volume_multiplier=1.5
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy = CumDeltaSRStrategy(config)
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy.config.strategy_name}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        from bot.strategy.base import BaseStrategy
        if isinstance(strategy, BaseStrategy):
            print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å–ª–µ–¥—É–µ—Ç BaseStrategy")
        else:
            print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç BaseStrategy")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            'calculate_strategy_indicators',
            'calculate_signal_strength',
            'check_confluence_factors',
            'execute'
        ]
        
        for method in required_methods:
            if hasattr(strategy, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ {method}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False

def test_cumdelta_factory_functions():
    """–¢–µ—Å—Ç —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        from bot.strategy.implementations.cumdelta_sr_strategy import (
            create_cumdelta_sr_strategy,
            create_conservative_cumdelta_sr,
            create_aggressive_cumdelta_sr
        )
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ–∞–±—Ä–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        strategy1 = create_cumdelta_sr_strategy()
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy1.config.strategy_name}")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy2 = create_conservative_cumdelta_sr()
        print(f"‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy2.config.strategy_name}")
        print(f"   min_delta_threshold: {strategy2.config.min_delta_threshold}")
        print(f"   confluence_required: {strategy2.config.confluence_required}")
        
        # –¢–µ—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy3 = create_aggressive_cumdelta_sr()
        print(f"‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy3.config.strategy_name}")
        print(f"   min_delta_threshold: {strategy3.config.min_delta_threshold}")
        print(f"   confluence_required: {strategy3.config.confluence_required}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def test_cumdelta_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π...")
    
    try:
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        from bot.strategy.base import CumDeltaConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig()
        strategy = CumDeltaSRStrategy(config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        if hasattr(strategy, 'current_market_regime'):
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º")
        
        if hasattr(strategy, 'is_active'):
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        base_methods = [
            'get_primary_dataframe',
            'calculate_base_indicators',
            'calculate_dynamic_levels',
            'create_signal',
            'is_in_position'
        ]
        
        for method in base_methods:
            if hasattr(strategy, method):
                print(f"‚úÖ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ {method}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ")
    print("=" * 70)
    
    tests = [
        test_cumdelta_strategy_imports,
        test_cumdelta_config,
        test_cumdelta_strategy_creation,
        test_cumdelta_factory_functions,
        test_cumdelta_integration
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫ —Å–∏—Å—Ç–µ–º–µ!")
        return True
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
