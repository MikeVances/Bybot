#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Bybit API v5
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.exchange.bybit_api_v5 import create_bybit_api_v5, create_trading_bot_v5
from bot.exchange.api_adapter import migrate_to_v5_api
import pandas as pd


def test_api_v5_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π API v5"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bybit API v5...")
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç (testnet)
    api = create_bybit_api_v5(testnet=True)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    server_time = api.get_server_time()
    if server_time and server_time.get('retCode') == 0:
        print("‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –í—Ä–µ–º—è: {server_time['result']['timeNano']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö...")
    ohlcv = api.get_ohlcv("BTCUSDT", "1", 10)
    if ohlcv is not None and len(ohlcv) > 0:
        print("‚úÖ OHLCV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(ohlcv)}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${ohlcv['close'].iloc[-1]:.2f}")
        print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {ohlcv['timestamp'].iloc[0]} - {ohlcv['timestamp'].iloc[-1]}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö...")
    instruments = api.get_instruments_info("linear", "BTCUSDT")
    if instruments and instruments.get('retCode') == 0:
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –ø–æ–ª—É—á–µ–Ω–∞")
        if instruments['result']['list']:
            instrument = instruments['result']['list'][0]
            print(f"   –°–∏–º–≤–æ–ª: {instrument.get('symbol', 'N/A')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {instrument.get('status', 'N/A')}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
            available_fields = list(instrument.keys())
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {available_fields[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π
            if 'tickSize' in instrument:
                print(f"   –¢–∏–∫: {instrument['tickSize']}")
            elif 'priceScale' in instrument:
                print(f"   –ú–∞—Å—à—Ç–∞–± —Ü–µ–Ω—ã: {instrument['priceScale']}")
            else:
                print(f"   –î–µ—Ç–∞–ª–∏: {dict(list(instrument.items())[:3])}")  # –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö")
        print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {instruments.get('retCode') if instruments else 'None'}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {instruments.get('retMsg') if instruments else 'No response'}")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏)
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")
    balance = api.get_wallet_balance_v5()
    if balance and balance.get('retCode') == 0:
        print("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        formatted_balance = api.format_balance_v5(balance)
        print("   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:")
        print(formatted_balance)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ API –∫–ª—é—á–µ–π)")
        print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {balance.get('retCode') if balance else 'None'}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {balance.get('retMsg') if balance else 'No response'}")
    
    return True


def test_trading_bot_v5():
    """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v5"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TradingBot v5...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç
    bot = create_trading_bot_v5("BTCUSDT", testnet=True)
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏...")
    try:
        bot.update_position_info()
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {bot.position_size}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {bot.entry_price}")
        print(f"   –°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {bot.position_side}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±–æ—Ç–∞...")
    try:
        data = bot.get_ohlcv(bot.symbol, "1", 5)
        if data is not None and len(data) > 0:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(data)}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data['close'].iloc[-1]:.2f}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return True


def test_api_adapter():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ API"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Adapter...")
    
    # –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    migration_result = migrate_to_v5_api()
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
    print(f"   –°—Ç–∞—Ç—É—Å: {migration_result['migration_status']}")
    print(f"   API v5 –¥–æ—Å—Ç—É–ø–µ–Ω: {migration_result['v5_api_available']}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {migration_result['recommendation']}")
    
    if 'test_results' in migration_result:
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        for test_name, result in migration_result['test_results'].items():
            print(f"   {test_name}: {result}")
    
    return migration_result['v5_api_available']


def test_ohlcv_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ OHLCV –¥–∞–Ω–Ω—ã—Ö...")
    
    api = create_bybit_api_v5(testnet=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    timeframes = ["1", "5", "15", "60"]
    
    for tf in timeframes:
        print(f"\nüìà –ê–Ω–∞–ª–∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf} –º–∏–Ω—É—Ç:")
        
        try:
            data = api.get_ohlcv("BTCUSDT", tf, 20)
            
            if data is not None and len(data) > 0:
                # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                current_price = data['close'].iloc[-1]
                price_change = ((current_price - data['close'].iloc[0]) / data['close'].iloc[0]) * 100
                volume_avg = data['volume'].mean()
                volatility = data['close'].pct_change().std() * 100
                
                print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change:+.2f}%")
                print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {volume_avg:.2f}")
                print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(data)}")
            else:
                print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf}: {e}")
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bybit API v5")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API
        test_api_v5_basic()
        
        # –¢–µ—Å—Ç 2: –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç
        test_trading_bot_v5()
        
        # –¢–µ—Å—Ç 3: –ê–¥–∞–ø—Ç–µ—Ä API
        test_api_adapter()
        
        # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        test_ohlcv_analysis()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. API v5 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("2. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –Ω–æ–≤—ã–π API")
        print("3. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã API –∫–ª—é—á–∏")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ testnet –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 