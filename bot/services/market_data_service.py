# bot/services/market_data_service.py
"""
üìä –°–ï–†–í–ò–° –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
from typing import Dict, Optional, Any
from bot.core.secure_logger import get_secure_logger


class MarketDataService:
    """
    üìä –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.logger = get_secure_logger('market_data_service')
        self.timeframes = {
            '1m': "1",
            '5m': "5", 
            '15m': "15",
            '1h': "60"
        }
    
    def get_all_timeframes_data(self, api) -> Dict[str, pd.DataFrame]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        
        Args:
            api: API —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        """
        all_market_data = {}
        
        for tf_name, tf_value in self.timeframes.items():
            try:
                df = api.get_ohlcv(interval=tf_value, limit=200)
                if df is not None and not df.empty:
                    all_market_data[tf_name] = df
                    self.logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {tf_name}: {len(df)} —Å–≤–µ—á–µ–π")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {tf_name}")
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {tf_name}: {e}")
                continue
        
        if all_market_data:
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(all_market_data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
        else:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        return all_market_data
    
    def get_current_price(self, api, symbol: str = "BTCUSDT") -> Optional[float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            api: API —ç–∫–∑–µ–º–ø–ª—è—Ä
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            
        Returns:
            float: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ None
        """
        try:
            df = api.get_ohlcv(symbol=symbol, interval="1", limit=1)
            if df is not None and not df.empty:
                current_price = float(df.iloc[-1]['close'])
                self.logger.debug(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${current_price:,.2f}")
                return current_price
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            
        return None
    
    def validate_market_data(self, market_data: Dict[str, pd.DataFrame]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        if not market_data:
            self.logger.error("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return False
        
        required_timeframes = ['1m', '5m']
        for tf in required_timeframes:
            if tf not in market_data or market_data[tf].empty:
                self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        try:
            latest_1m = pd.to_datetime(market_data['1m'].iloc[-1]['timestamp'])
            current_time = pd.Timestamp.now(tz='UTC')
            time_diff = (current_time - latest_1m).total_seconds()
            
            if time_diff > 300:  # 5 –º–∏–Ω—É—Ç
                self.logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏: {time_diff:.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        
        self.logger.debug("‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã")
        return True
    
    def calculate_market_metrics(self, market_data: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        """
        metrics = {}
        
        try:
            if '1h' in market_data and not market_data['1h'].empty:
                hourly = market_data['1h']
                
                # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (24—á)
                if len(hourly) >= 24:
                    last_24h = hourly.tail(24)
                    volatility = (last_24h['high'].max() - last_24h['low'].min()) / last_24h['close'].mean() * 100
                    metrics['volatility_24h'] = round(volatility, 2)
                
                # –¢—Ä–µ–Ω–¥ (6—á)
                if len(hourly) >= 6:
                    last_6h = hourly.tail(6)
                    price_change = (last_6h.iloc[-1]['close'] - last_6h.iloc[0]['close']) / last_6h.iloc[0]['close'] * 100
                    metrics['trend_6h'] = round(price_change, 2)
            
            if '1m' in market_data and not market_data['1m'].empty:
                minute = market_data['1m']
                
                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                metrics['current_price'] = float(minute.iloc[-1]['close'])
                
                # –û–±—ä–µ–º (1—á)
                if len(minute) >= 60:
                    last_hour_volume = minute.tail(60)['volume'].sum()
                    metrics['volume_1h'] = float(last_hour_volume)
            
            self.logger.debug(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: {list(metrics.keys())}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        
        return metrics


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_market_data_service = None


def get_market_data_service():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        MarketDataService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    """
    global _market_data_service
    
    if _market_data_service is None:
        _market_data_service = MarketDataService()
    
    return _market_data_service