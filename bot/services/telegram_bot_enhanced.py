# bot/services/telegram_bot_enhanced.py
# üíú ENHANCED TELEGRAM BOT - –ú–æ—Å—Ç –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º UX
# –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

import logging
from typing import Dict, Optional, List
from datetime import datetime

from telegram import Update, Bot
from telegram.ext import Application, ContextTypes

# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from .telegram_bot import TelegramBot

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .telegram_bot_ux import TelegramBotUX
from .smart_notifications import NotificationManager
from .ux_config import ux_config, UXEmojis, QUICK_ACTIONS_CONFIG

try:
    from config import TELEGRAM_TOKEN, ADMIN_CHAT_ID
except ImportError:
    TELEGRAM_TOKEN = None
    ADMIN_CHAT_ID = None

class EnhancedTelegramBot:
    """
    üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UX
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –±–æ—Ç–æ–º
    - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã–π UX
    - Smart notifications
    - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏—á
    """
    
    def __init__(self, token: str):
        self.token = token
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.app = Application.builder().token(token).build()
        self.bot_instance = Bot(token)
        
        # –°—Ç–∞—Ä—ã–π –±–æ—Ç –¥–ª—è fallback
        self.legacy_bot = TelegramBot(token)
        
        # –ù–æ–≤—ã–π UX –±–æ—Ç
        self.ux_bot = TelegramBotUX(token)
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_manager = NotificationManager(
            self.bot_instance, 
            ADMIN_CHAT_ID or "default"
        )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.user_settings: Dict[str, Dict] = {}
        
        # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.ab_test_groups: Dict[str, str] = {}  # user_id -> group_name
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats: Dict[str, int] = {
            'total_users': 0,
            'legacy_users': 0,
            'ux_users': 0,
            'messages_sent': 0
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_unified_handlers()
        
        self.logger.info("üöÄ Enhanced Telegram Bot initialized")
    
    def _register_unified_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
        from telegram.ext import CommandHandler, CallbackQueryHandler
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ä–æ—É—Ç–∏–Ω–≥–æ–º
        self.app.add_handler(CommandHandler("start", self._unified_start))
        self.app.add_handler(CommandHandler("help", self._unified_help))
        self.app.add_handler(CommandHandler("menu", self._unified_menu))
        self.app.add_handler(CommandHandler("dashboard", self._unified_dashboard))
        
        # Legacy –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("balance", self._legacy_balance))
        self.app.add_handler(CommandHandler("position", self._legacy_position))
        self.app.add_handler(CommandHandler("strategies", self._legacy_strategies))
        self.app.add_handler(CommandHandler("trades", self._legacy_trades))
        self.app.add_handler(CommandHandler("logs", self._legacy_logs))
        
        # –ù–æ–≤—ã–µ UX –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("ux", self._enable_ux_mode))
        self.app.add_handler(CommandHandler("classic", self._enable_legacy_mode))
        self.app.add_handler(CommandHandler("quick", self._quick_actions))
        
        # Unified callback handler
        self.app.add_handler(CallbackQueryHandler(self._unified_callback_handler))
    
    async def _unified_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π /start —Å –≤—ã–±–æ—Ä–æ–º UX"""
        
        user_id = str(update.effective_user.id)
        first_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_id not in self.user_settings:
            self.usage_stats['total_users'] += 1
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_prefs = self.user_settings.get(user_id, {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º A/B –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.ab_test_groups:
            import random
            # 70% –ø–æ–ª—É—á–∞—é—Ç –Ω–æ–≤—ã–π UX, 30% - —Å—Ç–∞—Ä—ã–π (–¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
            self.ab_test_groups[user_id] = "ux" if random.random() < 0.7 else "legacy"
        
        ab_group = self.ab_test_groups[user_id]
        preferred_mode = user_prefs.get('interface_mode', ab_group)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        welcome_text = (
            f"üëã *–ü—Ä–∏–≤–µ—Ç, {first_name}!*\n\n"
            f"üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è!*\n\n"
            f"üíú –£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≤—ã–±–æ—Ä:\n\n"
            f"üé® *MODERN UX* - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            f"   ‚Ä¢ Smart Dashboard\n"
            f"   ‚Ä¢ –ñ–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"   ‚Ä¢ AI-–∏–Ω—Å–∞–π—Ç—ã\n"
            f"   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
            f"üì± *CLASSIC* - –ü—Ä–∏–≤—ã—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            f"   ‚Ä¢ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
            f"   ‚Ä¢ –ó–Ω–∞–∫–æ–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: *{'MODERN UX' if preferred_mode == 'ux' else 'CLASSIC'}*"
        )
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üöÄ MODERN UX", callback_data="switch_to_ux"),
                InlineKeyboardButton("üì± CLASSIC", callback_data="switch_to_legacy")
            ],
            [
                InlineKeyboardButton(
                    f"‚ö° {'MODERN' if preferred_mode == 'ux' else 'CLASSIC'} (–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º)", 
                    callback_data=f"switch_to_{preferred_mode}"
                )
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö", callback_data="interface_comparison")
            ]
        ]
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_settings[user_id] = user_prefs
        self.logger.info(f"User {user_id} started bot, A/B group: {ab_group}, preferred: {preferred_mode}")
    
    async def _unified_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        callback_data = query.data
        
        # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ç–∏–ø—É callback
        if callback_data.startswith("switch_to_"):
            await self._handle_interface_switch(update, context, callback_data)
        elif callback_data == "interface_comparison":
            await self._show_interface_comparison(update, context)
        elif callback_data.startswith("ux_"):
            # –†–æ—É—Ç–∏–º –≤ –Ω–æ–≤—ã–π UX –±–æ—Ç
            await self._route_to_ux_bot(update, context, callback_data)
        else:
            # –†–æ—É—Ç–∏–º –≤ legacy –±–æ—Ç
            await self._route_to_legacy_bot(update, context, callback_data)
    
    async def _handle_interface_switch(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        user_id = str(update.callback_query.from_user.id)
        interface_mode = callback_data.replace("switch_to_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {}
        
        self.user_settings[user_id]['interface_mode'] = interface_mode
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if interface_mode == "ux":
            self.usage_stats['ux_users'] += 1
        else:
            self.usage_stats['legacy_users'] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if interface_mode == "ux":
            await self._show_ux_interface(update, context)
        else:
            await self._show_legacy_interface(update, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        mode_name = "Modern UX" if interface_mode == "ux" else "Classic"
        await self.notification_manager.send_smart_notification(
            notification_type='system_alert',
            title=f'Interface Switched',
            message=f'–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ {mode_name} –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            data={
                'user_id': user_id,
                'new_mode': interface_mode,
                'type': 'interface_switch'
            },
            priority=4,  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            ttl_minutes=5,
            user_id=user_id
        )
        
        self.logger.info(f"User {user_id} switched to {interface_mode} interface")
    
    async def _show_interface_comparison(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        
        comparison_text = (
            "üîç *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤*\n\n"
            
            "üöÄ *MODERN UX:*\n"
            "‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
            "‚úÖ Smart Dashboard —Å live-–¥–∞–Ω–Ω—ã–º–∏\n"
            "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" 
            "‚úÖ AI-–∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (Quick Actions)\n"
            "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n"
            "‚ö†Ô∏è –ù–æ–≤—ã–µ —Ñ–∏—á–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –±–∞–≥–∏)\n\n"
            
            "üì± *CLASSIC:*\n"
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
            "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "‚úÖ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n"
            "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n"
            "‚úÖ –ó–Ω–∞–∫–æ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚ö†Ô∏è –ú–µ–Ω–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
            "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            
            "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Modern UX - –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /classic"
        )
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [
                InlineKeyboardButton("üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å MODERN UX", callback_data="switch_to_ux"),
                InlineKeyboardButton("üì± –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ CLASSIC", callback_data="switch_to_legacy")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_start")
            ]
        ]
        
        await update.callback_query.edit_message_text(
            comparison_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def _show_ux_interface(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π UX –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UX –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è dashboard
        await self.ux_bot._show_smart_dashboard(update, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ UX
        welcome_ux_text = (
            f"‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Modern UX!* ‚ú®\n\n"
            f"üéØ *–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:*\n"
            f"‚Ä¢ Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫\n"
            f"‚Ä¢ Smart-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n"
            f"‚Ä¢ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞\n"
            f"‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n\n"
            f"üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            f"üîÑ –•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É? –ö–æ–º–∞–Ω–¥–∞ /classic"
        )
        
        await update.callback_query.message.reply_text(
            welcome_ux_text,
            parse_mode='Markdown'
        )
    
    async def _show_legacy_interface(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
        await self.legacy_bot._menu(update, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        welcome_legacy_text = (
            f"üì± *–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–µ–Ω*\n\n"
            f"‚úÖ –í—Å–µ –ø—Ä–∏–≤—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã\n"
            f"‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
            f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n\n"
            f"üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–æ–π /ux\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help"
        )
        
        await update.callback_query.message.reply_text(
            welcome_legacy_text,
            parse_mode='Markdown'
        )
    
    async def _route_to_ux_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–†–æ—É—Ç–∏–Ω–≥ –≤ UX –±–æ—Ç"""
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "ux_"
        clean_callback = callback_data[3:]
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π callback query —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        update.callback_query.data = clean_callback
        
        # –†–æ—É—Ç–∏–º –≤ UX –±–æ—Ç
        await self.ux_bot._handle_callback(update, context)
    
    async def _route_to_legacy_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–†–æ—É—Ç–∏–Ω–≥ –≤ legacy –±–æ—Ç"""
        
        # –†–æ—É—Ç–∏–º –≤ legacy –±–æ—Ç
        await self.legacy_bot._on_menu_button(update, context)
    
    async def _unified_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dashboard"""
        
        user_id = str(update.effective_user.id)
        user_prefs = self.user_settings.get(user_id, {})
        interface_mode = user_prefs.get('interface_mode', 'ux')
        
        if interface_mode == 'ux':
            await self.ux_bot._dashboard(update, context)
        else:
            await self.legacy_bot._menu(update, context)
    
    async def _quick_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç UX)"""
        await self.ux_bot._quick_actions(update, context)
    
    async def _enable_ux_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ UX —Ä–µ–∂–∏–º–∞"""
        
        user_id = str(update.effective_user.id)
        
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {}
            
        self.user_settings[user_id]['interface_mode'] = 'ux'
        
        await update.message.reply_text(
            "üöÄ *Modern UX –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞! ‚ú®\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dashboard –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Smart Dashboard",
            parse_mode='Markdown'
        )
        
        await self.ux_bot._dashboard(update, context)
    
    async def _enable_legacy_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ legacy —Ä–µ–∂–∏–º–∞"""
        
        user_id = str(update.effective_user.id)
        
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {}
            
        self.user_settings[user_id]['interface_mode'] = 'legacy'
        
        await update.message.reply_text(
            "üì± *–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            "–í—Å–µ –ø—Ä–∏–≤—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
            parse_mode='Markdown'
        )
        
        await self.legacy_bot._menu(update, context)
    
    # Legacy –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def _legacy_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.legacy_bot._balance(update, context)
    
    async def _legacy_position(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.legacy_bot._position(update, context)
        
    async def _legacy_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.legacy_bot._strategies(update, context)
        
    async def _legacy_trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.legacy_bot._trades(update, context)
        
    async def _legacy_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.legacy_bot._logs(update, context)
    
    async def _unified_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
        
        help_text = (
            "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–º—É –±–æ—Ç—É*\n\n"
            
            "üé® *–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:*\n"
            "/ux - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Modern UX\n"
            "/classic - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Classic\n"
            "/dashboard - Smart Dashboard\n"
            "/quick - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
            
            "üìä *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/balance - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "/position - –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "/strategies - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏\n"
            "/trades - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n"
            "/logs - –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
            
            "‚öôÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            
            "üíú *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Modern UX —Å –∫–æ–º–∞–Ω–¥–æ–π /ux*"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def _unified_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é"""
        await self._unified_dashboard(update, context)
    
    def get_usage_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            **self.usage_stats,
            'ux_adoption_rate': (
                self.usage_stats['ux_users'] / max(self.usage_stats['total_users'], 1) * 100
            ),
            'total_user_settings': len(self.user_settings),
            'ab_test_groups': len(self.ab_test_groups)
        }
    
    def send_admin_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ notification manager"""
        import asyncio
        
        async def send():
            await self.notification_manager.send_smart_notification(
                notification_type='system_alert',
                title='System Message',
                message=message,
                data={'type': 'admin_message'},
                priority=2,
                ttl_minutes=120
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(send())
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ enhanced –±–æ—Ç–∞"""
        
        self.logger.info("üöÄ Starting Enhanced Telegram Bot...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å polling
            self.app.run_polling(drop_pending_updates=True)
            
        except KeyboardInterrupt:
            self.logger.info("üíú Enhanced Bot stopped by user")
        except Exception as e:
            self.logger.error(f"‚ùå Critical error in Enhanced Bot: {e}")
            raise

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ enhanced –±–æ—Ç–∞"""
    
    if not TELEGRAM_TOKEN:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    bot = EnhancedTelegramBot(TELEGRAM_TOKEN)
    
    print("üöÄ Enhanced Telegram Bot –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    print("üíú –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –î–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: Modern UX + Classic")
    print("   ‚Ä¢ Smart notifications")
    print("   ‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ") 
    print("   ‚Ä¢ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    print("   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è UX")
    print()
    
    bot.start()

if __name__ == "__main__":
    main()