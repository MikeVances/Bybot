# bot/services/telegram_bot_ux.py
# üíú –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô UX –î–õ–Ø TELEGRAM –ë–û–¢–ê
# –°–æ–∑–¥–∞–Ω–æ —Å–µ–Ω—å–æ—Ä–æ–º-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏
# –§–æ–∫—É—Å: user-centric design + —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram —Ñ–∏—á–∏

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from datetime import datetime
import asyncio
from typing import Dict, List, Optional
import json

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from bot.exchange.api_adapter import create_trading_bot_adapter
from config import TELEGRAM_TOKEN, get_strategy_config, USE_V5_API, USE_TESTNET

try:
    from config import ADMIN_CHAT_ID
except ImportError:
    ADMIN_CHAT_ID = None

class TelegramBotUX:
    """
    üöÄ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π UX-–¥–∏–∑–∞–π–Ω –¥–ª—è Telegram –±–æ—Ç–∞
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    - User-first design
    - –ú–∏–Ω–∏–º—É–º –∫–ª–∏–∫–æ–≤ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    - –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram —Ñ–∏—á–∏
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    """
    
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # UX-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}  # {user_id: state_data}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ —É—Ç–µ—á–∫–∏ —Ç–æ–∫–µ–Ω–∞)
        logging.getLogger("httpx").setLevel(logging.WARNING)
        logging.getLogger("telegram").setLevel(logging.WARNING)
        
        print("üöÄ UX Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self._start))
        self.app.add_handler(CommandHandler("dashboard", self._dashboard))
        self.app.add_handler(CommandHandler("quick", self._quick_actions))
        
        # Callback query handlers
        self.app.add_handler(CallbackQueryHandler(self._handle_callback))
    
    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üíú –°—Ç–∏–ª—å–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω"""
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = (
            f"üöÄ *–ü—Ä–∏–≤–µ—Ç, {first_name}!*\n\n"
            f"üíú *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞*\n\n"
            f"–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. "
            f"–ì–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≤—Å—é –º–æ—â—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!\n\n"
            f"üéØ *–ß—Ç–æ —É–º–µ—é:*\n"
            f"‚Ä¢ üß† AI-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            f"‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö\n"
            f"‚Ä¢ üìä –ö—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
            f"‚Ä¢ üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n"
            f"‚Ä¢ üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ 24/7"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–º–æ–¥–∑–∏ –∏ –ª–æ–≥–∏–∫–æ–π
        keyboard = [
            [
                InlineKeyboardButton("üöÄ DASHBOARD", callback_data="dashboard_main"),
                InlineKeyboardButton("‚ö° QUICK ACTIONS", callback_data="quick_actions")
            ],
            [
                InlineKeyboardButton("üß† AI STATUS", callback_data="ai_status"),
                InlineKeyboardButton("üí∞ P&L LIVE", callback_data="pnl_live")
            ],
            [
                InlineKeyboardButton("üìä ANALYTICS", callback_data="analytics_main"),
                InlineKeyboardButton("‚öôÔ∏è SETTINGS", callback_data="settings_main")
            ],
            [
                InlineKeyboardButton("üÜò HELP", callback_data="help_main")
            ]
        ]
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ UX-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states[user_id] = {
            'last_active': datetime.now(),
            'current_screen': 'start',
            'preferences': {}
        }
    
    async def _dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üìä –£–º–Ω—ã–π dashboard —Å live-–¥–∞–Ω–Ω—ã–º–∏"""
        await self._show_smart_dashboard(update, context)
    
    async def _quick_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        keyboard = [
            [
                InlineKeyboardButton("üö´ STOP ALL", callback_data="emergency_stop"),
                InlineKeyboardButton("‚ñ∂Ô∏è START ALL", callback_data="emergency_start")
            ],
            [
                InlineKeyboardButton("üí∞ BALANCE", callback_data="quick_balance"),
                InlineKeyboardButton("üìà POSITIONS", callback_data="quick_positions")
            ],
            [
                InlineKeyboardButton("üß† AI RECOMMEND", callback_data="ai_recommend"),
                InlineKeyboardButton("üì± MOBILE VIEW", web_app=WebAppInfo("https://your-webapp.com/mobile"))
            ]
        ]
        
        quick_text = (
            "‚ö° *QUICK ACTIONS*\n\n"
            "–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        
        await update.message.reply_text(
            quick_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_smart_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üìä –£–º–Ω—ã–π dashboard —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            critical_data = await self._get_critical_data()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º dashboard —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
            dashboard_text = self._format_smart_dashboard(critical_data)
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            keyboard = self._create_adaptive_keyboard(critical_data)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    dashboard_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    dashboard_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
                
        except Exception as e:
            error_text = f"üö® *Dashboard Error*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: `{str(e)[:100]}...`"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ RETRY", callback_data="dashboard_main")],
                [InlineKeyboardButton("üÜò SUPPORT", callback_data="support")]
            ]
            
            await update.callback_query.edit_message_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _get_critical_data(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è dashboard"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
            from bot.exchange.bybit_api_v5 import BybitAPI
            
            api = BybitAPI()
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            tasks = [
                self._get_balance_summary(api),
                self._get_positions_summary(api),
                self._get_ai_status(),
                self._get_alerts_count()
            ]
            
            balance, positions, ai_status, alerts = await asyncio.gather(*tasks, return_exceptions=True)
            
            return {
                'balance': balance if not isinstance(balance, Exception) else None,
                'positions': positions if not isinstance(positions, Exception) else None,
                'ai_status': ai_status if not isinstance(ai_status, Exception) else None,
                'alerts': alerts if not isinstance(alerts, Exception) else 0,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            print(f"Error getting critical data: {e}")
            return {'error': str(e), 'timestamp': datetime.now()}
    
    async def _get_balance_summary(self, api) -> Dict:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        try:
            data = api.get_wallet_balance_v5()
            if data and data.get('retCode') == 0:
                result = data['result']['list'][0]
                return {
                    'total': float(result['totalEquity']),
                    'available': float(result['totalAvailableBalance']),
                    'pnl_24h': 0.0  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                }
            return None
        except Exception as e:
            print(f"Balance error: {e}")
            return None
    
    async def _get_positions_summary(self, api) -> Dict:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        try:
            data = api.get_positions("BTCUSDT")
            if data and data.get('retCode') == 0:
                positions = data['result']['list']
                open_positions = [pos for pos in positions if float(pos.get('size', 0)) > 0]
                
                total_pnl = sum(float(pos.get('unrealisedPnl', 0)) for pos in open_positions)
                
                return {
                    'count': len(open_positions),
                    'total_pnl': total_pnl,
                    'positions': open_positions[:3]  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-3 –¥–ª—è dashboard
                }
            return {'count': 0, 'total_pnl': 0.0, 'positions': []}
        except Exception as e:
            print(f"Positions error: {e}")
            return {'count': 0, 'total_pnl': 0.0, 'positions': []}
    
    async def _get_ai_status(self) -> Dict:
        """–°—Ç–∞—Ç—É—Å AI-—Å–∏—Å—Ç–µ–º—ã"""
        try:
            from bot.ai import NeuralIntegration
            neural = NeuralIntegration()
            stats = neural.get_neural_statistics()
            
            return {
                'active': True,
                'win_rate': stats['neural_trader']['win_rate'],
                'confidence': 85.5,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                'last_recommendation': 'BUY Signal on Strategy_02'
            }
        except Exception as e:
            return {
                'active': False,
                'error': str(e)
            }
    
    async def _get_alerts_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤
        return 3
    
    def _format_smart_dashboard(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dashboard —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        if 'error' in data:
            return f"üö® *DASHBOARD ERROR*\n\n`{data['error']}`"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        time_str = data['timestamp'].strftime("%H:%M:%S")
        dashboard_text = f"üìä *SMART DASHBOARD*\nüïê *Updated: {time_str}*\n\n"
        
        # 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (—Å—Ç–∞—Ç—É—Å—ã, –∞–ª–µ—Ä—Ç—ã)
        if data.get('alerts', 0) > 0:
            dashboard_text += f"üö® *{data['alerts']} NEW ALERTS*\n\n"
        
        # 2. –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1)
        balance = data.get('balance')
        if balance:
            dashboard_text += f"üí∞ *BALANCE: ${balance['total']:,.2f}*\n"
            dashboard_text += f"üìà *Available: ${balance['available']:,.2f}*\n"
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è P&L
            pnl = balance.get('pnl_24h', 0)
            pnl_emoji = "üìà" if pnl >= 0 else "üìâ"
            dashboard_text += f"{pnl_emoji} *24h P&L: ${pnl:+.2f}*\n\n"
        
        # 3. –ü–û–ó–ò–¶–ò–ò (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #2)
        positions = data.get('positions', {})
        if positions['count'] > 0:
            pnl_emoji = "üü¢" if positions['total_pnl'] >= 0 else "üî¥"
            dashboard_text += f"üìä *{positions['count']} OPEN POSITIONS*\n"
            dashboard_text += f"{pnl_emoji} *Total P&L: ${positions['total_pnl']:+.2f}*\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ–∑–∏—Ü–∏–∏
            for i, pos in enumerate(positions['positions'][:2], 1):
                side = pos.get('side', 'Unknown')
                size = float(pos.get('size', 0))
                pnl = float(pos.get('unrealisedPnl', 0))
                pnl_sign = "+" if pnl >= 0 else ""
                dashboard_text += f"  {i}. {side} {size:.4f} BTC ({pnl_sign}${pnl:.2f})\n"
        else:
            dashboard_text += "üì≠ *No Open Positions*\n\n"
        
        # 4. AI STATUS (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #3)
        ai_status = data.get('ai_status', {})
        if ai_status.get('active'):
            win_rate = ai_status.get('win_rate', 0)
            confidence = ai_status.get('confidence', 0)
            
            status_emoji = "üü¢" if win_rate > 60 else "üü°" if win_rate > 40 else "üî¥"
            dashboard_text += f"üß† *AI STATUS:* {status_emoji}\n"
            dashboard_text += f"üéØ *Win Rate: {win_rate:.1f}%*\n"
            dashboard_text += f"üí° *Confidence: {confidence:.1f}%*\n"
        else:
            dashboard_text += f"üß† *AI STATUS:* üî¥ OFFLINE\n"
        
        return dashboard_text
    
    def _create_adaptive_keyboard(self, data: Dict) -> List[List[InlineKeyboardButton]]:
        """–°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        keyboard = []
        
        # –†—è–¥ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã)
        if data.get('alerts', 0) > 0:
            keyboard.append([
                InlineKeyboardButton(f"üö® VIEW {data['alerts']} ALERTS", callback_data="view_alerts")
            ])
        
        # –†—è–¥ 2: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        row2 = []
        if data.get('positions', {})['count'] > 0:
            row2.append(InlineKeyboardButton("üìä POSITIONS", callback_data="positions_detail"))
        else:
            row2.append(InlineKeyboardButton("üöÄ START TRADING", callback_data="start_trading"))
            
        row2.append(InlineKeyboardButton("üí∞ BALANCE", callback_data="balance_detail"))
        keyboard.append(row2)
        
        # –†—è–¥ 3: AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        keyboard.append([
            InlineKeyboardButton("üß† AI INSIGHTS", callback_data="ai_insights"),
            InlineKeyboardButton("üìà ANALYTICS", callback_data="analytics_main")
        ])
        
        # –†—è–¥ 4: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.append([
            InlineKeyboardButton("üîÑ REFRESH", callback_data="dashboard_main"),
            InlineKeyboardButton("‚öôÔ∏è SETTINGS", callback_data="settings_main")
        ])
        
        return keyboard
    
    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö callback queries"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        
        callback_data = query.data
        
        # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ç–∏–ø—É callback
        if callback_data == "dashboard_main":
            await self._show_smart_dashboard(update, context)
        elif callback_data == "quick_actions":
            await self._show_quick_actions(update, context)
        elif callback_data == "ai_status":
            await self._show_ai_status(update, context)
        elif callback_data == "pnl_live":
            await self._show_pnl_live(update, context)
        elif callback_data == "analytics_main":
            await self._show_analytics(update, context)
        elif callback_data == "positions_detail":
            await self._show_positions_detail(update, context)
        elif callback_data == "balance_detail":
            await self._show_balance_detail(update, context)
        elif callback_data == "emergency_stop":
            await self._emergency_stop(update, context)
        elif callback_data == "emergency_start":
            await self._emergency_start(update, context)
        elif callback_data == "ai_insights":
            await self._show_ai_insights(update, context)
        else:
            await query.edit_message_text(
                f"üöß *Feature In Development*\n\n`{callback_data}` coming soon!",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _show_quick_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """‚ö° –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        keyboard = [
            [
                InlineKeyboardButton("üö´ EMERGENCY STOP", callback_data="emergency_stop"),
                InlineKeyboardButton("‚ñ∂Ô∏è START TRADING", callback_data="emergency_start")
            ],
            [
                InlineKeyboardButton("üí∞ QUICK BALANCE", callback_data="balance_detail"),
                InlineKeyboardButton("üìà QUICK POSITIONS", callback_data="positions_detail")
            ],
            [
                InlineKeyboardButton("üß† AI RECOMMEND", callback_data="ai_insights"),
                InlineKeyboardButton("üìä LIVE STATS", callback_data="analytics_main")
            ],
            [
                InlineKeyboardButton("üîô BACK", callback_data="dashboard_main")
            ]
        ]
        
        text = (
            "‚ö° *QUICK ACTIONS*\n\n"
            "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:"
        )
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _emergency_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üö´ Emergency stop –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ CONFIRM STOP", callback_data="confirm_stop")],
            [InlineKeyboardButton("‚ùå CANCEL", callback_data="quick_actions")]
        ]
        
        text = (
            "üö® *EMERGENCY STOP*\n\n"
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç:\n"
            "‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            "‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n\n"
            "‚ùó –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏"
        )
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_ai_insights(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üß† –ü–æ–∫–∞–∑–∞—Ç—å AI-–∏–Ω—Å–∞–π—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            ai_data = await self._get_ai_insights()
            
            text = self._format_ai_insights(ai_data)
            
            keyboard = [
                [
                    InlineKeyboardButton("üéØ PREDICTIONS", callback_data="ai_predictions"),
                    InlineKeyboardButton("üìä MODEL STATS", callback_data="ai_model_stats")
                ],
                [
                    InlineKeyboardButton("üîÑ REFRESH", callback_data="ai_insights"),
                    InlineKeyboardButton("üîô BACK", callback_data="dashboard_main")
                ]
            ]
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            error_text = f"üö® *AI Insights Error*\n\n`{str(e)[:150]}...`"
            
            keyboard = [[InlineKeyboardButton("üîô BACK", callback_data="dashboard_main")]]
            
            await update.callback_query.edit_message_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _get_ai_insights(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ—Ç AI"""
        try:
            from bot.ai import NeuralIntegration
            
            neural = NeuralIntegration()
            stats = neural.get_neural_statistics()
            ranking = neural.get_strategy_ranking()
            
            return {
                'neural_stats': stats['neural_trader'],
                'strategy_ranking': ranking[:5],  # –¢–æ–ø-5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                'recent_performance': stats.get('recent_performance', {}),
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            print(f"AI Insights error: {e}")
            raise e
    
    def _format_ai_insights(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–∏–Ω—Å–∞–π—Ç–æ–≤"""
        time_str = data['timestamp'].strftime("%H:%M:%S")
        
        text = f"üß† *AI INSIGHTS*\nüïê *Updated: {time_str}*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        neural_stats = data['neural_stats']
        text += f"üéØ *Neural Network Performance:*\n"
        text += f"üí∞ Balance: ${neural_stats['current_balance']:.2f}\n"
        text += f"üìà ROI: {neural_stats['roi']:+.1f}%\n"
        text += f"üèÜ Win Rate: {neural_stats['win_rate']:.1f}%\n"
        text += f"üìä Total Bets: {neural_stats['total_bets']}\n\n"
        
        # –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        ranking = data['strategy_ranking']
        if ranking:
            text += f"üèÜ *Top Performing Strategies:*\n"
            for i, strategy in enumerate(ranking[:3], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                text += f"{emoji} {strategy['strategy']}\n"
                text += f"   üìä {strategy['success_rate']*100:.1f}% success\n"
                text += f"   üí∞ {strategy['total_signals']} signals\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        recent = data.get('recent_performance', {})
        if recent:
            text += f"\n‚ö° *Recent Activity:*\n"
            text += f"üìà Win Rate: {recent.get('win_rate', 0)*100:.1f}%\n"
            text += f"üí∞ Avg Profit: ${recent.get('avg_profit', 0):.2f}\n"
        
        return text
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ UX-–±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ UX Telegram –±–æ—Ç–∞...")
        try:
            self.app.run_polling(drop_pending_updates=True)
        except KeyboardInterrupt:
            print("üíú UX Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ UX –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    bot = TelegramBotUX(TELEGRAM_TOKEN)
    bot.start()