# bot/services/strategy_execution_service.py
"""
üéØ –°–ï–†–í–ò–° –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import importlib
from typing import Dict, List, Any, Optional
from bot.core.secure_logger import get_secure_logger
from config import get_strategy_config


class StrategyExecutionService:
    """
    üéØ –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        self.logger = get_secure_logger('strategy_execution')
        self.loaded_strategies = {}
    
    def load_strategy_modules(self, enabled_strategies: List[str]) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            enabled_strategies: –°–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        loaded_strategies = {}
        
        for strategy_name in enabled_strategies:
            try:
                config = get_strategy_config(strategy_name)
                
                if not config.get('enabled', True):
                    self.logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    continue
                
                # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥—É–ª–µ–π
                strategy_mapping = {
                    'volume_vwap_default': 'volume_vwap_strategy_v3',
                    'volume_vwap_conservative': 'volume_vwap_strategy_v3',
                    'cumdelta_sr_default': 'cumdelta_sr_strategy_v3',
                    'multitf_volume_default': 'multitf_volume_strategy_v3',
                    'fibonacci_rsi_default': 'fibonacci_rsi_strategy_v3',
                    'range_trading_default': 'range_trading_strategy_v3'
                }

                module_name = strategy_mapping.get(strategy_name, strategy_name.lower())
                strategy_module = importlib.import_module(f'bot.strategy.implementations.{module_name}')
                loaded_strategies[strategy_name] = {
                    'module': strategy_module,
                    'config': config,
                    'description': config.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                }
                
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name}: {config['description']}")
                
            except ImportError as e:
                self.logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
                continue
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
                continue
        
        self.loaded_strategies = loaded_strategies
        self.logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(loaded_strategies)}")
        return loaded_strategies
    
    def execute_strategy(self, strategy_name: str, market_data: Dict[str, Any], 
                        balance: float, state) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            Dict: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        if strategy_name not in self.loaded_strategies:
            self.logger.error(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None
        
        try:
            strategy_info = self.loaded_strategies[strategy_name]
            strategy_module = strategy_info['module']
            config = strategy_info['config']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è execute_strategy –≤ –º–æ–¥—É–ª–µ
            if not hasattr(strategy_module, 'execute_strategy'):
                self.logger.error(f"‚ùå –í —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name} –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ execute_strategy")
                return None
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            signal = strategy_module.execute_strategy(
                market_data=market_data,
                balance=balance,
                config=config,
                bot_state=state
            )

            if signal:
                if 'signal_type' not in signal and 'signal' in signal:
                    signal['signal_type'] = signal['signal']
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å–∏–≥–Ω–∞–ª—É
                signal['strategy'] = strategy_name
                signal['timestamp'] = market_data.get('timestamp')

                self.logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª: {signal.get('signal_type', 'UNKNOWN')}")
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                if self._validate_signal(signal):
                    return signal
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}")
                    return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
        
        return None
    
    def execute_all_strategies(self, active_strategies: List[str], 
                             all_market_data: Dict[str, Any], 
                             strategy_states: Dict[str, Any],
                             get_balance_func) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            active_strategies: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            all_market_data: –í—Å–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            strategy_states: –°–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            get_balance_func: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        strategy_signals = {}
        
        for strategy_name in active_strategies:
            try:
                if strategy_name not in strategy_states:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}")
                    continue
                
                state = strategy_states[strategy_name]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                current_balance = get_balance_func(strategy_name)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                signal = self.execute_strategy(
                    strategy_name, all_market_data, current_balance, state
                )
                
                if signal:
                    strategy_signals[strategy_name] = signal
                    self.logger.debug(f"üìä –°–∏–≥–Ω–∞–ª {strategy_name}: {signal['signal_type']}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
                continue
        
        if strategy_signals:
            self.logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(strategy_signals)}")
        
        return strategy_signals
    
    def _validate_signal(self, signal: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –≤–∞–ª–∏–¥–µ–Ω
        """
        required_fields = ['signal_type']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in required_fields:
            if field not in signal:
                self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ —Å–∏–≥–Ω–∞–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        valid_signal_types = [
            'ENTER_LONG', 'ENTER_SHORT', 'EXIT_LONG', 'EXIT_SHORT',
            'BUY', 'SELL', 'HOLD'
        ]
        
        if signal['signal_type'] not in valid_signal_types:
            self.logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal['signal_type']}")
            return False
        
        # –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if signal['signal_type'] in {'ENTER_LONG', 'ENTER_SHORT', 'BUY', 'SELL'}:
            if 'entry_price' not in signal and 'stop_loss' not in signal:
                self.logger.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å")
        
        return True
    
    def get_strategy_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
            Dict: –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        status = {
            'total_strategies': len(self.loaded_strategies),
            'strategies': {}
        }
        
        for name, info in self.loaded_strategies.items():
            status['strategies'][name] = {
                'loaded': True,
                'description': info['description'],
                'enabled': info['config'].get('enabled', True)
            }
        
        return status
    
    def reload_strategy(self, strategy_name: str) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if strategy_name in self.loaded_strategies:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
                del self.loaded_strategies[strategy_name]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            new_strategies = self.load_strategy_modules([strategy_name])
            
            if strategy_name in new_strategies:
                self.logger.info(f"üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
        
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_strategy_service = None


def get_strategy_service():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    Returns:
        StrategyExecutionService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    """
    global _strategy_service
    
    if _strategy_service is None:
        _strategy_service = StrategyExecutionService()
    
    return _strategy_service
