# bot/services/position_management_service.py
"""
üìà –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–Ø–ú–ò
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
"""

import time
from datetime import datetime, timezone
from typing import Optional, Dict, Any
from bot.core.secure_logger import get_secure_logger
from bot.core.order_manager import get_order_manager, OrderRequest
from bot.core.thread_safe_state import get_bot_state
from bot.core.error_handler import handle_trading_error, ErrorContext, RecoveryStrategy
from bot.core.exceptions import OrderRejectionError, RateLimitError, EmergencyStopError


class PositionManagementService:
    """
    üìà –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        self.logger = get_secure_logger('position_management')
        self.order_manager = get_order_manager()
        self.bot_state = get_bot_state()
    
    def open_position(self, api, signal: Dict[str, Any], strategy_name: str, 
                     trade_amount: float, current_price: float, state) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            api: API —ç–∫–∑–µ–º–ø–ª—è—Ä
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            trade_amount: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            Dict: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            signal_type = signal['signal_type']
            entry_price = signal.get('entry_price', current_price)
            stop_loss = signal.get('stop_loss')
            take_profit = signal.get('take_profit')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞
            side = signal_type.replace('ENTER_', '')
            api_side = 'Buy' if side == 'LONG' else 'Sell'
            
            self.logger.info(f"üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {strategy_name}: {side} ${trade_amount} –ø–æ —Ü–µ–Ω–µ ${entry_price}")
            
            # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–ê –ß–ï–†–ï–ó OrderManager
            order_request = OrderRequest(
                symbol="BTCUSDT",
                side=api_side,
                order_type="Market",
                qty=trade_amount,
                price=None,  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                stop_loss=stop_loss,
                take_profit=take_profit,
                strategy_name=strategy_name
            )
            
            order_response = self.order_manager.create_order_safe(api, order_request)
            
            if order_response and order_response.get('retCode') == 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ thread-safe –º–µ—Ö–∞–Ω–∏–∑–º
                self.bot_state.set_position(
                    symbol="BTCUSDT",
                    side=api_side,
                    size=trade_amount,
                    entry_price=entry_price,
                    avg_price=entry_price,
                    strategy_name=strategy_name
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                state.in_position = True
                state.position_side = side
                state.entry_price = entry_price
                state.entry_time = datetime.now(timezone.utc)
                state.stop_loss = stop_loss
                state.take_profit = take_profit
                state.position_size = trade_amount
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ
                self._set_stops_if_needed(api, stop_loss, take_profit)
                
                self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {strategy_name} –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                return order_response
            else:
                error_msg = order_response.get('retMsg', 'Unknown error') if order_response else 'No response'
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                return None
                
        except (OrderRejectionError, RateLimitError, EmergencyStopError) as e:
            self.logger.error(f"üö´ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {e}")
            return None
            
        except Exception as e:
            context = ErrorContext(
                strategy_name=strategy_name,
                symbol="BTCUSDT",
                operation="open_position"
            )
            handle_trading_error(e, context, RecoveryStrategy.SKIP_ITERATION)
            return None
    
    def close_position(self, api, state, strategy_name: str, signal_type: str, 
                      current_price: float) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            api: API —ç–∫–∑–µ–º–ø–ª—è—Ä
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Dict: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            if not state.in_position:
                self.logger.warning("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∑–∏—Ü–∏–∏
            if ((signal_type == 'EXIT_LONG' and state.position_side != 'BUY') or
                (signal_type == 'EXIT_SHORT' and state.position_side != 'SELL')):
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞ {signal_type} –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {state.position_side}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = 'SELL' if state.position_side == 'BUY' else 'BUY'
            api_close_side = 'Sell' if close_side == 'SELL' else 'Buy'
            
            self.logger.info(f"üîö –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {strategy_name}: {state.position_side} -> {api_close_side}")
            
            # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò –ß–ï–†–ï–ó OrderManager
            close_request = OrderRequest(
                symbol="BTCUSDT",
                side=api_close_side,
                order_type="Market",
                qty=state.position_size,
                reduce_only=True,
                strategy_name=strategy_name
            )
            
            close_response = self.order_manager.create_order_safe(api, close_request)
            
            if close_response and close_response.get('retCode') == 0:
                # –í—ã—á–∏—Å–ª—è–µ–º P&L –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                exit_price = current_price
                realized_pnl = self._calculate_pnl(state, exit_price)
                duration = self._calculate_duration(state)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state.reset()
                self.bot_state.clear_position("BTCUSDT")
                
                self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {strategy_name} –∑–∞–∫—Ä—ã—Ç–∞, P&L: ${realized_pnl:.2f}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤ –æ—Ç–≤–µ—Ç
                close_response['pnl'] = realized_pnl
                close_response['exit_price'] = exit_price
                close_response['duration'] = duration
                
                return close_response
            else:
                error_msg = close_response.get('retMsg', 'Unknown error') if close_response else 'No response'
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {error_msg}")
                return None
                
        except (OrderRejectionError, RateLimitError, EmergencyStopError) as e:
            self.logger.error(f"üö´ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {e}")
            return None
            
        except Exception as e:
            context = ErrorContext(
                strategy_name=strategy_name,
                symbol="BTCUSDT",
                operation="close_position"
            )
            handle_trading_error(e, context, RecoveryStrategy.SKIP_ITERATION)
            return None
    
    def _set_stops_if_needed(self, api, stop_loss: Optional[float],
                           take_profit: Optional[float]) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        Args:
            api: API —ç–∫–∑–µ–º–ø–ª—è—Ä
            stop_loss: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –£—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        """
        if not (stop_loss or take_profit):
            self.logger.info("üîÑ –°—Ç–æ–ø—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SL/TP")
            return

        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤
            if stop_loss and take_profit:
                self.logger.info(f"üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø—ã: SL=${stop_loss:.2f}, TP=${take_profit:.2f}")
            elif stop_loss:
                self.logger.info(f"üõë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ SL: ${stop_loss:.2f}")
            elif take_profit:
                self.logger.info(f"üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ TP: ${take_profit:.2f}")

            # –ñ–¥–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            time.sleep(2)

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤ (–¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫)
            max_attempts = 3
            for attempt in range(max_attempts):
                stop_response = api.set_trading_stop(
                    symbol="BTCUSDT",
                    stop_loss=stop_loss,
                    take_profit=take_profit
                )

                if stop_response and stop_response.get('retCode') == 0:
                    self.logger.info(f"‚úÖ –°—Ç–æ–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    return
                else:
                    error_msg = stop_response.get('retMsg', 'Unknown error') if stop_response else 'No response'
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {error_msg}")

                    if attempt < max_attempts - 1:
                        self.logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
                        time.sleep(1)

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø—ã –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤: {e}")
    
    def _calculate_pnl(self, state, exit_price: float) -> float:
        """
        –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            
        Returns:
            float: –†–∞–∑–º–µ—Ä P&L
        """
        try:
            if not state.entry_price or not state.position_size:
                return 0.0
            
            if state.position_side == 'BUY':
                pnl = (exit_price - state.entry_price) * state.position_size
            else:
                pnl = (state.entry_price - exit_price) * state.position_size
            
            return round(pnl, 2)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ P&L: {e}")
            return 0.0
    
    def _calculate_duration(self, state) -> Optional[str]:
        """
        –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            
        Returns:
            str: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            if state.entry_time:
                duration = datetime.now(timezone.utc) - state.entry_time
                return str(duration).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
        return None
    
    def sync_position_with_exchange(self, api, state) -> None:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π
        
        Args:
            api: API —ç–∫–∑–µ–º–ø–ª—è—Ä
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            positions = api.get_positions("BTCUSDT")
            
            if positions and positions.get('retCode') == 0:
                position_list = positions['result']['list']
                
                if position_list:
                    pos = position_list[0]
                    exchange_size = float(pos.get('size', 0))
                    
                    if exchange_size > 0:
                        # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        state.in_position = True
                        state.position_size = exchange_size
                        state.entry_price = float(pos.get('avgPrice', 0))
                        state.position_side = pos.get('side', 'Buy')
                        
                        self.logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Ä–∞–∑–º–µ—Ä={exchange_size}, —Ü–µ–Ω–∞={state.entry_price}")
                    else:
                        # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        if state.in_position:
                            self.logger.warning("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                            state.reset()
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_position_service = None


def get_position_service():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
    
    Returns:
        PositionManagementService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    """
    global _position_service
    
    if _position_service is None:
        _position_service = PositionManagementService()
    
    return _position_service