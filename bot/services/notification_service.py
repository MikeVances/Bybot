# bot/services/notification_service.py
"""
üîî –£–í–ï–î–û–ú–ò–¢–ï–õ–¨–ù–´–ô –°–ï–†–í–ò–°
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
"""

from datetime import datetime
from typing import Optional
from bot.core.secure_logger import get_secure_logger


class TelegramNotificationService:
    """
    üì± –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
    """
    
    def __init__(self, telegram_bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            telegram_bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.telegram_bot = telegram_bot
        self.logger = get_secure_logger('notification_service')
    
    def send_position_opened(self, signal_type: str, strategy_name: str, 
                            entry_price: float, stop_loss: float, take_profit: float, 
                            trade_amount: float, signal_strength: Optional[float] = None, 
                            comment: str = "") -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (BUY/SELL)
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            trade_amount: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            signal_strength: –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            comment: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        try:
            emoji = "üü¢" if signal_type == "BUY" else "üî¥"
            side_text = "LONG" if signal_type == "BUY" else "SHORT"
            
            message = f"""
{emoji} –ù–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê

üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}
üéØ –°—Ç–æ—Ä–æ–Ω–∞: {side_text} ({signal_type})
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:,.2f}
üìà –†–∞–∑–º–µ—Ä: {trade_amount} BTC

üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:,.2f}
üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:,.2f}

üìä Risk/Reward: {((take_profit - entry_price) / (entry_price - stop_loss)):.2f}
"""
            
            if signal_strength:
                message += f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_strength:.2f}\n"
            
            if comment:
                message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            
            message += f"\n‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            self.telegram_bot.send_admin_message(message)
            self.logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {strategy_name} {signal_type}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def send_position_closed(self, strategy_name: str, side: str, exit_price: float, 
                            pnl: float, entry_price: Optional[float] = None, 
                            duration: Optional[str] = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            side: –°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (BUY/SELL)
            exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            pnl: –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            if pnl > 0:
                emoji = "‚úÖ"
                status = "–ü–†–ò–ë–´–õ–¨"
                color = "üü¢"
            else:
                emoji = "‚ùå"
                status = "–£–ë–´–¢–û–ö"
                color = "üî¥"
            
            side_text = "LONG" if side == "BUY" else "SHORT"
            
            message = f"""
{emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê {color}

üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}
üéØ –°—Ç–æ—Ä–æ–Ω–∞: {side_text} ({side})
üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${exit_price:,.2f}

üíµ –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}
üí∏ P&L: ${pnl:,.2f} ({pnl:+.2f}%)
"""
            
            if entry_price:
                change_pct = ((exit_price - entry_price) / entry_price * 100)
                if side == "SELL":
                    change_pct = -change_pct
                message += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {change_pct:+.2f}%\n"
            
            if duration:
                message += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
            
            message += f"\n‚è∞ **–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            self.telegram_bot.send_admin_message(message)
            self.logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {strategy_name} P&L: ${pnl:.2f}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def send_risk_alert(self, alert_type: str, strategy_name: str, message: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
        
        Args:
            alert_type: –¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            emoji = "‚ö†Ô∏è" if alert_type == "WARNING" else "üö®"
            
            notification = f"""
{emoji} –†–ò–°–ö –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï

üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}
üîî –¢–∏–ø: {alert_type}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            self.telegram_bot.send_admin_message(notification)
            self.logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∏—Å–∫-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {strategy_name} - {alert_type}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∏—Å–∫-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
    
    def send_neural_recommendation(self, strategy: str, confidence: float) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        
        Args:
            strategy: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            confidence: –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        try:
            message = f"""
üß† –ù–ï–ô–†–û–ù–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø

üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}
üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            self.telegram_bot.send_admin_message(message)
            self.logger.info(f"üß† –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {strategy} ({confidence:.1%})")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
_notification_service = None


def get_notification_service(telegram_bot=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    Args:
        telegram_bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ (–¥–ª—è –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        
    Returns:
        TelegramNotificationService: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    """
    global _notification_service
    
    if _notification_service is None and telegram_bot:
        _notification_service = TelegramNotificationService(telegram_bot)
    
    return _notification_service