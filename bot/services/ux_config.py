# bot/services/ux_config.py
# üíú UX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞
# –í—Å–µ UX-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

from dataclasses import dataclass
from typing import Dict, List, Optional
from enum import Enum

class ThemeMode(Enum):
    """–¢–µ–º—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    LIGHT = "light"
    DARK = "dark" 
    AUTO = "auto"
    PURPLE = "purple"  # –ù–∞—à–∞ —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è —Ç–µ–º–∞! üíú

@dataclass
class UXConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UX-–Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    # üé® –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –¢–ï–ú–ê
    theme: ThemeMode = ThemeMode.PURPLE
    accent_color: str = "üíú"  # –ù–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
    
    # ‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
    dashboard_refresh_seconds: int = 30
    live_data_update_seconds: int = 10
    animation_duration_ms: int = 200
    
    # üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    enable_push_notifications: bool = True
    enable_sound_alerts: bool = True
    critical_alert_repeat_minutes: int = 5
    
    # üì± –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨
    mobile_first_design: bool = True
    compact_mode_threshold_width: int = 480
    max_items_per_screen: int = 5
    
    # ü§ñ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø
    enable_ai_suggestions: bool = True
    learning_mode: bool = True
    personalized_dashboard: bool = True
    
    # ‚ö° QUICK ACTIONS
    quick_actions_enabled: List[str] = None
    
    def __post_init__(self):
        if self.quick_actions_enabled is None:
            self.quick_actions_enabled = [
                "balance_check",
                "position_status", 
                "ai_recommendation",
                "emergency_stop",
                "profit_summary"
            ]

# üé® –≠–ú–û–î–ó–ò –ò –ò–ö–û–ù–ö–ò
class UXEmojis:
    """–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
    
    # –°—Ç–∞—Ç—É—Å—ã
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå" 
    WARNING = "‚ö†Ô∏è"
    INFO = "‚ÑπÔ∏è"
    LOADING = "‚è≥"
    
    # –§–∏–Ω–∞–Ω—Å—ã
    MONEY = "üí∞"
    PROFIT = "üìà"
    LOSS = "üìâ"
    BALANCE = "‚öñÔ∏è"
    
    # AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    AI = "üß†"
    ROBOT = "ü§ñ"
    NEURAL = "üîÆ"
    ALGORITHM = "‚öôÔ∏è"
    
    # –î–µ–π—Å—Ç–≤–∏—è
    PLAY = "‚ñ∂Ô∏è"
    STOP = "‚èπÔ∏è"
    PAUSE = "‚è∏Ô∏è"
    REFRESH = "üîÑ"
    SETTINGS = "‚öôÔ∏è"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    BACK = "üîô"
    FORWARD = "‚û°Ô∏è"
    UP = "‚¨ÜÔ∏è"
    DOWN = "‚¨áÔ∏è"
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    HIGH = "üö®"
    MEDIUM = "‚ö°"
    LOW = "üí°"
    
    # –ù–∞—à–∞ —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è —Ç–µ–º–∞
    PURPLE_HEART = "üíú"
    SPARKLES = "‚ú®"
    ROCKET = "üöÄ"

# üìä DASHBOARD WIDGETS
class DashboardWidget:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ dashboard"""
    
    def __init__(self, name: str, priority: int, enabled: bool = True, 
                 refresh_rate: int = 30, data_source: str = None):
        self.name = name
        self.priority = priority  # 1 = –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.enabled = enabled
        self.refresh_rate = refresh_rate  # —Å–µ–∫—É–Ω–¥—ã
        self.data_source = data_source

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
DEFAULT_WIDGETS = [
    DashboardWidget("balance_summary", 1, True, 30, "api.get_balance"),
    DashboardWidget("positions_overview", 2, True, 10, "api.get_positions"),
    DashboardWidget("ai_insights", 3, True, 60, "neural.get_insights"),
    DashboardWidget("alerts_panel", 4, True, 5, "alerts.get_active"),
    DashboardWidget("performance_metrics", 5, True, 300, "analytics.get_summary"),
    DashboardWidget("market_overview", 6, True, 60, "market.get_conditions")
]

# üé® –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê
class ColorScheme:
    """–§–∏—Ä–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    PRIMARY = "#8B5CF6"      # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    SECONDARY = "#A78BFA"    # –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    ACCENT = "#C084FC"       # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    
    # –°—Ç–∞—Ç—É—Å—ã
    SUCCESS = "#10B981"      # –ó–µ–ª—ë–Ω—ã–π
    WARNING = "#F59E0B"      # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    ERROR = "#EF4444"        # –ö—Ä–∞—Å–Ω—ã–π
    INFO = "#3B82F6"         # –°–∏–Ω–∏–π
    
    # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
    BACKGROUND = "#1F2937"   # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
    TEXT = "#F9FAFB"         # –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
    TEXT_SECONDARY = "#9CA3AF"  # –°–µ—Ä—ã–π
    
    # –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã
    GRADIENT_PRIMARY = "linear-gradient(135deg, #8B5CF6 0%, #A78BFA 100%)"
    GRADIENT_SUCCESS = "linear-gradient(135deg, #10B981 0%, #34D399 100%)"

# üîî –¢–ò–ü–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    
    CRITICAL = ("üö®", 1, True)   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
    HIGH = ("‚ö°", 2, True)       # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    MEDIUM = ("üìä", 3, False)   # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    LOW = ("üí°", 4, False)      # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    INFO = ("‚ÑπÔ∏è", 5, False)     # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ
    
    def __init__(self, emoji: str, priority: int, always_show: bool):
        self.emoji = emoji
        self.priority = priority
        self.always_show = always_show

# üì± RESPONSIVE BREAKPOINTS
class ResponsiveBreakpoints:
    """–¢–æ—á–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    MOBILE = 480
    TABLET = 768
    DESKTOP = 1024
    
    @staticmethod
    def get_device_type(width: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —à–∏—Ä–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞"""
        if width <= ResponsiveBreakpoints.MOBILE:
            return "mobile"
        elif width <= ResponsiveBreakpoints.TABLET:
            return "tablet"
        else:
            return "desktop"

# ‚ö° –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø
QUICK_ACTIONS_CONFIG = {
    "balance_check": {
        "emoji": "üí∞",
        "title": "Balance",
        "description": "Check current balance",
        "callback": "quick_balance",
        "priority": 1
    },
    "position_status": {
        "emoji": "üìä",
        "title": "Positions", 
        "description": "View open positions",
        "callback": "quick_positions",
        "priority": 2
    },
    "ai_recommendation": {
        "emoji": "üß†",
        "title": "AI Insights",
        "description": "Get AI recommendations", 
        "callback": "ai_recommend",
        "priority": 3
    },
    "emergency_stop": {
        "emoji": "üö´",
        "title": "Emergency Stop",
        "description": "Stop all trading",
        "callback": "emergency_stop", 
        "priority": 4,
        "confirmation_required": True
    },
    "profit_summary": {
        "emoji": "üìà",
        "title": "P&L",
        "description": "View profit/loss summary",
        "callback": "pnl_summary",
        "priority": 5
    }
}

# üéØ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø
class PersonalizationSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.preferred_timeframes = ["5m", "15m", "1h"]
        self.favorite_strategies = []
        self.dashboard_layout = "compact"  # compact, detailed, custom
        self.notification_preferences = {
            "trade_signals": True,
            "balance_changes": True,  
            "ai_insights": True,
            "system_alerts": True,
            "performance_reports": False
        }
        self.language = "ru"  # ru, en
        self.timezone = "UTC+3"

# üöÄ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –§–ò–ß–ò
class ExperimentalFeatures:
    """–ë–µ—Ç–∞-—Ñ–∏—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    VOICE_COMMANDS = False          # –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    AR_VISUALIZATION = False        # AR-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    PREDICTIVE_ALERTS = True        # –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
    SOCIAL_TRADING = False          # –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    ADVANCED_ANALYTICS = True       # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    MINI_APPS = True               # Telegram Mini Apps
    WEB_APP_INTEGRATION = True      # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Web App

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
ux_config = UXConfig()

# üé® HELPER FUNCTIONS
def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_map = {
        "active": UXEmojis.SUCCESS,
        "inactive": UXEmojis.ERROR,
        "warning": UXEmojis.WARNING,
        "loading": UXEmojis.LOADING,
        "profit": UXEmojis.PROFIT,
        "loss": UXEmojis.LOSS
    }
    return status_map.get(status.lower(), UXEmojis.INFO)

def format_money(amount: float, currency: str = "USD") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º"""
    if abs(amount) >= 1000000:
        return f"${amount/1000000:.1f}M"
    elif abs(amount) >= 1000:
        return f"${amount/1000:.1f}K"
    else:
        return f"${amount:.2f}"

def get_priority_color(priority: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    colors = {
        1: ColorScheme.ERROR,     # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
        2: ColorScheme.WARNING,   # –í—ã—Å–æ–∫–∏–π
        3: ColorScheme.INFO,      # –°—Ä–µ–¥–Ω–∏–π
        4: ColorScheme.SUCCESS,   # –ù–∏–∑–∫–∏–π
        5: ColorScheme.TEXT_SECONDARY  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π
    }
    return colors.get(priority, ColorScheme.TEXT)

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
__all__ = [
    'UXConfig', 'ux_config', 'UXEmojis', 'ColorScheme',
    'NotificationType', 'ResponsiveBreakpoints', 
    'QUICK_ACTIONS_CONFIG', 'PersonalizationSettings',
    'ExperimentalFeatures', 'get_status_emoji', 
    'format_money', 'get_priority_color'
]