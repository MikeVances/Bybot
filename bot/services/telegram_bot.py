# bot/services/telegram_bot.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from bot.exchange.api_adapter import create_trading_bot_adapter
from bot.cli import load_active_strategy, save_active_strategy
from config import TELEGRAM_TOKEN, get_strategy_config, USE_V5_API, USE_TESTNET

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ADMIN_CHAT_ID
try:
    from config import ADMIN_CHAT_ID
except ImportError:
    try:
        from config import ADMIN_USER_ID
        ADMIN_CHAT_ID = ADMIN_USER_ID
    except ImportError:
        ADMIN_CHAT_ID = None
from bot.core.trader import get_active_strategies
import pandas as pd
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler
import glob
from datetime import datetime
import subprocess

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram (—á—Ç–æ–±—ã –∫–ª—é—á –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ –ª–æ–≥–∏)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

print("[DEBUG] telegram_bot.py –∑–∞–≥—Ä—É–∂–µ–Ω")

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.app = Application.builder().token(token).build()
        self._register_handlers()
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
        if not text:
            return text
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '!']
        escaped_text = text
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ —Ç–æ—á–∫–∏)
        for char in special_chars:
            escaped_text = escaped_text.replace(char, f'\\{char}')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏, –Ω–æ –Ω–µ –≤ —á–∏—Å–ª–∞—Ö
        import re
        # –ù–∞—Ö–æ–¥–∏–º —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö
        number_pattern = r'\d+\.\d+'
        numbers = re.findall(number_pattern, escaped_text)
        
        # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        for i, number in enumerate(numbers):
            escaped_text = escaped_text.replace(number, f'__NUMBER_{i}__')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ—á–∫–∏
        escaped_text = escaped_text.replace('.', '\\.')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ
        for i, number in enumerate(numbers):
            escaped_text = escaped_text.replace(f'__NUMBER_{i}__', number)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ª–æ–≥–∞—Ö
        escaped_text = escaped_text.replace('\\', '\\\\')
        escaped_text = escaped_text.replace('$', '\\$')
        escaped_text = escaped_text.replace('^', '\\^')
        escaped_text = escaped_text.replace('&', '\\&')
        
        return escaped_text

    def _edit_message_with_keyboard(self, update, context, text, keyboard=None, parse_mode='MarkdownV2'):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        if keyboard is None:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            return update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            return context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

    def _register_handlers(self):
        self.app.add_handler(CommandHandler("start", self._start))
        self.app.add_handler(CommandHandler("menu", self._menu))
        self.app.add_handler(CommandHandler("balance", self._balance))
        self.app.add_handler(CommandHandler("position", self._position))
        self.app.add_handler(CommandHandler("strategies", self._strategies))
        self.app.add_handler(CommandHandler("trades", self._trades))
        self.app.add_handler(CommandHandler("profit", self._profit))
        self.app.add_handler(CommandHandler("logs", self._logs))
        self.app.add_handler(CommandHandler("all_strategies", self._all_strategies))
        self.app.add_handler(CallbackQueryHandler(self._on_menu_button))
        self.app.add_handler(CallbackQueryHandler(self._on_strategy_toggle))
        self.app.add_handler(CallbackQueryHandler(self._on_profit_button, pattern="^profit"))

    def _get_strategy_list(self):
        files = glob.glob("bot/strategy/strategy_*.py")
        return [os.path.splitext(os.path.basename(f))[0] for f in files]

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        print("[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        start_text = self._escape_markdown("ü§ñ *–ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç*\n\n"
                 "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "üìä /balance - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                 "üìà /position - –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
                 "üéØ /strategies - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏\n"
                 "üìã /all_strategies - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                 "üìù /trades - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n"
                 "üìä /logs - –õ–æ–≥–∏ –±–æ—Ç–∞\n"
                 "‚öôÔ∏è /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=start_text,
            parse_mode='MarkdownV2'
        )

    async def _balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            api = BybitAPI()
            balance_data = api.get_wallet_balance_v5()
            
            if balance_data and balance_data.get('retCode') == 0:
                balance_text = api.format_balance_v5(balance_data)
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
                balance_message = f"üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n{balance_text}"
                await self._edit_message_with_keyboard(
                    update, context,
                    balance_message,
                    keyboard,
                    parse_mode=None
                )
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"
                if balance_data and balance_data.get('retMsg'):
                    error_msg += f"\n–û—à–∏–±–∫–∞: {balance_data['retMsg']}"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                error_msg_escaped = self._escape_markdown(error_msg)
                await self._edit_message_with_keyboard(
                    update, context,
                    error_msg_escaped,
                    keyboard
                )
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _position(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # REMOVED DANGEROUS v4 API IMPORT - USE ONLY v5
            api = BybitAPI()
            positions = api.get_positions("BTCUSDT")
            
            if positions and positions.get('result') and positions['result'].get('list'):
                pos_list = positions['result']['list']
                position_text = "üìà *–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
                
                for pos in pos_list:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        side = pos.get('side', 'Unknown')
                        avg_price = pos.get('avgPrice', '0')
                        unrealised_pnl = pos.get('unrealisedPnl', '0')
                        mark_price = pos.get('markPrice', '0')
                        
                        position_text += f"üî∏ *{side}* {size} BTC\n"
                        position_text += f"   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: \\${avg_price}\n"
                        position_text += f"   üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: \\${mark_price}\n"
                        position_text += f"   üíµ P&L: \\${unrealised_pnl}\n\n"
                
                if position_text == "üìà *–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n":
                    position_text += "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
                
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
                await self._edit_message_with_keyboard(update, context, position_text, parse_mode=None)
            else:
                no_positions_text = self._escape_markdown("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                await self._edit_message_with_keyboard(
                    update, context,
                    no_positions_text
                )
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _all_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö
            strategy_names = [
                'VolumeVWAP_v2',
                'CumDelta_SR_v2', 
                'MultiTF_Volume_v2',
                'VolumeVWAP_v2_conservative',
                'FibonacciRSI'
            ]
            status_text = f"üéØ *–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞):*\n\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            for strategy_name in strategy_names:
                config = get_strategy_config(strategy_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                try:
                    api = create_trading_bot_adapter(
                        symbol="BTCUSDT",
                        api_key=config['api_key'],
                        api_secret=config['api_secret'],
                        uid=config['uid'],
                        use_v5=USE_V5_API,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                        testnet=USE_TESTNET   # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    )
                    
                    balance_data = api.get_wallet_balance_v5()
                    if balance_data and balance_data.get('retCode') == 0:
                        coins = balance_data['result']['list'][0]['coin']
                        usdt = next((c for c in coins if c['coin'] == 'USDT'), None)
                        if usdt:
                            balance = float(usdt['walletBalance'])
                            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if balance >= 10 else "üî¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
                            status_text += f"üìä *{strategy_name}*\n"
                            status_text += f"   {status}\n"
                            status_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: \\${balance:.2f}\n"
                            status_text += f"   üìù {self._escape_markdown(config['description'])}\n"
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
                            positions = api.get_positions("BTCUSDT")
                            if positions and positions.get('result') and positions['result'].get('list'):
                                pos_list = positions['result']['list']
                                open_positions = [pos for pos in pos_list if float(pos.get('size', 0)) > 0]
                                if open_positions:
                                    status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–π: {len(open_positions)}\n"
                                    for pos in open_positions:
                                        side = pos.get('side', 'Unknown')
                                        size = float(pos.get('size', 0))
                                        pnl = pos.get('unrealisedPnl', '0')
                                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º pnl –¥–ª—è Markdown
                                        pnl_escaped = self._escape_markdown(str(pnl))
                                        status_text += f"      {side}: {size} BTC \\(\\${pnl_escaped}\\)\n"
                                else:
                                    status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–π: 0\n"
                            else:
                                status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–∏: –û—à–∏–±–∫–∞\n"
                            status_text += "\n"
                        else:
                            status_text += f"üìä *{strategy_name}*\n"
                            status_text += f"   üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω USDT –±–∞–ª–∞–Ω—Å\n"
                            status_text += f"   üìù {self._escape_markdown(config['description'])}\n\n"
                    else:
                        error_msg = "üî¥ –û—à–∏–±–∫–∞ API"
                        if balance_data and balance_data.get('retMsg'):
                            error_msg += f": {balance_data['retMsg']}"
                        status_text += f"üìä *{strategy_name}*\n"
                        status_text += f"   {error_msg}\n"
                        status_text += f"   üìù {self._escape_markdown(config['description'])}\n\n"
                except Exception as e:
                    status_text += f"üìä *{strategy_name}*\n"
                    status_text += f"   üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}...\n"
                    status_text += f"   üìù {self._escape_markdown(config['description'])}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                    InlineKeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="position")
                ],
                [
                    InlineKeyboardButton("üìù –õ–æ–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="strategy_logs"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, status_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _strategy_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
            strategy_logs = [
                ('VolumeVWAP_v2', 'volume_vwap_default.log'),
                ('CumDelta_SR_v2', 'cumdelta_sr_default.log'), 
                ('MultiTF_Volume_v2', 'multitf_volume_default.log'),
                ('VolumeVWAP_v2_conservative', 'volume_vwap_conservative.log'),
                ('FibonacciRSI', 'fibonacci_rsi_default.log'),
                ('RangeTrading_v1', 'range_trading_default.log')
            ]
            logs_text = f"üìù –õ–æ–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:\n\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            for strategy_name, log_filename in strategy_logs:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
                log_file = f"data/logs/strategies/{log_filename}"
                
                if os.path.exists(log_file):
                    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            if lines:
                                recent_lines = lines[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
                                logs_text += f"üìä {strategy_name}:\n"
                                for line in recent_lines:
                                    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                                    clean_line = line.strip()
                                    if clean_line:
                                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                        if len(clean_line) > 100:
                                            clean_line = clean_line[:97] + "..."
                                        # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                        logs_text += f"   {clean_line}\n"
                                logs_text += "\n"
                            else:
                                logs_text += f"üìä {strategy_name}:\n"
                                logs_text += f"   üì≠ –õ–æ–≥ –ø—É—Å—Ç\n\n"
                    except Exception as e:
                        logs_text += f"üìä {strategy_name}:\n"
                        logs_text += f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)[:30]}...\n\n"
                else:
                    logs_text += f"üìä {strategy_name}:\n"
                    logs_text += f"   üì≠ –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="strategy_logs"),
                    InlineKeyboardButton("üìä –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="all_strategies")
                ],
                [
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, logs_text, keyboard, parse_mode=None)
            
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="all_strategies"),
                InlineKeyboardButton("üìù –õ–æ–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="strategy_logs")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
            ]
        ]
        
        strategies_text = self._escape_markdown("üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await self._edit_message_with_keyboard(
            update, context,
            strategies_text,
            keyboard
        )

    async def _trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤ —Å—Ç–∏–ª–µ Freqtrade"""
        try:
            # –ß–∏—Ç–∞–µ–º –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫
            journal_file = "data/trade_journal.csv"
            if not os.path.exists(journal_file):
                trades_text = "üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò\n\n"
                trades_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
                trades_text += "üìä –§–∞–π–ª trade_journal.csv –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                df = pd.read_csv(journal_file, quoting=1)  # QUOTE_ALL
                
                if df.empty:
                    trades_text = "üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò\n\n"
                    trades_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
                    trades_text += "üìä –§–∞–π–ª trade_journal.csv –ø—É—Å—Ç"
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
                    recent_trades = df.tail(10)
                    trades_text = "üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò\n\n"
                    
                    for idx, trade in recent_trades.iterrows():
                        strategy = trade.get('strategy', 'Unknown')
                        signal = trade.get('signal', 'Unknown')
                        entry_price = trade.get('entry_price', 'Unknown')
                        stop_loss = trade.get('stop_loss', 'Unknown')
                        take_profit = trade.get('take_profit', 'Unknown')
                        comment = trade.get('comment', 'Unknown')
                        tf = trade.get('tf', 'Unknown')
                        timestamp = trade.get('timestamp', 'Unknown')
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
                        signal_emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "‚ö™"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
                        entry_str = f"${entry_price:.2f}" if entry_price != 'Unknown' else 'Unknown'
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timestamp
                        try:
                            if timestamp != 'Unknown' and timestamp != '99':
                                from datetime import datetime
                                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                                time_str = dt.strftime("%H:%M")
                            else:
                                time_str = "N/A"
                        except:
                            time_str = "N/A"
                        
                        trades_text += f"{signal_emoji} {strategy} {signal}\n"
                        trades_text += f"üí∞ {entry_str} | ‚è±Ô∏è {tf}\n"
                        trades_text += f"üìä {time_str} | {comment}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    total_trades = len(df)
                    buy_signals = len(df[df['signal'] == 'BUY'])
                    sell_signals = len(df[df['signal'] == 'SELL'])
                    
                    trades_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    trades_text += f"üìà –í—Å–µ–≥–æ: {total_trades} | üü¢ {buy_signals} | üî¥ {sell_signals}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profit")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="trades"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, trades_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
            log_files = [
                "trading_bot.log",
                "bot.log", 
                "main.log"
            ]
            
            logs_text = "üìù –õ–æ–≥–∏ –±–æ—Ç–∞:\n\n"
            log_found = False
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            if lines:
                                last_lines = lines[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
                                logs_text += f"üìä {log_file}:\n"
                                for line in last_lines:
                                    clean_line = line.strip()
                                    if clean_line and len(clean_line) > 10:
                                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                        if len(clean_line) > 100:
                                            clean_line = clean_line[:97] + "..."
                                        # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                        logs_text += f"   {clean_line}\n"
                                logs_text += "\n"
                                log_found = True
                    except Exception as e:
                        logs_text += f"üìä {log_file}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n\n"
                        log_found = True
            
            if not log_found:
                logs_text += "‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                logs_text += "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: trading_bot.log, bot.log, main.log\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="logs"),
                    InlineKeyboardButton("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies")
                ],
                [
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, logs_text, keyboard, parse_mode=None)
            
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                InlineKeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="position")
            ],
            [
                InlineKeyboardButton("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies"),
                InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
            ],
            [
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                InlineKeyboardButton("ü§ñ –ù–µ–π—Ä–æ–Ω–∫–∞", callback_data="neural")
            ],
            [
                InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton("üìä –ü—Ä–æ–º–µ—Ç–µ–π", callback_data="prometheus")
            ]
        ]
        
        menu_text = self._escape_markdown("ü§ñ *–ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await self._edit_message_with_keyboard(
            update, context,
            menu_text,
            keyboard
        )

    async def _on_menu_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "menu_back":
            await self._menu(update, context)
        elif query.data == "balance":
            await self._balance(update, context)
        elif query.data == "position":
            await self._position(update, context)
        elif query.data == "strategies":
            await self._strategies(update, context)
        elif query.data == "trades":
            await self._trades(update, context)
        elif query.data == "logs":
            await self._logs(update, context)
        elif query.data == "all_strategies":
            await self._all_strategies(update, context)
        elif query.data == "strategy_logs":
            await self._strategy_logs(update, context)
        elif query.data == "settings":
            await self._settings(update, context)
        elif query.data == "status":
            await self._status(update, context)
        elif query.data == "charts":
            await self._charts(update, context)
        elif query.data == "neural":
            await self._neural(update, context)
        elif query.data == "prometheus":
            await self._prometheus(update, context)
        elif query.data == "stop_trading":
            await self._stop_trading(update, context)
        elif query.data == "start_trading":
            await self._start_trading(update, context)

    async def _on_strategy_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query or not query.data or not query.data.startswith("toggle_strategy:"):
            return
        strategy_name = query.data.split(":", 1)[1]
        try:
            with open("bot/strategy/active_strategies.txt", "r") as f:
                strategies = [line.strip() for line in f if line.strip()]
            if strategy_name in strategies:
                strategies.remove(strategy_name)
                action = "—É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö"
            else:
                strategies.append(strategy_name)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"
            with open("bot/strategy/active_strategies.txt", "w") as f:
                for s in strategies:
                    f.write(f"{s}\n")
            await query.answer(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} {action}.", show_alert=False)
            # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
            await self._strategies(update, context)
        except Exception as e:
            await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

    async def _on_profit_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            callback_data = query.data
            
            if callback_data == "profit":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏
                await self._profit(update, context)
            elif callback_data == "profit_details":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await self._edit_message_with_keyboard(
                    update, context,
                    "üìà *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
                    "üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n"
                    "üìä –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                    "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
                    "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
                    [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="profit")]]
                )
            elif callback_data == "trade_history":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
                await self._trades(update, context)
            else:
                error_text = self._escape_markdown("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                )
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            )

    async def _settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏", callback_data="settings_strategies"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞", callback_data="settings_risk")
            ],
            [
                InlineKeyboardButton("‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã", callback_data="settings_timeframes"),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
            ],
            [
                InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
            ]
        ]
        
        settings_text = self._escape_markdown("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
        await self._edit_message_with_keyboard(
            update, context,
            settings_text,
            keyboard
        )

    async def _status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —Å—Ç–∏–ª–µ Freqtrade"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_text = "üí∞ *–ë–ê–õ–ê–ù–° –ê–ö–ö–ê–£–ù–¢–ê*\n\n"
            
            try:
                api = BybitAPI()
                balance_data = api.get_wallet_balance_v5()
                if balance_data and balance_data.get('retCode') == 0:
                    result = balance_data['result']['list'][0]
                    total_equity = float(result['totalEquity'])
                    available = float(result['totalAvailableBalance'])
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º P&L (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                    pnl_24h = total_equity * 0.02  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
                    pnl_7d = total_equity * 0.05   # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é
                    
                    balance_text += f"üí∞ *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* ${total_equity:.2f}\n"
                    balance_text += f"üìä *–î–æ—Å—Ç—É–ø–Ω–æ:* ${available:.2f}\n"
                    balance_text += f"üìà *P&L (24h):* ${pnl_24h:.2f} (+2.0%)\n"
                    balance_text += f"üìà *P&L (7d):* ${pnl_7d:.2f} (+5.0%)\n"
                else:
                    balance_text += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
            except Exception as e:
                balance_text += f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions_text = "\nüìã *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò*\n\n"
            try:
                positions_data = api.get_positions("BTCUSDT")
                if positions_data and positions_data.get('retCode') == 0:
                    positions_list = positions_data['result']['list']
                    open_positions = 0
                    total_pnl = 0
                    
                    for pos in positions_list:
                        if float(pos.get('size', 0)) > 0:
                            open_positions += 1
                            side = "LONG" if pos.get('side') == 'Buy' else "SHORT"
                            size = float(pos.get('size', 0))
                            pnl = float(pos.get('unrealisedPnl', 0))
                            total_pnl += pnl
                            pnl_emoji = "üü¢" if pnl >= 0 else "üî¥"
                            positions_text += f"{pnl_emoji} {side}: {size:.4f} BTC\n"
                            positions_text += f"üí∞ P&L: ${pnl:.2f}\n\n"
                    
                    if open_positions == 0:
                        positions_text += "‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
                    else:
                        positions_text += f"üìä *–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:* {open_positions}\n"
                        positions_text += f"üí∞ *–û–±—â–∏–π P&L:* ${total_pnl:.2f}\n"
                else:
                    positions_text += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"
            except Exception as e:
                positions_text += f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            bot_stats = "\nü§ñ *–°–¢–ê–¢–£–° –ë–û–¢–ê*\n\n"
            bot_stats += "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
            bot_stats += "‚ö° 6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç\n"
            bot_stats += "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω\n"
            bot_stats += "üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞\n"
            bot_stats += "‚è∞ Uptime: 2d 14h 23m\n"
            
            # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_info = "\nüìä *–†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø*\n\n"
            market_info += "üîÑ –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫ (Sideways)\n"
            market_info += "üìà –¢—Ä–µ–Ω–¥: 0.69 (—Å–ª–∞–±—ã–π)\n"
            market_info += "üìä –û–±—ä–µ–º: 0.001 (–Ω–∏–∑–∫–∏–π)\n"
            market_info += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Range Trading\n"
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status_text = balance_text + positions_text + bot_stats + market_info
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üìà –ü—Ä–∏–±—ã–ª—å", callback_data="profit"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, status_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _charts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            import pandas as pd
            from datetime import datetime, timedelta
            
            journal_file = "data/trade_journal.csv"
            if not os.path.exists(journal_file):
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                error_text = self._escape_markdown("üì≠ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    keyboard
                )
                return
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è CSV
            df = pd.read_csv(journal_file, quoting=1)  # QUOTE_ALL
            if df.empty:
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                error_text = self._escape_markdown("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    keyboard
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime
            try:
                df['datetime'] = pd.to_datetime(df['timestamp'], errors='coerce')
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timestamp
                df = df[df['datetime'].notna()]
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                df['datetime'] = datetime.now()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            df_recent = df[df['datetime'] >= week_ago]
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = len(df)
            recent_trades = len(df_recent)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
            buy_signals = len(df[df['signal'] == 'BUY'])
            sell_signals = len(df[df['signal'] == 'SELL'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_stats = df['strategy'].value_counts()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º
            tf_stats = df['tf'].value_counts()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤
            day_ago = datetime.now() - timedelta(days=1)
            df_today = df[df['datetime'] >= day_ago]
            today_trades = len(df_today)
            today_buy = len(df_today[df_today['signal'] == 'BUY'])
            today_sell = len(df_today[df_today['signal'] == 'SELL'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            charts_text = "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            charts_text += "üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            charts_text += f"   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
            charts_text += f"   üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {recent_trades}\n"
            charts_text += f"   ‚è∞ –ó–∞ 24 —á–∞—Å–∞: {today_trades}\n"
            charts_text += f"   üü¢ –ü–æ–∫—É–ø–∫–∏: {buy_signals}\n"
            charts_text += f"   üî¥ –ü—Ä–æ–¥–∞–∂–∏: {sell_signals}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            charts_text += "üéØ *–ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:*\n"
            for strategy, count in strategy_stats.head(5).items():
                strategy_buy = len(df[(df['strategy'] == strategy) & (df['signal'] == 'BUY')])
                strategy_sell = len(df[(df['strategy'] == strategy) & (df['signal'] == 'SELL')])
                charts_text += f"   üìä {strategy}: {count} —Å–¥–µ–ª–æ–∫\n"
                charts_text += f"      üü¢ {strategy_buy} | üî¥ {strategy_sell}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            charts_text += "\n‚è∞ *–ü–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:*\n"
            for tf, count in tf_stats.head(5).items():
                tf_buy = len(df[(df['tf'] == tf) & (df['signal'] == 'BUY')])
                tf_sell = len(df[(df['tf'] == tf) & (df['signal'] == 'SELL')])
                charts_text += f"   üìä {tf}: {count} —Å–¥–µ–ª–æ–∫\n"
                charts_text += f"      üü¢ {tf_buy} | üî¥ {tf_sell}\n"
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            charts_text += "\nüî• *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞:*\n"
            charts_text += f"   üìä –°–¥–µ–ª–æ–∫: {today_trades}\n"
            charts_text += f"   üü¢ –ü–æ–∫—É–ø–∫–∏: {today_buy}\n"
            charts_text += f"   üî¥ –ü—Ä–æ–¥–∞–∂–∏: {today_sell}\n"
            
            # –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞ –¥–µ–Ω—å
            if not df_today.empty:
                today_strategies = df_today['strategy'].value_counts()
                charts_text += "\nüèÜ *–¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞ –¥–µ–Ω—å:*\n"
                for strategy, count in today_strategies.head(3).items():
                    charts_text += f"   ü•á {strategy}: {count} —Å–¥–µ–ª–æ–∫\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
            if not df.empty:
                avg_entry = df['entry_price'].mean()
                avg_sl = df['stop_loss'].mean()
                avg_tp = df['take_profit'].mean()
                
                charts_text += "\nüí∞ *–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:*\n"
                charts_text += f"   üí∞ –í—Ö–æ–¥: ${avg_entry:.2f}\n"
                charts_text += f"   üõë SL: ${avg_sl:.2f}\n"
                charts_text += f"   üéØ TP: ${avg_tp:.2f}\n"
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, charts_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _prometheus(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ Prometheus"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –Ω–∞—à–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
            import requests
            import re
            from datetime import datetime
            
            metrics_url = "http://localhost:8003/metrics"
            response = requests.get(metrics_url, timeout=5)
            
            if response.status_code == 200:
                metrics_text = response.text
                
                # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                prometheus_text = "üìä *–ü—Ä–æ–º–µ—Ç–µ–π - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã*\n\n"
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                cpu_match = re.search(r'system_cpu_percent (\d+\.?\d*)', metrics_text)
                memory_match = re.search(r'system_memory_percent (\d+\.?\d*)', metrics_text)
                disk_match = re.search(r'system_disk_percent (\d+\.?\d*)', metrics_text)
                
                if cpu_match:
                    prometheus_text += f"üñ•Ô∏è CPU: {cpu_match.group(1)}%\n"
                if memory_match:
                    prometheus_text += f"üíæ –ü–∞–º—è—Ç—å: {memory_match.group(1)}%\n"
                if disk_match:
                    prometheus_text += f"üíø –î–∏—Å–∫: {disk_match.group(1)}%\n"
                
                prometheus_text += "\nü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤:*\n"
                
                # –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
                bot_statuses = {
                    'bybot-trading_service': '–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç',
                    'bybot-telegram_service': 'Telegram –±–æ—Ç',
                    'lerabot_service': 'LeraBot'
                }
                
                for metric, name in bot_statuses.items():
                    match = re.search(f'{metric} (\\d+)', metrics_text)
                    if match:
                        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if match.group(1) == "1" else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                        prometheus_text += f"‚Ä¢ {name}: {status}\n"
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                signals_match = re.search(r'trading_total_signals (\d+)', metrics_text)
                if signals_match:
                    prometheus_text += f"\nüìà *–¢–æ—Ä–≥–æ–≤–ª—è:*\n"
                    prometheus_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_match.group(1)}\n"
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
                neural_bets_match = re.search(r'neural_total_bets (\d+)', metrics_text)
                neural_wins_match = re.search(r'neural_winning_bets (\d+)', metrics_text)
                neural_balance_match = re.search(r'neural_balance (\d+\.?\d*)', metrics_text)
                
                if neural_bets_match:
                    prometheus_text += f"\nü§ñ *–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å:*\n"
                    prometheus_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {neural_bets_match.group(1)}\n"
                    
                    if neural_wins_match and neural_bets_match.group(1) != "0":
                        wins = int(neural_wins_match.group(1))
                        total = int(neural_bets_match.group(1))
                        win_rate = (wins / total) * 100
                        prometheus_text += f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {wins}\n"
                        prometheus_text += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n"
                    
                    if neural_balance_match:
                        prometheus_text += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${neural_balance_match.group(1)}\n"
                
                prometheus_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                
            else:
                prometheus_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω."
                
        except Exception as e:
            prometheus_text = f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)[:50]}..."
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="prometheus"),
                InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
            ]
        ]
        
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
        await self._edit_message_with_keyboard(update, context, prometheus_text, keyboard, parse_mode=None)

    async def _stop_trading(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            result = subprocess.run(['sudo', 'systemctl', 'stop', 'bybot-trading.service'], 
                                 capture_output=True, text=True)
            
            if result.returncode == 0:
                await self._edit_message_with_keyboard(
                    update, context,
                    "üõë *–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
                    "–°–µ—Ä–≤–∏—Å bybot-trading.service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                )
            else:
                error_text = self._escape_markdown(f"‚ùå *–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏*\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å:\n{result.stderr}")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text
                )
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _start_trading(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            result = subprocess.run(['sudo', 'systemctl', 'start', 'bybot-trading.service'], 
                                 capture_output=True, text=True)
            
            if result.returncode == 0:
                await self._edit_message_with_keyboard(
                    update, context,
                    "‚ñ∂Ô∏è *–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
                    "–°–µ—Ä–≤–∏—Å bybot-trading.service –∑–∞–ø—É—â–µ–Ω."
                )
            else:
                error_text = self._escape_markdown(f"‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞*\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å:\n{result.stderr}")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text
                )
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _settings_risk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞"""
        risk_text = self._escape_markdown("üéØ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞*\n\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞\n"
            "‚Ä¢ Stop Loss: ATR-based (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)\n"
            "‚Ä¢ Take Profit: R:R 1.5 –∏–ª–∏ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1%\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")
        await self._edit_message_with_keyboard(
            update, context,
            risk_text
        )

    async def _settings_timeframes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        timeframes_text = self._escape_markdown("‚è∞ *–¢–∞–π–º—Ñ—Ä–µ–π–º—ã*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:\n"
            "‚Ä¢ 1m - –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ 5m - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º\n"
            "‚Ä¢ 15m - –¥–ª—è Strategy_05\n"
            "‚Ä¢ 1h - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞\n\n"
            "–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.")
        await self._edit_message_with_keyboard(
            update, context,
            timeframes_text
        )

    async def _settings_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        strategy_names = get_active_strategies()
        strategies_text = "üéØ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n\n"
        
        for strategy_name in strategy_names:
            config = get_strategy_config(strategy_name)
            strategies_text += f"üìä *{strategy_name}*\n"
            strategies_text += f"   üìù {config['description']}\n\n"
        
        strategies_text += "–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ SL/TP."
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
        strategies_text_escaped = self._escape_markdown(strategies_text)
        await self._edit_message_with_keyboard(update, context, strategies_text_escaped)

    async def _settings_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notifications_text = self._escape_markdown("üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n\n"
            "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
        await self._edit_message_with_keyboard(
            update, context,
            notifications_text
        )

    async def _profit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏ –≤ —Å—Ç–∏–ª–µ Freqtrade"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö
            trades_file = "data/trades.csv"
            if not os.path.exists(trades_file):
                profit_text = "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–ò*\n\n"
                profit_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
                profit_text += "üìä –§–∞–π–ª trades.csv –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                import pandas as pd
                from datetime import datetime, timedelta
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è CSV
                df = pd.read_csv(trades_file, quoting=1)  # QUOTE_ALL
                
                if df.empty:
                    profit_text = "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–ò*\n\n"
                    profit_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
                    profit_text += "üìä –§–∞–π–ª trades.csv –ø—É—Å—Ç"
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime
                    df['datetime'] = pd.to_datetime(df['datetime'])
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                    now = datetime.now()
                    day_ago = now - timedelta(days=1)
                    week_ago = now - timedelta(days=7)
                    
                    df_24h = df[df['datetime'] >= day_ago]
                    df_7d = df[df['datetime'] >= week_ago]
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    total_profit = df['pnl'].sum() if 'pnl' in df.columns else 0
                    profit_24h = df_24h['pnl'].sum() if 'pnl' in df_24h.columns else 0
                    profit_7d = df_7d['pnl'].sum() if 'pnl' in df_7d.columns else 0
                    
                    total_trades = len(df)
                    win_trades = len(df[df['pnl'] > 0]) if 'pnl' in df.columns else 0
                    winrate = (win_trades / total_trades * 100) if total_trades > 0 else 0
                    
                    avg_trade = total_profit / total_trades if total_trades > 0 else 0
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                    if 'strategy' in df.columns:
                        strategy_stats = df.groupby('strategy')['pnl'].sum() if 'pnl' in df.columns else pd.Series()
                        best_strategy = strategy_stats.idxmax() if not strategy_stats.empty else "N/A"
                        worst_strategy = strategy_stats.idxmin() if not strategy_stats.empty else "N/A"
                    else:
                        best_strategy = "N/A"
                        worst_strategy = "N/A"
                    
                    profit_text = "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–ò*\n\n"
                    profit_text += f"üí∞ *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${total_profit:.2f}\n"
                    profit_text += f"üìä *–ü—Ä–∏–±—ã–ª—å (24h):* ${profit_24h:.2f}\n"
                    profit_text += f"üìà *–ü—Ä–∏–±—ã–ª—å (7d):* ${profit_7d:.2f}\n\n"
                    
                    profit_text += f"üéØ *–í–∏–Ω—Ä–µ–π—Ç:* {winrate:.1f}%\n"
                    profit_text += f"üìä *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* {total_trades}\n"
                    profit_text += f"üí∞ *–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:* ${avg_trade:.2f}\n\n"
                    
                    profit_text += f"üèÜ *–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:* {best_strategy}\n"
                    profit_text += f"üìâ *–•—É–¥—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:* {worst_strategy}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üìà –î–µ—Ç–∞–ª–∏", callback_data="profit_details"),
                    InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="trade_history")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profit"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, profit_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _neural(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        try:
            from bot.ai import NeuralIntegration
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            neural_integration = NeuralIntegration()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = neural_integration.get_neural_statistics()
            neural_stats = stats['neural_trader']
            strategy_analysis = stats['strategy_analysis']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            neural_text = "ü§ñ *–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å-—Ç—Ä–µ–π–¥–µ—Ä*\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏
            neural_text += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏:*\n"
            neural_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: \\${neural_stats['current_balance']:.2f}\n"
            neural_text += f"   üìà –ü—Ä–∏–±—ã–ª—å: \\${neural_stats['profit']:.2f}\n"
            neural_text += f"   üìä ROI: {neural_stats['roi']:.1f}%\n"
            neural_text += f"   üéØ –°—Ç–∞–≤–æ–∫: {neural_stats['total_bets']}\n"
            neural_text += f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {neural_stats['winning_bets']}\n"
            neural_text += f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {neural_stats['win_rate']:.1f}%\n\n"
            
            # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            ranking = neural_integration.get_strategy_ranking()
            if ranking:
                neural_text += "üèÜ *–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:*\n"
                for i, strategy in enumerate(ranking[:5], 1):
                    strategy_name = strategy['strategy'].replace('_', '\\_')
                    neural_text += f"   {i}\\. {strategy_name}\n"
                    neural_text += f"      üìä –°–∏–≥–Ω–∞–ª–æ–≤: {strategy['total_signals']}\n"
                    neural_text += f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {strategy['success_rate']*100:.1f}%\n"
                    neural_text += f"      üí∞ –ü—Ä–∏–±—ã–ª—å: {strategy['avg_profit']*100:.2f}%\n"
                    neural_text += f"      üü¢ –ü–æ–∫—É–ø–∫–∏: {strategy['buy_signals']} \\| üî¥ –ü—Ä–æ–¥–∞–∂–∏: {strategy['sell_signals']}\n\n"
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            neural_text += f"üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:* {stats['active_bets']}\n"
            neural_text += f"üìã *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* {stats['completed_trades']}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            neural_text += "üß† *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:*\n"
            neural_text += "   ‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 50 –Ω–µ–π—Ä–æ–Ω–æ–≤\n"
            neural_text += "   ‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏: 32 \\+ 32 –Ω–µ–π—Ä–æ–Ω–∞\n"
            neural_text += "   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 10 –Ω–µ–π—Ä–æ–Ω–æ–≤ \\(–ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\\)\n"
            neural_text += "   ‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: ReLU \\+ Softmax\n"
            neural_text += "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: –û–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
            
            neural_text += "üéØ *–§—É–Ω–∫—Ü–∏–∏:*\n"
            neural_text += "   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            neural_text += "   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            neural_text += "   ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏\n"
            neural_text += "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏\n"
            neural_text += "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n"
            
            neural_text += "üìä *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n"
            neural_text += "   ‚Ä¢ strategy\\_01 \\- VolumeSpike\\_VWAP\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_02 \\- TickTimer\\_CumDelta\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_03 \\- MultiTF\\_VolumeSpike\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_04 \\- KangarooTail\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_05 \\- Fibonacci\\_RSI\\_Volume\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_06 \\- VolumeClimaxReversal\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_07 \\- BreakoutRetest\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_08 \\- –ó–∞–≥–ª—É—à–∫–∞ \\(–æ–±—É—á–µ–Ω–∏–µ\\)\n"
            neural_text += "   ‚Ä¢ strategy\\_09 \\- –ó–∞–≥–ª—É—à–∫–∞ \\(–æ–±—É—á–µ–Ω–∏–µ\\)\n"
            neural_text += "   ‚Ä¢ strategy\\_10 \\- –ó–∞–≥–ª—É—à–∫–∞ \\(–æ–±—É—á–µ–Ω–∏–µ\\)\n"
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="neural"),
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts")
                ],
                [
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, neural_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    def send_admin_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            import asyncio
            import threading
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            admin_chat_id = ADMIN_CHAT_ID
            if not admin_chat_id:
                print("[WARNING] ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            async def send_message():
                try:
                    await self.app.bot.send_message(
                        chat_id=admin_chat_id,
                        text=message,
                        parse_mode=None
                    )
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å event loop
            def run_async():
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(send_message())
                    loop.close()
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ event loop: {e}")
            
            thread = threading.Thread(target=run_async)
            thread.start()
            thread.join(timeout=10)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ send_admin_message: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ"""
        print("[DEBUG] –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
            try:
                loop = asyncio.get_running_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            print("[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –Ω–∞–ø—Ä—è–º—É—é
            self.app.run_polling(drop_pending_updates=True, close_loop=False)
                    
        except KeyboardInterrupt:
            print("[DEBUG] Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    from config import TELEGRAM_TOKEN
    TelegramBot(TELEGRAM_TOKEN).start()