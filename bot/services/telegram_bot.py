# bot/services/telegram_bot.py
import logging
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –†–∞–∑—Ä–µ—à–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ event loops –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏
nest_asyncio.apply()
from bot.exchange.api_adapter import create_trading_bot_adapter
from bot.exchange.bybit_api_v5 import BybitAPIV5
from bot.cli import load_active_strategy, save_active_strategy
from config import TELEGRAM_TOKEN, get_strategy_config, USE_V5_API, USE_TESTNET, BYBIT_API_KEY, BYBIT_API_SECRET

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ADMIN_CHAT_ID
try:
    from config import ADMIN_CHAT_ID
except ImportError:
    try:
        from config import ADMIN_USER_ID
        ADMIN_CHAT_ID = ADMIN_USER_ID
    except ImportError:
        ADMIN_CHAT_ID = None
from bot.core.trader import get_active_strategies
import pandas as pd
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler
import glob
from datetime import datetime
import subprocess

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram (—á—Ç–æ–±—ã –∫–ª—é—á –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ –ª–æ–≥–∏)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

print("[DEBUG] telegram_bot.py –∑–∞–≥—Ä—É–∂–µ–Ω")

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.app = Application.builder().token(token).build()
        self._register_handlers()
        self._is_running = False
        self._bot_thread = None
        self._loop = None
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
        if not text:
            return text
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '!']
        escaped_text = text
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ —Ç–æ—á–∫–∏)
        for char in special_chars:
            escaped_text = escaped_text.replace(char, f'\\{char}')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏, –Ω–æ –Ω–µ –≤ —á–∏—Å–ª–∞—Ö
        import re
        # –ù–∞—Ö–æ–¥–∏–º —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö
        number_pattern = r'\d+\.\d+'
        numbers = re.findall(number_pattern, escaped_text)
        
        # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        for i, number in enumerate(numbers):
            escaped_text = escaped_text.replace(number, f'__NUMBER_{i}__')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ—á–∫–∏
        escaped_text = escaped_text.replace('.', '\\.')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ
        for i, number in enumerate(numbers):
            escaped_text = escaped_text.replace(f'__NUMBER_{i}__', number)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ª–æ–≥–∞—Ö
        escaped_text = escaped_text.replace('\\', '\\\\')
        escaped_text = escaped_text.replace('$', '\\$')
        escaped_text = escaped_text.replace('^', '\\^')
        escaped_text = escaped_text.replace('&', '\\&')
        
        return escaped_text

    def _edit_message_with_keyboard(self, update, context, text, keyboard=None, parse_mode='MarkdownV2'):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        if keyboard is None:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            return update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            return context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

    def _register_handlers(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ü–ï–†–í–´–ú
        self.app.add_error_handler(self._error_handler)

        # –ó–∞—Ç–µ–º –æ–±—ã—á–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
        self.app.add_handler(CommandHandler("start", self._start))
        self.app.add_handler(CommandHandler("menu", self._menu))
        self.app.add_handler(CommandHandler("balance", self._balance))
        self.app.add_handler(CommandHandler("position", self._position))
        self.app.add_handler(CommandHandler("strategies", self._strategies))
        self.app.add_handler(CommandHandler("trades", self._trades))
        self.app.add_handler(CommandHandler("profit", self._profit))
        self.app.add_handler(CommandHandler("logs", self._logs))
        self.app.add_handler(CommandHandler("all_strategies", self._all_strategies))
        self.app.add_handler(CommandHandler("api", self._cmd_api_health))
        self.app.add_handler(CommandHandler("blocks", self._cmd_blocks))
        self.app.add_handler(CallbackQueryHandler(self._on_menu_button))
        self.app.add_handler(CallbackQueryHandler(self._on_strategy_toggle))
        self.app.add_handler(CallbackQueryHandler(self._on_profit_button, pattern="^profit"))

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram API"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ —à—É–º–∞
            error_message = str(context.error)
            if "RemoteProtocolError" in error_message or "Server disconnected" in error_message:
                # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ Telegram - –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ DEBUG
                logging.debug(f"Telegram network error: {error_message}")
            elif "NetworkError" in error_message:
                # –î—Ä—É–≥–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                logging.debug(f"Telegram network issue: {error_message}")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ WARNING
                logging.warning(f"Telegram error: {error_message}")
        except Exception as e:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —É–ø–∞–ª
            logging.error(f"Error in error handler: {e}")

    def _get_strategy_list(self):
        files = glob.glob("bot/strategy/strategy_*.py")
        return [os.path.splitext(os.path.basename(f))[0] for f in files]

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        print("[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        start_text = ("ü§ñ –ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç\n\n"
                 "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "üìä /balance - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                 "üìà /position - –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
                 "üéØ /strategies - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏\n"
                 "üìã /all_strategies - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                 "üìù /trades - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n"
                 "üìä /logs - –õ–æ–≥–∏ –±–æ—Ç–∞\n"
                 "‚öôÔ∏è /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=start_text
        )

    async def _balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º API credentials –¥–ª—è Telegram bot
            api = BybitAPIV5(BYBIT_API_KEY, BYBIT_API_SECRET, testnet=USE_TESTNET)
            balance_data = api.get_wallet_balance_v5()
            
            if balance_data and balance_data.get('retCode') == 0:
                balance_text = api.format_balance_v5(balance_data)
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                
                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
                balance_message = f"üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n{balance_text}"
                await self._edit_message_with_keyboard(
                    update, context,
                    balance_message,
                    keyboard,
                    parse_mode=None
                )
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"
                if balance_data and balance_data.get('retMsg'):
                    error_msg += f"\n–û—à–∏–±–∫–∞: {balance_data['retMsg']}"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                error_msg_escaped = self._escape_markdown(error_msg)
                await self._edit_message_with_keyboard(
                    update, context,
                    error_msg_escaped,
                    keyboard
                )
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _position(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API v5 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
            api = BybitAPIV5(BYBIT_API_KEY, BYBIT_API_SECRET, testnet=USE_TESTNET)
            positions = api.get_positions("BTCUSDT")
            
            if positions and positions.get('result') and positions['result'].get('list'):
                pos_list = positions['result']['list']
                position_text = "üìà *–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
                
                for pos in pos_list:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        side = pos.get('side', 'Unknown')
                        avg_price = pos.get('avgPrice', '0')
                        unrealised_pnl = pos.get('unrealisedPnl', '0')
                        mark_price = pos.get('markPrice', '0')
                        
                        position_text += f"üî∏ *{side}* {size} BTC\n"
                        position_text += f"   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: \\${avg_price}\n"
                        position_text += f"   üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: \\${mark_price}\n"
                        position_text += f"   üíµ P&L: \\${unrealised_pnl}\n\n"
                
                if position_text == "üìà *–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n":
                    position_text += "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                        InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="position"),
                        InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                    ]
                ]

                # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
                await self._edit_message_with_keyboard(update, context, position_text, keyboard, parse_mode=None)
            else:
                no_positions_text = "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
                keyboard = [
                    [
                        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                        InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="position"),
                        InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                    ]
                ]
                await self._edit_message_with_keyboard(
                    update, context,
                    no_positions_text,
                    keyboard,
                    parse_mode=None
                )
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {str(e)}"
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard,
                parse_mode=None
            )

    async def _all_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö
            strategy_names = [
                'VolumeVWAP_v2',
                'CumDelta_SR_v2', 
                'MultiTF_Volume_v2',
                'VolumeVWAP_v2_conservative',
                'FibonacciRSI'
            ]
            status_text = f"üéØ *–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞):*\n\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            for strategy_name in strategy_names:
                config = get_strategy_config(strategy_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                try:
                    api = create_trading_bot_adapter(
                        symbol="BTCUSDT",
                        api_key=config['api_key'],
                        api_secret=config['api_secret'],
                        uid=config['uid'],
                        testnet=USE_TESTNET   # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    )
                    
                    balance_data = api.get_wallet_balance_v5()
                    if balance_data and balance_data.get('retCode') == 0:
                        coins = balance_data['result']['list'][0]['coin']
                        usdt = next((c for c in coins if c['coin'] == 'USDT'), None)
                        if usdt:
                            balance = float(usdt['walletBalance'])
                            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if balance >= 10 else "üî¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
                            status_text += f"üìä *{strategy_name}*\n"
                            status_text += f"   {status}\n"
                            status_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: \\${balance:.2f}\n"
                            status_text += f"   üìù {self._escape_markdown(config['description'])}\n"
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                            from bot.core.thread_safe_state import get_bot_state
                            bot_state = get_bot_state()
                            position_info = bot_state.get_position("BTCUSDT")

                            if position_info and position_info.is_active:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–∑–∏—Ü–∏—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                                if position_info.strategy_name == strategy_name:
                                    status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–π: 1 \\(–≤–ª–∞–¥–µ–µ—Ç\\)\n"
                                    side = position_info.side.value if position_info.side else 'Unknown'
                                    size = position_info.size

                                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π PnL —Å –±–∏—Ä–∂–∏
                                    positions = api.get_positions("BTCUSDT")
                                    pnl = "0"
                                    if positions and positions.get('result') and positions['result'].get('list'):
                                        exchange_pos = positions['result']['list'][0] if positions['result']['list'] else None
                                        if exchange_pos:
                                            pnl = exchange_pos.get('unrealisedPnl', '0')

                                    pnl_escaped = self._escape_markdown(str(pnl))
                                    status_text += f"      {side}: {size} BTC \\(\\${pnl_escaped}\\)\n"
                                elif position_info.strategy_name:
                                    status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–π: 1 \\(–≤–ª–∞–¥–µ–µ—Ç: {self._escape_markdown(position_info.strategy_name)}\\)\n"
                                else:
                                    status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–π: 1 \\(–≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\\)\n"
                            else:
                                status_text += f"   üìà –ü–æ–∑–∏—Ü–∏–π: 0\n"
                            status_text += "\n"
                        else:
                            status_text += f"üìä *{strategy_name}*\n"
                            status_text += f"   üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω USDT –±–∞–ª–∞–Ω—Å\n"
                            status_text += f"   üìù {self._escape_markdown(config['description'])}\n\n"
                    else:
                        error_msg = "üî¥ –û—à–∏–±–∫–∞ API"
                        if balance_data and balance_data.get('retMsg'):
                            error_msg += f": {balance_data['retMsg']}"
                        status_text += f"üìä *{strategy_name}*\n"
                        status_text += f"   {error_msg}\n"
                        status_text += f"   üìù {self._escape_markdown(config['description'])}\n\n"
                except Exception as e:
                    status_text += f"üìä *{strategy_name}*\n"
                    status_text += f"   üî¥ –û—à–∏–±–∫–∞: {str(e)[:50]}...\n"
                    status_text += f"   üìù {self._escape_markdown(config['description'])}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                    InlineKeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="position")
                ],
                [
                    InlineKeyboardButton("üìù –õ–æ–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="strategy_logs"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, status_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _strategy_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
            strategy_logs = [
                ('VolumeVWAP_v2', 'volume_vwap_default.log'),
                ('CumDelta_SR_v2', 'cumdelta_sr_default.log'),
                ('MultiTF_Volume_v2', 'multitf_volume_default.log'),
                ('VolumeVWAP_v2_conservative', 'volume_vwap_conservative.log'),
                ('FibonacciRSI', 'fibonacci_rsi_default.log'),
                ('RangeTrading_v1', 'range_trading_default.log')
            ]

            logs_text = f"üìä –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–¢–†–ê–¢–ï–ì–ò–ô\n\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"

            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            active_strategies = 0
            strategies_with_signals = 0
            strategies_with_errors = 0

            for strategy_name, log_filename in strategy_logs:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
                log_file = f"data/logs/strategies/{log_filename}"

                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()

                        if lines:
                            active_strategies += 1

                            # –ò—â–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
                            recent_lines = lines[-10:]

                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
                            signals = []
                            errors = []
                            warnings = []

                            for line in recent_lines:
                                line_clean = line.strip()
                                if '–°–∏–≥–Ω–∞–ª:' in line and ('BUY' in line or 'SELL' in line):
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª
                                    if 'BUY' in line:
                                        signals.append('üü¢ BUY')
                                    elif 'SELL' in line:
                                        signals.append('üî¥ SELL')
                                elif 'ERROR' in line:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—Ç—å –æ—à–∏–±–∫–∏
                                    if '–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û –ë–ê–õ–ê–ù–°–£' in line:
                                        errors.append('üí∞ –ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞')
                                    elif '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞' in line:
                                        errors.append('üí∞ –ú–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤')
                                    else:
                                        errors.append('‚ùå –û—à–∏–±–∫–∞')
                                elif 'WARNING' in line:
                                    if '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' in line:
                                        warnings.append('üí∏ $0.00')
                                    else:
                                        warnings.append('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
                            strategy_short = strategy_name.replace('_v2', '').replace('_v1', '')
                            logs_text += f"üìä {strategy_short}:\n"

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                            if signals:
                                strategies_with_signals += 1
                                unique_signals = list(set(signals))
                                logs_text += f"   üéØ –°–∏–≥–Ω–∞–ª—ã: {' '.join(unique_signals[:2])}\n"

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                            if errors:
                                strategies_with_errors += 1
                                unique_errors = list(set(errors))
                                logs_text += f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {unique_errors[0]}\n"
                            elif warnings:
                                unique_warnings = list(set(warnings))
                                logs_text += f"   üí≠ –°—Ç–∞—Ç—É—Å: {unique_warnings[0]}\n"

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            last_line = lines[-1].strip()
                            if last_line:
                                try:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –ª–æ–≥–∞ (—Ñ–æ—Ä–º–∞—Ç: 2025-09-22 07:21:11,819)
                                    import re
                                    time_match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', last_line)
                                    if time_match:
                                        time_str = time_match.group(1).split(' ')[1][:5]  # HH:MM
                                        logs_text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_str}\n"
                                except:
                                    pass

                            logs_text += "\n"
                        else:
                            logs_text += f"üìä {strategy_name}:\n"
                            logs_text += f"   üì≠ –õ–æ–≥ –ø—É—Å—Ç\n\n"
                    except Exception as e:
                        logs_text += f"üìä {strategy_name}:\n"
                        logs_text += f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)[:30]}...\n\n"
                else:
                    logs_text += f"üìä {strategy_name}:\n"
                    logs_text += f"   üì≠ –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            logs_text += f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
            logs_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {active_strategies}/6\n"
            logs_text += f"üéØ –° —Å–∏–≥–Ω–∞–ª–∞–º–∏: {strategies_with_signals}\n"
            logs_text += f"‚ö†Ô∏è –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {strategies_with_errors}\n"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if strategies_with_errors > 3:
                logs_text += f"üî¥ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º\n"
            elif strategies_with_signals > 0:
                logs_text += f"üü¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
            else:
                logs_text += f"üü° –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="strategy_logs"),
                    InlineKeyboardButton("üìä –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="all_strategies")
                ],
                [
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, logs_text, keyboard, parse_mode=None)
            
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="all_strategies"),
                InlineKeyboardButton("üìù –õ–æ–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="strategy_logs")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
            ]
        ]
        
        strategies_text = self._escape_markdown("üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await self._edit_message_with_keyboard(
            update, context,
            strategies_text,
            keyboard
        )

    async def _trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ß–∏—Ç–∞–µ–º –∂—É—Ä–Ω–∞–ª —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            journal_file = "data/trade_journal.csv"
            if not os.path.exists(journal_file):
                trades_text = "üìã –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´\n\n"
                trades_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª–∞—Ö\n"
                trades_text += "üìä –§–∞–π–ª trade_journal.csv –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                try:
                    # –ß–∏—Ç–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    # –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: 15 –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ 11 –ø–æ–ª–µ–π
                    import csv

                    trades_data = []
                    with open(journal_file, 'r', encoding='utf-8') as f:
                        csv_reader = csv.reader(f)
                        header = next(csv_reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫

                        # –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π –∏–∑ trader.py
                        real_fields = ['timestamp', 'strategy', 'signal', 'entry_price', 'stop_loss', 'take_profit',
                                     'comment', 'tf', 'open', 'high', 'low', 'close', 'volume', 'signal_strength', 'risk_reward_ratio']

                        for row in csv_reader:
                            if len(row) >= len(real_fields):
                                trade_dict = {field: row[i] for i, field in enumerate(real_fields)}
                                trades_data.append(trade_dict)

                    if not trades_data:
                        trades_text = "üìã –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´\n\n"
                        trades_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª–∞—Ö\n"
                        trades_text += "üìä –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        recent_trades = trades_data[-8:]
                        trades_text = "üìã –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)\n\n"

                        for trade in recent_trades:
                            strategy = trade.get('strategy', 'Unknown')
                            signal = trade.get('signal', 'Unknown')
                            entry_price = trade.get('entry_price', 'Unknown')
                            tf = trade.get('tf', 'Unknown')
                            signal_strength = trade.get('signal_strength', '0')
                            comment = trade.get('comment', '')
                            timestamp = trade.get('timestamp', '')

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
                            signal_emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "üìä"

                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
                            try:
                                entry_str = f"${float(entry_price):,.0f}" if entry_price != 'Unknown' else "N/A"
                            except:
                                entry_str = str(entry_price)[:8]

                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ (–Ω–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!)
                            try:
                                strength = float(signal_strength)
                                strength_emoji = "üî•" if strength > 0.8 else "‚ö°" if strength > 0.6 else "üìä"
                                strength_str = f"{strength:.2f}"
                            except:
                                strength_emoji = "üìä"
                                strength_str = "N/A"

                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                            try:
                                if timestamp:
                                    from datetime import datetime
                                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                                    time_str = dt.strftime('%H:%M:%S')
                                else:
                                    time_str = "N/A"
                            except:
                                time_str = "N/A"

                            # –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                            strategy_short = strategy.replace('_trading_default', '').replace('_', ' ').title()

                            trades_text += f"{signal_emoji} {strategy_short} {signal}\n"
                            trades_text += f"üí∞ {entry_str} | ‚è±Ô∏è {tf} | {strength_emoji} {strength_str}\n"
                            trades_text += f"üïê {time_str}\n\n"

                        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                        total_signals = len(trades_data)
                        buy_signals = sum(1 for t in trades_data if t.get('signal') == 'BUY')
                        sell_signals = sum(1 for t in trades_data if t.get('signal') == 'SELL')

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
                        tf_stats = {}
                        for trade in trades_data:
                            tf = trade.get('tf', 'Unknown')
                            tf_stats[tf] = tf_stats.get(tf, 0) + 1

                        # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π)
                        try:
                            strengths = [float(t.get('signal_strength', 0)) for t in trades_data[-50:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
                            avg_strength = sum(strengths) / len(strengths) if strengths else 0
                            strength_quality = "üî• –û—Ç–ª–∏—á–Ω–æ" if avg_strength > 0.7 else "‚ö° –•–æ—Ä–æ—à–æ" if avg_strength > 0.5 else "üìä –ù–æ—Ä–º–∞"
                        except:
                            avg_strength = 0
                            strength_quality = "üìä N/A"

                        trades_text += f"üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô:\n"
                        trades_text += f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals:,}\n"
                        trades_text += f"üü¢ –ü–æ–∫—É–ø–∫–∏: {buy_signals} | üî¥ –ü—Ä–æ–¥–∞–∂–∏: {sell_signals}\n"
                        trades_text += f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞: {avg_strength:.2f} ({strength_quality})\n\n"

                        trades_text += f"‚è∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ TF:\n"
                        for tf, count in sorted(tf_stats.items()):
                            percentage = count/total_signals*100 if total_signals > 0 else 0
                            trades_text += f"‚Ä¢ {tf}: {count} ({percentage:.1f}%)\n"

                        # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        from datetime import datetime, timezone
                        today = datetime.now(timezone.utc).strftime('%Y-%m-%d')
                        today_signals = sum(1 for t in trades_data if t.get('timestamp', '').startswith(today))
                        trades_text += f"\nüî• –°–µ–≥–æ–¥–Ω—è: {today_signals} —Å–∏–≥–Ω–∞–ª–æ–≤"

                except Exception as e:
                    trades_text = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n\n"
                    trades_text += "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV —Ñ–∞–π–ª–∞"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profit")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="trades"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, trades_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
            log_files = [
                "trading_bot.log",
                "bot.log", 
                "main.log"
            ]
            
            logs_text = "üìù –õ–æ–≥–∏ –±–æ—Ç–∞:\n\n"
            log_found = False
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            if lines:
                                last_lines = lines[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
                                logs_text += f"üìä {log_file}:\n"
                                for line in last_lines:
                                    clean_line = line.strip()
                                    if clean_line and len(clean_line) > 10:
                                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                        if len(clean_line) > 100:
                                            clean_line = clean_line[:97] + "..."
                                        # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                        logs_text += f"   {clean_line}\n"
                                logs_text += "\n"
                                log_found = True
                    except Exception as e:
                        logs_text += f"üìä {log_file}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n\n"
                        log_found = True
            
            if not log_found:
                logs_text += "‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                logs_text += "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: trading_bot.log, bot.log, main.log\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="logs"),
                    InlineKeyboardButton("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies")
                ],
                [
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, logs_text, keyboard, parse_mode=None)
            
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text
            )

    async def _menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                InlineKeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="position")
            ],
            [
                InlineKeyboardButton("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies"),
                InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
            ],
            [
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                InlineKeyboardButton("ü§ñ –ù–µ–π—Ä–æ–Ω–∫–∞", callback_data="neural")
            ],
            [
                InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            ],
            [
                InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton("üìä –ü—Ä–æ–º–µ—Ç–µ–π", callback_data="prometheus")
            ]
        ]
        
        menu_text = self._escape_markdown("ü§ñ *–ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await self._edit_message_with_keyboard(
            update, context,
            menu_text,
            keyboard
        )

    async def _on_menu_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "menu_back" or query.data == "main_menu":
            await self._menu(update, context)
        elif query.data == "balance":
            await self._balance(update, context)
        elif query.data == "position":
            await self._position(update, context)
        elif query.data == "strategies":
            await self._strategies(update, context)
        elif query.data == "trades":
            await self._trades(update, context)
        elif query.data == "logs":
            await self._logs(update, context)
        elif query.data == "all_strategies":
            await self._all_strategies(update, context)
        elif query.data == "strategy_logs":
            await self._strategy_logs(update, context)
        elif query.data == "settings":
            await self._settings(update, context)
        elif query.data == "status":
            await self._status(update, context)
        elif query.data == "charts":
            await self._charts(update, context)
        elif query.data == "neural":
            await self._neural(update, context)
        elif query.data == "prometheus":
            await self._prometheus(update, context)
        elif query.data == "analytics":
            await self._analytics(update, context)
        elif query.data == "statistics":
            await self._statistics(update, context)
        elif query.data == "stop_trading":
            await self._stop_trading(update, context)
        elif query.data == "start_trading":
            await self._start_trading(update, context)
        elif query.data == "profit":
            await self._profit(update, context)
        elif query.data == "profit_details":
            await self._profit_details(update, context)
        elif query.data == "trade_history":
            await self._trades(update, context)
        elif query.data == "settings_risk":
            await self._settings_risk(update, context)
        elif query.data == "settings_timeframes":
            await self._settings_timeframes(update, context)
        elif query.data == "settings_strategies":
            await self._settings_strategies(update, context)
        elif query.data == "settings_notifications":
            await self._settings_notifications(update, context)

    async def _on_strategy_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query or not query.data or not query.data.startswith("toggle_strategy:"):
            return
        strategy_name = query.data.split(":", 1)[1]
        try:
            with open("bot/strategy/active_strategies.txt", "r") as f:
                strategies = [line.strip() for line in f if line.strip()]
            if strategy_name in strategies:
                strategies.remove(strategy_name)
                action = "—É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö"
            else:
                strategies.append(strategy_name)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"
            with open("bot/strategy/active_strategies.txt", "w") as f:
                for s in strategies:
                    f.write(f"{s}\n")
            await query.answer(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} {action}.", show_alert=False)
            # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
            await self._strategies(update, context)
        except Exception as e:
            await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

    async def _on_profit_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            callback_data = query.data
            
            if callback_data == "profit":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏
                await self._profit(update, context)
            elif callback_data == "profit_details":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await self._profit_details(update, context)
            elif callback_data == "trade_history":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
                await self._trades(update, context)
            else:
                error_text = self._escape_markdown("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                )
        except Exception as e:
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            )

    async def _settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏", callback_data="settings_strategies"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞", callback_data="settings_risk")
            ],
            [
                InlineKeyboardButton("‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã", callback_data="settings_timeframes"),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
            ],
            [
                InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
            ]
        ]
        
        settings_text = self._escape_markdown("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
        await self._edit_message_with_keyboard(
            update, context,
            settings_text,
            keyboard
        )

    async def _status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —Å—Ç–∏–ª–µ Freqtrade"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_text = "üí∞ *–ë–ê–õ–ê–ù–° –ê–ö–ö–ê–£–ù–¢–ê*\n\n"
            
            try:
                api = BybitAPIV5(BYBIT_API_KEY, BYBIT_API_SECRET, testnet=USE_TESTNET)
                balance_data = api.get_wallet_balance_v5()
                if balance_data and balance_data.get('retCode') == 0:
                    result = balance_data['result']['list'][0]
                    total_equity = float(result['totalEquity'])
                    available = float(result['totalAvailableBalance'])
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º P&L (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                    pnl_24h = total_equity * 0.02  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
                    pnl_7d = total_equity * 0.05   # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é
                    
                    balance_text += f"üí∞ *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* ${total_equity:.2f}\n"
                    balance_text += f"üìä *–î–æ—Å—Ç—É–ø–Ω–æ:* ${available:.2f}\n"
                    balance_text += f"üìà *P&L (24h):* ${pnl_24h:.2f} (+2.0%)\n"
                    balance_text += f"üìà *P&L (7d):* ${pnl_7d:.2f} (+5.0%)\n"
                else:
                    balance_text += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
            except Exception as e:
                balance_text += f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions_text = "\nüìã *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò*\n\n"
            try:
                positions_data = api.get_positions("BTCUSDT")
                if positions_data and positions_data.get('retCode') == 0:
                    positions_list = positions_data['result']['list']
                    open_positions = 0
                    total_pnl = 0
                    
                    for pos in positions_list:
                        if float(pos.get('size', 0)) > 0:
                            open_positions += 1
                            side = "LONG" if pos.get('side') == 'Buy' else "SHORT"
                            size = float(pos.get('size', 0))
                            pnl = float(pos.get('unrealisedPnl', 0))
                            total_pnl += pnl
                            pnl_emoji = "üü¢" if pnl >= 0 else "üî¥"
                            positions_text += f"{pnl_emoji} {side}: {size:.4f} BTC\n"
                            positions_text += f"üí∞ P&L: ${pnl:.2f}\n\n"
                    
                    if open_positions == 0:
                        positions_text += "‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
                    else:
                        positions_text += f"üìä *–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:* {open_positions}\n"
                        positions_text += f"üí∞ *–û–±—â–∏–π P&L:* ${total_pnl:.2f}\n"
                else:
                    positions_text += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"
            except Exception as e:
                positions_text += f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            bot_stats = "\nü§ñ *–°–¢–ê–¢–£–° –ë–û–¢–ê*\n\n"
            bot_stats += "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
            bot_stats += "‚ö° 6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç\n"
            bot_stats += "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω\n"
            bot_stats += "üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞\n"
            bot_stats += "‚è∞ Uptime: 2d 14h 23m\n"
            
            # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_info = "\nüìä *–†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø*\n\n"
            market_info += "üîÑ –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫ (Sideways)\n"
            market_info += "üìà –¢—Ä–µ–Ω–¥: 0.69 (—Å–ª–∞–±—ã–π)\n"
            market_info += "üìä –û–±—ä–µ–º: 0.001 (–Ω–∏–∑–∫–∏–π)\n"
            market_info += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Range Trading\n"
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status_text = balance_text + positions_text + bot_stats + market_info
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üìà –ü—Ä–∏–±—ã–ª—å", callback_data="profit"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, status_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _charts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            import pandas as pd
            from datetime import datetime, timedelta
            
            journal_file = "data/trade_journal.csv"
            if not os.path.exists(journal_file):
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                error_text = self._escape_markdown("üì≠ –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    keyboard
                )
                return
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è CSV –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                df = pd.read_csv(journal_file, quoting=1)  # QUOTE_ALL
            except pd.errors.ParserError as e:
                print(f"CSV parsing error: {e}")
                # –ï—Å–ª–∏ CSV –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–æ —á—Ç–æ –º–æ–∂–µ–º
                try:
                    df = pd.read_csv(journal_file, quoting=1, on_bad_lines='skip')
                except:
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
                    try:
                        df = pd.read_csv(journal_file, on_bad_lines='skip', engine='python')
                    except:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame
                        df = pd.DataFrame()
            if df.empty:
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                error_text = self._escape_markdown("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    keyboard
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime
            try:
                df['datetime'] = pd.to_datetime(df['timestamp'], errors='coerce')
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timestamp
                df = df[df['datetime'].notna()]
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                df['datetime'] = datetime.now()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            from datetime import timezone
            week_ago = datetime.now(timezone.utc) - timedelta(days=7)
            df_recent = df[df['datetime'] >= week_ago]
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = len(df)
            recent_trades = len(df_recent)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
            buy_signals = len(df[df['signal'] == 'BUY'])
            sell_signals = len(df[df['signal'] == 'SELL'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_stats = df['strategy'].value_counts()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º
            tf_stats = df['tf'].value_counts()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤
            day_ago = datetime.now(timezone.utc) - timedelta(days=1)
            df_today = df[df['datetime'] >= day_ago]
            today_trades = len(df_today)
            today_buy = len(df_today[df_today['signal'] == 'BUY'])
            today_sell = len(df_today[df_today['signal'] == 'SELL'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            charts_text = "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            charts_text += "üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            charts_text += f"   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
            charts_text += f"   üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {recent_trades}\n"
            charts_text += f"   ‚è∞ –ó–∞ 24 —á–∞—Å–∞: {today_trades}\n"
            charts_text += f"   üü¢ –ü–æ–∫—É–ø–∫–∏: {buy_signals}\n"
            charts_text += f"   üî¥ –ü—Ä–æ–¥–∞–∂–∏: {sell_signals}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            charts_text += "üéØ *–ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:*\n"
            for strategy, count in strategy_stats.head(5).items():
                strategy_buy = len(df[(df['strategy'] == strategy) & (df['signal'] == 'BUY')])
                strategy_sell = len(df[(df['strategy'] == strategy) & (df['signal'] == 'SELL')])
                charts_text += f"   üìä {strategy}: {count} —Å–¥–µ–ª–æ–∫\n"
                charts_text += f"      üü¢ {strategy_buy} | üî¥ {strategy_sell}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            charts_text += "\n‚è∞ *–ü–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:*\n"
            for tf, count in tf_stats.head(5).items():
                tf_buy = len(df[(df['tf'] == tf) & (df['signal'] == 'BUY')])
                tf_sell = len(df[(df['tf'] == tf) & (df['signal'] == 'SELL')])
                charts_text += f"   üìä {tf}: {count} —Å–¥–µ–ª–æ–∫\n"
                charts_text += f"      üü¢ {tf_buy} | üî¥ {tf_sell}\n"
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            charts_text += "\nüî• *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞:*\n"
            charts_text += f"   üìä –°–¥–µ–ª–æ–∫: {today_trades}\n"
            charts_text += f"   üü¢ –ü–æ–∫—É–ø–∫–∏: {today_buy}\n"
            charts_text += f"   üî¥ –ü—Ä–æ–¥–∞–∂–∏: {today_sell}\n"
            
            # –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞ –¥–µ–Ω—å
            if not df_today.empty:
                today_strategies = df_today['strategy'].value_counts()
                charts_text += "\nüèÜ *–¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞ –¥–µ–Ω—å:*\n"
                for strategy, count in today_strategies.head(3).items():
                    charts_text += f"   ü•á {strategy}: {count} —Å–¥–µ–ª–æ–∫\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
            if not df.empty:
                avg_entry = df['entry_price'].mean()
                avg_sl = df['stop_loss'].mean()
                avg_tp = df['take_profit'].mean()
                
                charts_text += "\nüí∞ *–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:*\n"
                charts_text += f"   üí∞ –í—Ö–æ–¥: ${avg_entry:.2f}\n"
                charts_text += f"   üõë SL: ${avg_sl:.2f}\n"
                charts_text += f"   üéØ TP: ${avg_tp:.2f}\n"
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, charts_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _prometheus(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ Prometheus"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –Ω–∞—à–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
            import requests
            import re
            from datetime import datetime
            
            metrics_url = "http://localhost:8003/metrics"
            response = requests.get(metrics_url, timeout=5)
            
            if response.status_code == 200:
                metrics_text = response.text
                
                # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                prometheus_text = "üìä –ü—Ä–æ–º–µ—Ç–µ–π - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n\n"

                # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                cpu_match = re.search(r'system_cpu_percent (\d+\.?\d*)', metrics_text)
                memory_match = re.search(r'system_memory_percent (\d+\.?\d*)', metrics_text)
                disk_match = re.search(r'system_disk_percent (\d+\.?\d*)', metrics_text)

                if cpu_match:
                    cpu_val = float(cpu_match.group(1))
                    cpu_emoji = "üî•" if cpu_val > 80 else "‚ö°" if cpu_val > 50 else "üíö"
                    prometheus_text += f"{cpu_emoji} CPU: {cpu_val:.1f}%\n"
                if memory_match:
                    mem_val = float(memory_match.group(1))
                    mem_emoji = "üî¥" if mem_val > 80 else "üü°" if mem_val > 60 else "üü¢"
                    prometheus_text += f"{mem_emoji} –ü–∞–º—è—Ç—å: {mem_val:.1f}%\n"
                if disk_match:
                    disk_val = float(disk_match.group(1))
                    disk_emoji = "üî¥" if disk_val > 90 else "üü°" if disk_val > 70 else "üü¢"
                    prometheus_text += f"{disk_emoji} –î–∏—Å–∫: {disk_val:.1f}%\n"

                prometheus_text += "\nü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤:\n"

                # –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫)
                bot_statuses = {
                    'bot_status_bybot-trading_service': '–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç',
                    'bot_status_bybot-telegram_service': 'Telegram –±–æ—Ç',
                    'bot_status_lerabot_service': 'LeraBot'
                }

                for metric, name in bot_statuses.items():
                    match = re.search(f'{metric} (\\d+)', metrics_text)
                    if match:
                        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if match.group(1) == "1" else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                        prometheus_text += f"‚Ä¢ {name}: {status}\n"

                # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                signals_match = re.search(r'trading_total_signals (\d+)', metrics_text)
                if signals_match:
                    signals_count = int(signals_match.group(1))
                    signals_emoji = "üöÄ" if signals_count > 100 else "üìà" if signals_count > 10 else "üìä"
                    prometheus_text += f"\n{signals_emoji} –¢–æ—Ä–≥–æ–≤–ª—è:\n"
                    prometheus_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_count}\n"

                # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–æ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
                latency_match = re.search(r'strategy_latency_ms (\d+\.?\d*)', metrics_text)
                cache_hit_match = re.search(r'ttl_cache_hit_rate (\d+\.?\d*)', metrics_text)

                if latency_match or cache_hit_match:
                    prometheus_text += f"\n‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n"
                    if latency_match:
                        latency = float(latency_match.group(1))
                        latency_emoji = "üü¢" if latency < 50 else "üü°" if latency < 100 else "üî¥"
                        prometheus_text += f"‚Ä¢ {latency_emoji} –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.1f}ms\n"
                    if cache_hit_match:
                        hit_rate = float(cache_hit_match.group(1))
                        cache_emoji = "üü¢" if hit_rate > 70 else "üü°" if hit_rate > 50 else "üî¥"
                        prometheus_text += f"‚Ä¢ {cache_emoji} TTL –∫—ç—à: {hit_rate:.1f}%\n"

                # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
                neural_bets_match = re.search(r'neural_total_bets (\d+)', metrics_text)
                neural_wins_match = re.search(r'neural_winning_bets (\d+)', metrics_text)
                neural_balance_match = re.search(r'neural_balance (\d+\.?\d*)', metrics_text)

                if neural_bets_match:
                    prometheus_text += f"\nü§ñ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å:\n"
                    prometheus_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {neural_bets_match.group(1)}\n"

                    if neural_wins_match and neural_bets_match.group(1) != "0":
                        wins = int(neural_wins_match.group(1))
                        total = int(neural_bets_match.group(1))
                        win_rate = (wins / total) * 100
                        prometheus_text += f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {wins}\n"
                        prometheus_text += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n"

                    if neural_balance_match:
                        prometheus_text += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${neural_balance_match.group(1)}\n"

                prometheus_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                
            else:
                prometheus_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω."
                
        except Exception as e:
            prometheus_text = f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)[:50]}..."
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="prometheus"),
                InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
            ]
        ]
        
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
        await self._edit_message_with_keyboard(update, context, prometheus_text, keyboard, parse_mode=None)

    async def _stop_trading(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            result = subprocess.run(['sudo', 'systemctl', 'stop', 'bybot-trading.service'], 
                                 capture_output=True, text=True)
            
            if result.returncode == 0:
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                await self._edit_message_with_keyboard(
                    update, context,
                    "üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n–°–µ—Ä–≤–∏—Å bybot-trading.service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                    keyboard,
                    parse_mode=None
                )
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å:\n{result.stderr}"
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    keyboard,
                    parse_mode=None
                )
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard,
                parse_mode=None
            )

    async def _start_trading(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            result = subprocess.run(['sudo', 'systemctl', 'start', 'bybot-trading.service'], 
                                 capture_output=True, text=True)
            
            if result.returncode == 0:
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                await self._edit_message_with_keyboard(
                    update, context,
                    "‚ñ∂Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞\n\n–°–µ—Ä–≤–∏—Å bybot-trading.service –∑–∞–ø—É—â–µ–Ω.",
                    keyboard,
                    parse_mode=None
                )
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å:\n{result.stderr}"
                keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
                await self._edit_message_with_keyboard(
                    update, context,
                    error_text,
                    keyboard,
                    parse_mode=None
                )
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard,
                parse_mode=None
            )

    async def _settings_risk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞"""
        risk_text = "üéØ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞*\n\n"\
            "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞\n"\
            "‚Ä¢ Stop Loss: ATR-based (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)\n"\
            "‚Ä¢ Take Profit: R:R 1.5 –∏–ª–∏ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏\n"\
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1%\n\n"\
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."
        keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="settings")]]
        await self._edit_message_with_keyboard(
            update, context,
            risk_text,
            keyboard,
            parse_mode=None
        )

    async def _settings_timeframes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        timeframes_text = "‚è∞ *–¢–∞–π–º—Ñ—Ä–µ–π–º—ã*\n\n"\
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:\n"\
            "‚Ä¢ 1m - –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"\
            "‚Ä¢ 5m - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º\n"\
            "‚Ä¢ 15m - –¥–ª—è Strategy_05\n"\
            "‚Ä¢ 1h - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞\n\n"\
            "–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑."
        keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="settings")]]
        await self._edit_message_with_keyboard(
            update, context,
            timeframes_text,
            keyboard,
            parse_mode=None
        )

    async def _settings_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        strategy_names = get_active_strategies()
        strategies_text = "üéØ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n\n"
        
        for strategy_name in strategy_names:
            config = get_strategy_config(strategy_name)
            strategies_text += f"üìä *{strategy_name}*\n"
            strategies_text += f"   üìù {config['description']}\n\n"
        
        strategies_text += "–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ SL/TP."
        
        keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="settings")]]
        await self._edit_message_with_keyboard(update, context, strategies_text, keyboard, parse_mode=None)

    async def _settings_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notifications_text = "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n"\
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"\
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π\n"\
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"\
            "‚Ä¢ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n\n"\
            "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="settings")]]
        await self._edit_message_with_keyboard(
            update, context,
            notifications_text,
            keyboard,
            parse_mode=None
        )

    async def _profit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏ –≤ —Å—Ç–∏–ª–µ Freqtrade"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö
            trades_file = "data/trades.csv"
            if not os.path.exists(trades_file):
                profit_text = "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–ò*\n\n"
                profit_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
                profit_text += "üìä –§–∞–π–ª trades.csv –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                import pandas as pd
                from datetime import datetime, timedelta
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è CSV
                try:
                    df = pd.read_csv(trades_file, quoting=1)  # QUOTE_ALL
                except pd.errors.ParserError:
                    # –ï—Å–ª–∏ CSV –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
                    df = pd.read_csv(trades_file, on_bad_lines='skip', engine='python')
                
                if df.empty:
                    profit_text = "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–ò*\n\n"
                    profit_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö\n"
                    profit_text += "üìä –§–∞–π–ª trades.csv –ø—É—Å—Ç"
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime
                    df['datetime'] = pd.to_datetime(df['datetime'])
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                    from datetime import timezone
                    now = datetime.now(timezone.utc)
                    day_ago = now - timedelta(days=1)
                    week_ago = now - timedelta(days=7)
                    
                    df_24h = df[df['datetime'] >= day_ago]
                    df_7d = df[df['datetime'] >= week_ago]
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    total_profit = df['pnl'].sum() if 'pnl' in df.columns else 0
                    profit_24h = df_24h['pnl'].sum() if 'pnl' in df_24h.columns else 0
                    profit_7d = df_7d['pnl'].sum() if 'pnl' in df_7d.columns else 0
                    
                    total_trades = len(df)
                    win_trades = len(df[df['pnl'] > 0]) if 'pnl' in df.columns else 0
                    winrate = (win_trades / total_trades * 100) if total_trades > 0 else 0
                    
                    avg_trade = total_profit / total_trades if total_trades > 0 else 0
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                    if 'strategy' in df.columns:
                        strategy_stats = df.groupby('strategy')['pnl'].sum() if 'pnl' in df.columns else pd.Series()
                        best_strategy = strategy_stats.idxmax() if not strategy_stats.empty else "N/A"
                        worst_strategy = strategy_stats.idxmin() if not strategy_stats.empty else "N/A"
                    else:
                        best_strategy = "N/A"
                        worst_strategy = "N/A"
                    
                    profit_text = "üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–ò*\n\n"
                    profit_text += f"üí∞ *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${total_profit:.2f}\n"
                    profit_text += f"üìä *–ü—Ä–∏–±—ã–ª—å (24h):* ${profit_24h:.2f}\n"
                    profit_text += f"üìà *–ü—Ä–∏–±—ã–ª—å (7d):* ${profit_7d:.2f}\n\n"
                    
                    profit_text += f"üéØ *–í–∏–Ω—Ä–µ–π—Ç:* {winrate:.1f}%\n"
                    profit_text += f"üìä *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* {total_trades}\n"
                    profit_text += f"üí∞ *–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:* ${avg_trade:.2f}\n\n"
                    
                    profit_text += f"üèÜ *–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:* {best_strategy}\n"
                    profit_text += f"üìâ *–•—É–¥—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:* {worst_strategy}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üìà –î–µ—Ç–∞–ª–∏", callback_data="profit_details"),
                    InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="trade_history")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profit"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω
            await self._edit_message_with_keyboard(update, context, profit_text, keyboard, parse_mode=None)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _profit_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        try:
            import pandas as pd
            from datetime import datetime, timedelta, timezone

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫
            journal_file = "data/trade_journal.csv"
            if not os.path.exists(journal_file):
                details_text = "üìà *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
                details_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                details_text += "üìä –§–∞–π–ª trade_journal.csv –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    df = pd.read_csv(journal_file, quoting=1)
                except pd.errors.ParserError:
                    df = pd.read_csv(journal_file, on_bad_lines='skip', engine='python')

                if df.empty:
                    details_text = "üìà *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
                    details_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                    details_text += "üìä –§–∞–π–ª –ø—É—Å—Ç"
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp
                    df['datetime'] = pd.to_datetime(df['timestamp'], errors='coerce')
                    df = df[df['datetime'].notna()]

                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã
                    now = datetime.now(timezone.utc)
                    day_ago = now - timedelta(days=1)
                    week_ago = now - timedelta(days=7)
                    month_ago = now - timedelta(days=30)

                    df_24h = df[df['datetime'] >= day_ago]
                    df_7d = df[df['datetime'] >= week_ago]
                    df_30d = df[df['datetime'] >= month_ago]

                    details_text = "üìà *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"

                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                    details_text += "üìä *–°–∏–≥–Ω–∞–ª—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:*\n"
                    details_text += f"   üìÖ –ó–∞ 24 —á–∞—Å–∞: {len(df_24h)}\n"
                    details_text += f"   üìÖ –ó–∞ 7 –¥–Ω–µ–π: {len(df_7d)}\n"
                    details_text += f"   üìÖ –ó–∞ 30 –¥–Ω–µ–π: {len(df_30d)}\n"
                    details_text += f"   üìÖ –í—Å–µ–≥–æ: {len(df)}\n\n"

                    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                    details_text += "üéØ *–ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:*\n"
                    strategy_stats = df.groupby('strategy').agg({
                        'signal': ['count'],
                        'entry_price': ['mean']
                    }).round(2)

                    strategy_signals = df['strategy'].value_counts()
                    for strategy, count in strategy_signals.head(10).items():
                        buy_count = len(df[(df['strategy'] == strategy) & (df['signal'] == 'BUY')])
                        sell_count = len(df[(df['strategy'] == strategy) & (df['signal'] == 'SELL')])

                        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        recent_strategy = df[df['strategy'] == strategy].tail(5)
                        if not recent_strategy.empty:
                            avg_price = recent_strategy['entry_price'].mean()
                            last_signal = recent_strategy.iloc[-1]['signal']
                            last_time = recent_strategy.iloc[-1]['datetime'].strftime('%m-%d %H:%M')
                        else:
                            avg_price = 0
                            last_signal = "N/A"
                            last_time = "N/A"

                        details_text += f"\nüìä *{strategy}*:\n"
                        details_text += f"   üìà –í—Å–µ–≥–æ: {count} ({buy_count} BUY / {sell_count} SELL)\n"
                        details_text += f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.2f}\n"
                        details_text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_signal} ({last_time})\n"

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
                    details_text += "\n‚è∞ *–ü–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:*\n"
                    tf_stats = df['tf'].value_counts()
                    for tf, count in tf_stats.items():
                        tf_buy = len(df[(df['tf'] == tf) & (df['signal'] == 'BUY')])
                        tf_sell = len(df[(df['tf'] == tf) & (df['signal'] == 'SELL')])
                        details_text += f"   {tf}: {count} ({tf_buy} BUY / {tf_sell} SELL)\n"

                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
                    if not df_24h.empty:
                        details_text += "\nüïê *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞:*\n"
                        hourly_activity = df_24h.groupby(df_24h['datetime'].dt.hour).size()
                        for hour in sorted(hourly_activity.index):
                            count = hourly_activity[hour]
                            details_text += f"   {hour:02d}:00 - {count} —Å–∏–≥–Ω–∞–ª–æ–≤\n"

                    # –¢–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–ø—Ä–∏—á–∏–Ω—ã
                    details_text += "\nüí¨ *–¢–æ–ø –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
                    comment_stats = df['comment'].value_counts()
                    for comment, count in comment_stats.head(5).items():
                        if len(comment) > 30:
                            comment = comment[:27] + "..."
                        details_text += f"   ‚Ä¢ {comment}: {count}\n"

            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
                ],
                [
                    InlineKeyboardButton("üí∞ –ü—Ä–∏–±—ã–ª—å", callback_data="profit"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]

            # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await self._edit_message_with_keyboard(update, context, details_text, keyboard, parse_mode=None)

        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="profit")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _neural(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        try:
            from bot.ai import NeuralIntegration
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            neural_integration = NeuralIntegration()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = neural_integration.get_neural_statistics()
            neural_stats = stats['neural_trader']
            strategy_analysis = stats['strategy_analysis']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            neural_text = "ü§ñ *–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å-—Ç—Ä–µ–π–¥–µ—Ä*\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏
            neural_text += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏:*\n"
            neural_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: \\${neural_stats['current_balance']:.2f}\n"
            neural_text += f"   üìà –ü—Ä–∏–±—ã–ª—å: \\${neural_stats['profit']:.2f}\n"
            neural_text += f"   üìä ROI: {neural_stats['roi']:.1f}%\n"
            neural_text += f"   üéØ –°—Ç–∞–≤–æ–∫: {neural_stats['total_bets']}\n"
            neural_text += f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {neural_stats['winning_bets']}\n"
            neural_text += f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {neural_stats['win_rate']:.1f}%\n\n"
            
            # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            ranking = neural_integration.get_strategy_ranking()
            if ranking and len(ranking) > 0:
                neural_text += "üèÜ *–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:*\n"
                for i, strategy in enumerate(ranking[:5], 1):
                    strategy_name = strategy['strategy'].replace('_', '\\_')
                    neural_text += f"   {i}\\. {strategy_name}\n"
                    neural_text += f"      üìä –°–∏–≥–Ω–∞–ª–æ–≤: {strategy['total_signals']}\n"
                    neural_text += f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {strategy['success_rate']*100:.1f}%\n"
                    neural_text += f"      üí∞ –ü—Ä–∏–±—ã–ª—å: {strategy['avg_profit']*100:.2f}%\n"
                    neural_text += f"      üü¢ –ü–æ–∫—É–ø–∫–∏: {strategy['buy_signals']} \\| üî¥ –ü—Ä–æ–¥–∞–∂–∏: {strategy['sell_signals']}\n\n"
            else:
                neural_text += "üèÜ *–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:*\n"
                neural_text += "   üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                neural_text += "   üîÑ –ù–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n\n"
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            neural_text += f"üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:* {stats['active_bets']}\n"
            neural_text += f"üìã *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* {stats['completed_trades']}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            neural_text += "üß† *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:*\n"
            neural_text += "   ‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 50 –Ω–µ–π—Ä–æ–Ω–æ–≤\n"
            neural_text += "   ‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏: 32 \\+ 32 –Ω–µ–π—Ä–æ–Ω–∞\n"
            neural_text += "   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 10 –Ω–µ–π—Ä–æ–Ω–æ–≤ \\(–ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\\)\n"
            neural_text += "   ‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: ReLU \\+ Softmax\n"
            neural_text += "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: –û–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
            
            neural_text += "üéØ *–§—É–Ω–∫—Ü–∏–∏:*\n"
            neural_text += "   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            neural_text += "   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            neural_text += "   ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏\n"
            neural_text += "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏\n"
            neural_text += "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n"
            
            neural_text += "üìä *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n"
            neural_text += "   ‚Ä¢ strategy\\_01 \\- VolumeSpike\\_VWAP\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_02 \\- TickTimer\\_CumDelta\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_03 \\- MultiTF\\_VolumeSpike\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_04 \\- KangarooTail\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_05 \\- Fibonacci\\_RSI\\_Volume\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_06 \\- VolumeClimaxReversal\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_07 \\- BreakoutRetest\\_Optimized\n"
            neural_text += "   ‚Ä¢ strategy\\_08 \\- AdvancedMomentum\\_AI\n"
            neural_text += "   ‚Ä¢ strategy\\_09 \\- SmartVolume\\_ML\n"
            neural_text += "   ‚Ä¢ strategy\\_10 \\- NeuralPattern\\_Recognition\n"
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="neural"),
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts")
                ],
                [
                    InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]
            
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown V2
            await self._edit_message_with_keyboard(update, context, neural_text, keyboard)
            
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            import pandas as pd
            from datetime import datetime, timedelta, timezone

            # –ß–∏—Ç–∞–µ–º –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫
            try:
                df = pd.read_csv('data/trade_journal.csv')
                if df.empty:
                    raise ValueError("–ñ—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç")

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if 'timestamp' in df.columns:
                    df['datetime'] = pd.to_datetime(df['timestamp'])
                elif 'datetime' in df.columns:
                    df['datetime'] = pd.to_datetime(df['datetime'])
                else:
                    raise ValueError("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")

            except Exception as e:
                raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now(timezone.utc) - timedelta(days=7)
            df_recent = df[df['datetime'] >= week_ago]

            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = len(df)
            recent_trades = len(df_recent)
            buy_signals = len(df[df['signal'] == 'BUY'])
            sell_signals = len(df[df['signal'] == 'SELL'])

            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_stats = df['strategy'].value_counts().head(5)

            # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º
            tf_stats = df['tf'].value_counts().head(3)

            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤
            day_ago = datetime.now(timezone.utc) - timedelta(days=1)
            df_today = df[df['datetime'] >= day_ago]
            today_trades = len(df_today)

            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
            df_recent['hour'] = df_recent['datetime'].dt.hour
            hourly_activity = df_recent['hour'].value_counts().sort_index()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            analytics_text = "üìà *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏*\n\n"

            # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            analytics_text += "üìä *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
            analytics_text += f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_trades:,}\n"
            analytics_text += f"   üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {recent_trades:,}\n"
            analytics_text += f"   ‚è∞ –ó–∞ 24 —á–∞—Å–∞: {today_trades}\n"
            analytics_text += f"   üü¢ –ü–æ–∫—É–ø–∫–∏: {buy_signals:,} ({buy_signals/total_trades*100:.1f}%)\n"
            analytics_text += f"   üî¥ –ü—Ä–æ–¥–∞–∂–∏: {sell_signals:,} ({sell_signals/total_trades*100:.1f}%)\n\n"

            # –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            analytics_text += "üéØ *–¢–æ–ø-5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:*\n"
            for i, (strategy, count) in enumerate(strategy_stats.items(), 1):
                strategy_name = strategy.replace('_', '\\_')
                percentage = count/total_trades*100
                analytics_text += f"   {i}\\. {strategy_name}\n"
                analytics_text += f"      üìä {count:,} —Å–∏–≥–Ω–∞–ª–æ–≤ ({percentage:.1f}%)\n"

            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
            analytics_text += "\n‚è∞ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:*\n"
            for tf, count in tf_stats.items():
                percentage = count/total_trades*100
                analytics_text += f"   üìä {tf}: {count:,} ({percentage:.1f}%)\n"

            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if len(hourly_activity) > 0:
                peak_hour = hourly_activity.idxmax()
                peak_count = hourly_activity.max()
                analytics_text += f"\nüî• *–ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                analytics_text += f"   ‚è∞ {peak_hour}:00 - {peak_count} —Å–∏–≥–Ω–∞–ª–æ–≤\n"

            # –¢—Ä–µ–Ω–¥—ã
            if recent_trades > 0:
                daily_avg = recent_trades / 7
                analytics_text += f"\nüìà *–¢—Ä–µ–Ω–¥—ã:*\n"
                analytics_text += f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {daily_avg:.1f} —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                if today_trades > daily_avg:
                    analytics_text += f"   üî• –°–µ–≥–æ–¥–Ω—è –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (+{today_trades-daily_avg:.1f})\n"
                else:
                    analytics_text += f"   üìâ –°–µ–≥–æ–¥–Ω—è –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ({today_trades-daily_avg:.1f})\n"

            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics"),
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
                ],
                [
                    InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]

            await self._edit_message_with_keyboard(update, context, analytics_text, keyboard, parse_mode=None)

        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    async def _statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            import pandas as pd
            import psutil
            import os
            from datetime import datetime, timezone

            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cpu_percent = psutil.cpu_percent(interval=None)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = psutil.Process()
            process_memory = process.memory_info()
            process_cpu = process.cpu_percent()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
            trade_journal_size = 0
            trade_journal_lines = 0
            if os.path.exists('data/trade_journal.csv'):
                trade_journal_size = os.path.getsize('data/trade_journal.csv')
                with open('data/trade_journal.csv', 'r') as f:
                    trade_journal_lines = sum(1 for _ in f) - 1  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

            log_files_size = 0
            if os.path.exists('trading_bot.log'):
                log_files_size += os.path.getsize('trading_bot.log')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            api_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
            try:
                from bot.exchange.bybit_api_v5 import BybitAPIV5
                from config import get_api_credentials
                api_key, api_secret = get_api_credentials()
                api = BybitAPIV5(api_key, api_secret, testnet=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                server_time = api.get_server_time()
                if server_time.get('retCode') == 0:
                    api_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                else:
                    api_status = f"üü° –û—à–∏–±–∫–∞: {server_time.get('retMsg', 'Unknown')}"
            except Exception as e:
                api_status = f"üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)[:30]}..."

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            strategies_count = 0
            try:
                import glob
                strategy_files = glob.glob("bot/strategy/strategy_*.py")
                strategies_count = len(strategy_files)
            except:
                strategies_count = "N/A"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            stats_text = "üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"

            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            stats_text += "üñ•Ô∏è *–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:*\n"
            stats_text += f"   üî• CPU: {cpu_percent:.1f}%\n"
            stats_text += f"   üß† RAM: {memory.percent:.1f}% ({memory.used/(1024**3):.1f}GB/{memory.total/(1024**3):.1f}GB)\n"
            stats_text += f"   üíæ –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used/(1024**3):.1f}GB/{disk.total/(1024**3):.1f}GB)\n\n"

            # –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
            stats_text += "ü§ñ *–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞:*\n"
            stats_text += f"   üî• CPU: {process_cpu:.1f}%\n"
            stats_text += f"   üß† RAM: {process_memory.rss/(1024**2):.1f}MB\n"
            stats_text += f"   üìä PID: {process.pid}\n\n"

            # API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            stats_text += "üåê *API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n"
            stats_text += f"   üîó Bybit API: {api_status}\n"
            stats_text += f"   üì° Telegram Bot: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n\n"

            # –î–∞–Ω–Ω—ã–µ
            stats_text += "üìÅ *–î–∞–Ω–Ω—ã–µ:*\n"
            stats_text += f"   üìã –°–¥–µ–ª–æ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ: {trade_journal_lines:,}\n"
            stats_text += f"   üìÑ –†–∞–∑–º–µ—Ä –∂—É—Ä–Ω–∞–ª–∞: {trade_journal_size/(1024**2):.1f}MB\n"
            stats_text += f"   üìù –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {log_files_size/(1024**2):.1f}MB\n\n"

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            stats_text += "‚öôÔ∏è *–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*\n"
            stats_text += f"   üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategies_count}\n"
            stats_text += f"   üìä Rate Limiter: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
            stats_text += f"   üõ°Ô∏è Risk Manager: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
            stats_text += f"   üìà Order Manager: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n\n"

            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            uptime = datetime.now(timezone.utc) - datetime.fromtimestamp(process.create_time(), timezone.utc)
            hours = int(uptime.total_seconds() // 3600)
            minutes = int((uptime.total_seconds() % 3600) // 60)
            stats_text += f"‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {hours}—á {minutes}–º\n"

            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="statistics"),
                    InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")
                ],
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                    InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")
                ]
            ]

            await self._edit_message_with_keyboard(update, context, stats_text, keyboard, parse_mode=None)

        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="menu_back")]]
            error_text = self._escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await self._edit_message_with_keyboard(
                update, context,
                error_text,
                keyboard
            )

    def send_admin_message(self, message: str, with_menu: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            import asyncio
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup

            admin_chat_id = ADMIN_CHAT_ID
            if not admin_chat_id:
                print("[WARNING] ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return

            async def send_message():
                reply_markup = None
                if with_menu:
                    keyboard = [[InlineKeyboardButton("üìä –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                await self.app.bot.send_message(
                    chat_id=admin_chat_id,
                    text=message,
                    parse_mode=None,
                    reply_markup=reply_markup
                )

            loop = self._loop
            if loop and loop.is_running():
                future = asyncio.run_coroutine_threadsafe(send_message(), loop)
                try:
                    future.result(timeout=10)
                except Exception as send_exc:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_exc}")
            else:
                asyncio.run(send_message())

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ send_admin_message: {e}")

    async def _cmd_api_health(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            from bot.monitoring.api_health_monitor import get_api_health_monitor

            monitor = get_api_health_monitor()
            dashboard = monitor.get_dashboard_data()

            if dashboard['status'] == 'no_data':
                await update.message.reply_text("üìä API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return

            current = dashboard['current']
            hourly = dashboard['hourly_stats']
            alerts = dashboard['alerts']

            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
            state_emoji = {
                'healthy': 'üü¢',
                'degraded': 'üü°',
                'unstable': 'üü†',
                'failed': 'üî¥',
                'maintenance': 'üîµ'
            }

            alert_emoji = {
                'ok': '‚úÖ',
                'warning': '‚ö†Ô∏è',
                'critical': 'üö®'
            }

            message = f"""üìä API HEALTH STATUS

üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {state_emoji.get(current['connection_state'], '‚ùì')} {current['connection_state']}
‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {current['response_time']:.2f}s {alert_emoji.get(alerts['response_time_status'], '‚ùì')}
‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {current['failure_rate']*100:.1f}% {alert_emoji.get(alerts['failure_rate_status'], '‚ùì')}
üîÑ –ü–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á: {current['consecutive_failures']}
üóÇÔ∏è Cache hit rate: {current['cache_hit_rate']*100:.1f}%
üìÅ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ: {current['cached_items']} –∑–∞–ø–∏—Å–µ–π

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ß–ê–°:
‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {hourly['avg_response_time']:.2f}s
‚ùå –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {hourly['avg_failure_rate']*100:.1f}%
üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {hourly['total_requests']}
üîç –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {hourly['data_points']}"""

            await update.message.reply_text(message)

        except ImportError:
            await update.message.reply_text("üìä API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def _cmd_blocks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"""
        try:
            from bot.core.blocking_alerts import get_blocking_alerts_manager

            manager = get_blocking_alerts_manager()
            stats = manager.get_blocking_stats()
            active_blocks = manager.get_active_blocks()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            resolved_count = manager.auto_resolve_expired_blocks()
            if resolved_count > 0:
                manager.logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–µ–Ω–æ {resolved_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")

            message = f"""üö´ –°–¢–ê–¢–£–° –ë–õ–û–ö–ò–†–û–í–û–ö

üìä –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats['total_blocks']}
üî¥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_blocks', 0)}
üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {stats.get('last_24h', 0)}
‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats.get('last_1h', 0)}

üìã –ü–æ –ø—Ä–∏—á–∏–Ω–∞–º:"""

            for reason, count in stats.get('by_reason', {}).items():
                message += f"\n‚Ä¢ {reason}: {count}"

            if stats.get('most_common_reason') != 'none':
                message += f"\n\nüî• –ß–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞: {stats['most_common_reason']}"

            if active_blocks:
                message += f"\n\nüö® –ê–ö–¢–ò–í–ù–´–ï –ë–õ–û–ö–ò–†–û–í–ö–ò ({len(active_blocks)}):"
                for block in active_blocks[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    severity_emoji = {"CRITICAL": "üö®", "HIGH": "üî¥", "MEDIUM": "üü°", "LOW": "üü¢"}
                    emoji = severity_emoji.get(block.severity, "‚ö†Ô∏è")
                    message += f"\n{emoji} {block.strategy} ({block.symbol}): {block.message}"
            else:
                message += "\n\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            recent = stats.get('recent_blocks', [])
            if recent:
                message += f"\n\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ò:"
                for block in recent[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    severity_emoji = {"CRITICAL": "üö®", "HIGH": "üî¥", "MEDIUM": "üü°", "LOW": "üü¢"}
                    emoji = severity_emoji.get(block['severity'], "‚ö†Ô∏è")
                    message += f"\n{emoji} {block['timestamp']} - {block['strategy']}: {block['message']}"

            await update.message.reply_text(message)

        except ImportError:
            await update.message.reply_text("üö´ –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")

    def _run_in_thread(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop"""
        import threading
        import asyncio

        def thread_worker():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            self._loop = loop
            try:
                async def run_bot():
                    print("[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥...")
                    print(f"[DEBUG] –¢–æ–∫–µ–Ω –¥–ª–∏–Ω–∞: {len(self.token) if self.token else 'None'}")
                    print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(self.app.handlers)}")
                    await self.app.run_polling(drop_pending_updates=False, stop_signals=None)
                print("[DEBUG] –ó–∞–ø—É—Å–∫–∞–µ–º run_bot() –≤ event loop...")
                loop.run_until_complete(run_bot())
                print("[DEBUG] run_bot() –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ thread_worker: {e}")
                import traceback
                traceback.print_exc()
            finally:
                loop.close()
                self._loop = None
                self._is_running = False

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=thread_worker, daemon=True)
        thread.start()
        print("[DEBUG] Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –≤—Å–µ–≥–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        print(f"[DEBUG] start() –≤—ã–∑–≤–∞–Ω, _is_running={self._is_running}")
        if self._is_running:
            print("[DEBUG] Telegram –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return

        print("[DEBUG] –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        self._is_running = True
        print("[DEBUG] –§–ª–∞–≥ _is_running —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True")
        self._run_in_thread()
        print("[DEBUG] _run_in_thread() –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    from config import TELEGRAM_TOKEN
    TelegramBot(TELEGRAM_TOKEN).start()
