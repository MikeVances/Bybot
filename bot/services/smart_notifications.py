# bot/services/smart_notifications.py
# üíú –£–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –¥–ª—è Telegram –±–æ—Ç–∞
# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–µ —Ä–∞–∑–¥—Ä–∞–∂–∞—é—â–∏–µ!

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum
import json

from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode

from .ux_config import (
    UXEmojis, NotificationType, ux_config, 
    get_status_emoji, format_money
)

@dataclass
class SmartNotification:
    """–£–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    id: str
    type: NotificationType
    title: str
    message: str
    data: Dict[str, Any]
    priority: int
    expires_at: datetime
    sent_at: Optional[datetime] = None
    read_at: Optional[datetime] = None
    action_buttons: Optional[List[Dict]] = None
    
    @property
    def is_expired(self) -> bool:
        return datetime.now() > self.expires_at
    
    @property
    def is_read(self) -> bool:
        return self.read_at is not None

class NotificationManager:
    """üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot, admin_chat_id: str):
        self.bot = bot
        self.admin_chat_id = admin_chat_id
        self.logger = logging.getLogger(__name__)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.active_notifications: Dict[str, SmartNotification] = {}
        self.notification_history: List[SmartNotification] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        self.user_preferences: Dict[str, Dict] = {}
        
        # Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        self.rate_limits: Dict[str, List[datetime]] = {}
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.context_analyzer = ContextAnalyzer()
        
    async def send_smart_notification(
        self, 
        notification_type: str,
        title: str,
        message: str,
        data: Dict = None,
        priority: int = 3,
        ttl_minutes: int = 60,
        user_id: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-5, –≥–¥–µ 1 = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)
            ttl_minutes: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –∞–¥–º–∏–Ω—É)
        """
        
        try:
            # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_id = f"{notification_type}_{datetime.now().timestamp()}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            if not self._check_rate_limit(notification_type, priority):
                self.logger.debug(f"Rate limit exceeded for {notification_type}")
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            enhanced_notification = await self._enhance_notification(
                notification_type, title, message, data or {}, priority
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if not self._should_send_notification(enhanced_notification, user_id):
                return False
            
            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification = SmartNotification(
                id=notification_id,
                type=NotificationType.HIGH,  # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                title=enhanced_notification['title'],
                message=enhanced_notification['message'],
                data=enhanced_notification['data'],
                priority=priority,
                expires_at=datetime.now() + timedelta(minutes=ttl_minutes),
                action_buttons=enhanced_notification.get('buttons')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await self._send_notification_to_telegram(notification, user_id)
            
            if success:
                notification.sent_at = datetime.now()
                self.active_notifications[notification_id] = notification
                self.logger.info(f"Smart notification sent: {notification_id}")
            
            return success
            
        except Exception as e:
            self.logger.error(f"Error sending smart notification: {e}")
            return False
    
    def _check_rate_limit(self, notification_type: str, priority: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
        
        now = datetime.now()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if priority == 1:
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        if notification_type not in self.rate_limits:
            self.rate_limits[notification_type] = []
        
        history = self.rate_limits[notification_type]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        cutoff = now - timedelta(hours=1)
        history[:] = [ts for ts in history if ts > cutoff]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        limits = {
            1: 100,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ - –±–µ–∑ –ª–∏–º–∏—Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏
            2: 20,   # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - 20 –≤ —á–∞—Å
            3: 10,   # –°—Ä–µ–¥–Ω–∏–π - 10 –≤ —á–∞—Å
            4: 5,    # –ù–∏–∑–∫–∏–π - 5 –≤ —á–∞—Å
            5: 3     # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ - 3 –≤ —á–∞—Å
        }
        
        limit = limits.get(priority, 5)
        
        if len(history) >= limit:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        history.append(now)
        return True
    
    async def _enhance_notification(
        self, 
        notification_type: str, 
        title: str, 
        message: str, 
        data: Dict, 
        priority: int
    ) -> Dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ë–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
        enhanced = {
            'title': title,
            'message': message,
            'data': data,
            'buttons': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if notification_type == 'trading_signal':
            enhanced = await self._enhance_trading_signal(enhanced)
        elif notification_type == 'balance_change':
            enhanced = await self._enhance_balance_notification(enhanced)
        elif notification_type == 'ai_insight':
            enhanced = await self._enhance_ai_notification(enhanced)
        elif notification_type == 'system_alert':
            enhanced = await self._enhance_system_alert(enhanced)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        enhanced['title'] = f"{get_status_emoji('active')} {enhanced['title']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if priority <= 2:
            time_str = datetime.now().strftime("%H:%M")
            enhanced['message'] = f"üïê *{time_str}* | {enhanced['message']}"
        
        return enhanced
    
    async def _enhance_trading_signal(self, notification: Dict) -> Dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        data = notification['data']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if 'strategy' in data:
            strategy = data['strategy']
            notification['title'] = f"üìà {strategy} Signal"
        
        if 'signal' in data and 'entry_price' in data:
            signal_type = data['signal']
            price = data['entry_price']
            
            emoji = "üü¢" if signal_type == "BUY" else "üî¥"
            notification['message'] = f"{emoji} *{signal_type}* at ${price:.2f}\n{notification['message']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º quick action –∫–Ω–æ–ø–∫–∏
        notification['buttons'] = [
            {'text': 'üìä View Position', 'callback': f"view_position_{data.get('symbol', 'BTCUSDT')}"},
            {'text': '‚öôÔ∏è Settings', 'callback': 'trading_settings'},
            {'text': 'üö´ Disable Strategy', 'callback': f"disable_{data.get('strategy', 'unknown')}"}
        ]
        
        return notification
    
    async def _enhance_balance_notification(self, notification: Dict) -> Dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ"""
        
        data = notification['data']
        
        if 'balance_change' in data:
            change = data['balance_change']
            emoji = "üìà" if change > 0 else "üìâ"
            formatted_change = format_money(abs(change))
            
            notification['title'] = f"{emoji} Balance {'Increased' if change > 0 else 'Decreased'}"
            notification['message'] = f"Change: {'+' if change > 0 else '-'}{formatted_change}\n{notification['message']}"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        notification['buttons'] = [
            {'text': 'üí∞ Full Balance', 'callback': 'balance_detail'},
            {'text': 'üìä Analytics', 'callback': 'analytics_main'}
        ]
        
        return notification
    
    async def _enhance_ai_notification(self, notification: Dict) -> Dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ AI-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        data = notification['data']
        
        # –î–æ–±–∞–≤–ª—è–µ–º AI-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if 'confidence' in data:
            confidence = data['confidence']
            confidence_emoji = "üéØ" if confidence > 0.8 else "üí°" if confidence > 0.6 else "ü§î"
            
            notification['title'] = f"{confidence_emoji} AI Insight ({confidence*100:.0f}%)"
        
        if 'recommendation' in data:
            rec = data['recommendation']
            notification['message'] = f"üß† *Recommendation:* {rec}\n{notification['message']}"
        
        # AI-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        notification['buttons'] = [
            {'text': 'üß† AI Dashboard', 'callback': 'ai_insights'},
            {'text': 'üìä Model Stats', 'callback': 'ai_model_stats'},
            {'text': 'üéØ Predictions', 'callback': 'ai_predictions'}
        ]
        
        return notification
    
    async def _enhance_system_alert(self, notification: Dict) -> Dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        
        data = notification['data']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        alert_type = data.get('alert_type', 'general')
        
        type_emojis = {
            'error': 'üö®',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è',
            'success': '‚úÖ',
            'maintenance': 'üîß'
        }
        
        emoji = type_emojis.get(alert_type, 'üì¢')
        notification['title'] = f"{emoji} System Alert"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        notification['buttons'] = [
            {'text': 'üìä System Status', 'callback': 'system_status'},
            {'text': 'üîß Settings', 'callback': 'settings_main'}
        ]
        
        return notification
    
    def _should_send_notification(self, notification: Dict, user_id: Optional[str]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preferences = self.user_preferences.get(user_id or 'admin', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        notification_type = notification['data'].get('type', 'general')
        
        if not preferences.get(f'enable_{notification_type}', True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è "–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"
        if self._is_quiet_hours(preferences):
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
            if notification['data'].get('priority', 3) > 2:
                return False
        
        return True
    
    def _is_quiet_hours(self, preferences: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ä–µ–º—è –ª–∏ '–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'"""
        
        if not preferences.get('enable_quiet_hours', False):
            return False
        
        now = datetime.now()
        current_hour = now.hour
        
        quiet_start = preferences.get('quiet_hours_start', 23)
        quiet_end = preferences.get('quiet_hours_end', 7)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        if quiet_start > quiet_end:
            return current_hour >= quiet_start or current_hour < quiet_end
        else:
            return quiet_start <= current_hour < quiet_end
    
    async def _send_notification_to_telegram(
        self, 
        notification: SmartNotification, 
        user_id: Optional[str]
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = f"*{notification.title}*\n\n{notification.message}"
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            reply_markup = None
            if notification.action_buttons:
                keyboard = []
                for button in notification.action_buttons:
                    keyboard.append([
                        InlineKeyboardButton(
                            button['text'], 
                            callback_data=button['callback']
                        )
                    ])
                reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
            chat_id = user_id if user_id else self.admin_chat_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN,
                disable_notification=notification.priority > 3  # –¢–∏—Ö–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            )
            
            return True
            
        except Exception as e:
            self.logger.error(f"Error sending to Telegram: {e}")
            return False
    
    async def send_trading_signal_notification(
        self, 
        strategy: str, 
        signal: str, 
        entry_price: float, 
        symbol: str = "BTCUSDT"
    ):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        await self.send_smart_notification(
            notification_type='trading_signal',
            title=f'{strategy} Trading Signal',
            message=f'New {signal} signal detected',
            data={
                'strategy': strategy,
                'signal': signal,
                'entry_price': entry_price,
                'symbol': symbol,
                'type': 'trading_signal'
            },
            priority=2,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            ttl_minutes=30
        )
    
    async def send_balance_change_notification(
        self, 
        new_balance: float, 
        change: float, 
        reason: str = "Trading activity"
    ):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        
        await self.send_smart_notification(
            notification_type='balance_change',
            title='Balance Update',
            message=f'Balance changed due to {reason}',
            data={
                'new_balance': new_balance,
                'balance_change': change,
                'reason': reason,
                'type': 'balance_change'
            },
            priority=3 if abs(change) < 100 else 2,  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            ttl_minutes=120
        )
    
    async def send_ai_insight_notification(
        self, 
        insight: str, 
        confidence: float, 
        recommendation: str = None
    ):
        """AI-–∏–Ω—Å–∞–π—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        
        await self.send_smart_notification(
            notification_type='ai_insight',
            title='AI Market Insight',
            message=insight,
            data={
                'insight': insight,
                'confidence': confidence,
                'recommendation': recommendation,
                'type': 'ai_insight'
            },
            priority=3,
            ttl_minutes=90
        )
    
    def cleanup_expired_notifications(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        now = datetime.now()
        expired_ids = [
            notification_id for notification_id, notification 
            in self.active_notifications.items()
            if notification.is_expired
        ]
        
        for notification_id in expired_ids:
            expired_notification = self.active_notifications.pop(notification_id)
            self.notification_history.append(expired_notification)
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.notification_history) > 1000:
            self.notification_history = self.notification_history[-500:]
        
        if expired_ids:
            self.logger.debug(f"Cleaned up {len(expired_ids)} expired notifications")

class ContextAnalyzer:
    """üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.market_conditions = {}
        self.user_activity = {}
        self.trading_patterns = {}
    
    async def analyze_market_context(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        return {
            'volatility': 'medium',
            'trend': 'bullish',
            'volume': 'high',
            'sentiment': 'positive'
        }
    
    async def analyze_user_activity(self, user_id: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return {
            'last_active': datetime.now(),
            'activity_level': 'high',
            'preferred_notifications': ['trading_signals', 'balance_changes']
        }

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'SmartNotification', 'NotificationManager', 
    'ContextAnalyzer', 'NotificationType'
]