# bot/exchange/bybit_api_v5.py
"""
–ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit API v5 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pybit
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit
"""

import os
import logging
import pandas as pd
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any, Union, Callable
import csv

from pybit.unified_trading import HTTP
from config import BYBIT_API_KEY, BYBIT_API_SECRET, BYBIT_API_URL


class BybitAPIV5:
    """
    –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit API v5 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pybit
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Bybit
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API
    - –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π v5
    """
    
    def __init__(self, api_key: str = None, api_secret: str = None, testnet: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit API v5

        Args:
            api_key: API –∫–ª—é—á (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ config)
            api_secret: API —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ config)
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∑ config
        self.api_key = api_key or BYBIT_API_KEY
        self.api_secret = api_secret or BYBIT_API_SECRET

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
        from config import get_api_config
        api_config = get_api_config()
        self.base_url = api_config['base_url']

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É testnet
        self.testnet = api_config['testnet']

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit API
        import os
        original_proxies = {}
        for proxy_key in ['HTTP_PROXY', 'HTTPS_PROXY', 'ALL_PROXY', 'http_proxy', 'https_proxy', 'all_proxy']:
            if proxy_key in os.environ:
                original_proxies[proxy_key] = os.environ.pop(proxy_key)

        try:
            self.session = HTTP(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            )
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in original_proxies.items():
                os.environ[key] = value

        # –î–ª—è testnet —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
        if self.testnet:
            self.session.endpoint = self.base_url
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –¥–ª—è demo —Å–µ—Ä–≤–µ—Ä–∞
            self.session.BASE_URL = self.base_url

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
        self._logger = None

        # Rate limiter –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        self._rate_limiter = None

        # üîÑ Enhanced Connection Manager —Å heartbeat –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        self._connection_manager = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ enhanced connection manager
        from bot.core.enhanced_api_connection import setup_enhanced_connection_manager
        self.connection_manager = setup_enhanced_connection_manager(
            self.session,
            base_url=self.base_url,
            backup_endpoints=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logger
        import logging
        logging.getLogger('bybit_api_v5').info(f"üöÄ Bybit API v5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (testnet: {self.testnet}, URL: {self.base_url})")

    @property
    def logger(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è logger –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
        if self._logger is None:
            try:
                from bot.core.secure_logger import get_secure_logger
                self._logger = get_secure_logger('bybit_api_v5')
            except ImportError:
                import logging
                self._logger = logging.getLogger('bybit_api_v5')
        return self._logger

    @property
    def rate_limiter(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate_limiter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
        if self._rate_limiter is None:
            try:
                from bot.core.rate_limiter import get_rate_limiter
                self._rate_limiter = get_rate_limiter()
            except ImportError:
                # Fallback: —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ rate_limiter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                class MockRateLimiter:
                    def can_make_request(self, endpoint): return True
                self._rate_limiter = MockRateLimiter()
        return self._rate_limiter

    def _call_api(self, operation_name: str, func: Callable[[], Dict[str, Any]],
                  *, cache_key: Optional[str] = None) -> Dict[str, Any]:
        if self.connection_manager:
            try:
                return self.connection_manager.execute_with_fallback(
                    operation=func,
                    operation_name=operation_name,
                    cache_key=cache_key
                )
            except Exception as exc:
                self.logger.error(f"‚ùå {operation_name}: {exc}")
                return {"retCode": -1, "retMsg": str(exc)}

        try:
            return func()
        except Exception as exc:
            self.logger.error(f"‚ùå {operation_name}: {exc}")
            return {"retCode": -1, "retMsg": str(exc)}

    def get_wallet_balance_v5(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ (v5 API)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("get_wallet_balance"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for get_wallet_balance"}
            
            response = self._call_api(
                "get_wallet_balance",
                lambda: self.session.get_wallet_balance(accountType="UNIFIED"),
                cache_key="wallet_balance"
            )
            self.logger.safe_log_api_response(
                response, 
                "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", 
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
            )
            return response
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def format_balance_v5(self, balance_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            balance_data: –î–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç API
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
        """
        if not balance_data or balance_data.get('retCode') != 0:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            def safe_float_format(value, decimals=4):
                try:
                    if value == '' or value is None:
                        return "0.0000"
                    return f"{float(value):.{decimals}f}"
                except (ValueError, TypeError):
                    return "0.0000"

            result = balance_data['result']['list'][0]
            coins = "\n".join(
                f"{coin['coin']}: {safe_float_format(coin.get('walletBalance', 0))} (${safe_float_format(coin.get('usdValue', 0), 2)})"
                for coin in result.get('coin', [])
            )

            total_equity = safe_float_format(result.get('totalEquity', 0), 2)
            total_available = safe_float_format(result.get('totalAvailableBalance', 0), 2)

            return f"""–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_equity}
–î–æ—Å—Ç—É–ø–Ω–æ: ${total_available}
–ú–æ–Ω–µ—Ç—ã:
{coins}"""
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
    
    def create_order(self, symbol: str, side: str, order_type: str, qty: float, 
                    price: Optional[float] = None, stop_loss: Optional[float] = None, 
                    take_profit: Optional[float] = None, reduce_only: bool = False, 
                    position_idx: Optional[int] = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            side: –°—Ç–æ—Ä–æ–Ω–∞ (Buy/Sell)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market/Limit)
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            stop_loss: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reduce_only: –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            position_idx: –ò–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏
            
        Returns:
            –û—Ç–≤–µ—Ç API
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("create_order"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for create_order"}
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {
                "category": "linear",
                "symbol": symbol,
                "side": side,
                "orderType": order_type,
                "qty": str(qty),
                "accountType": "UNIFIED"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            if order_type == "Limit" and price:
                params["price"] = str(price)
            
            # –°—Ç–æ–ø—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ set_trading_stop()
            # –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ stopLoss –∏ takeProfit –≤ create_order –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º reduce_only
            if reduce_only:
                params["reduceOnly"] = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º position_idx
            if position_idx is not None:
                params["positionIdx"] = position_idx
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            self.logger.safe_log_order_request(symbol, side, order_type, qty, price)
            
            response = self._call_api(
                "create_order",
                lambda: self.session.place_order(**params)
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            self.logger.safe_log_api_response(
                response,
                "–û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def set_trading_stop(self, symbol: str, stop_loss: Optional[float] = None, 
                         take_profit: Optional[float] = None, 
                         sl_trigger_by: str = "MarkPrice", 
                         tp_trigger_by: str = "MarkPrice") -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            stop_loss: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            sl_trigger_by: –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è SL
            tp_trigger_by: –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è TP
            
        Returns:
            –û—Ç–≤–µ—Ç API
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("set_trading_stop"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for set_trading_stop"}
            params = {
                "category": "linear",
                "symbol": symbol,
                "accountType": "UNIFIED"
            }
            
            if stop_loss:
                params["stopLoss"] = str(stop_loss)
                params["slTriggerBy"] = sl_trigger_by
                self.logger.info(f"üõë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL: {stop_loss}")
            
            if take_profit:
                params["takeProfit"] = str(take_profit)
                params["tpTriggerBy"] = tp_trigger_by
                self.logger.info(f"üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP: {take_profit}")
            
            response = self._call_api(
                "set_trading_stop",
                lambda: self.session.set_trading_stop(**params)
            )
            
            self.logger.safe_log_api_response(
                response,
                "–°—Ç–æ–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤"
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_positions(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏)
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("get_positions"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for get_positions"}
            params = {
                "category": "linear",
                "accountType": "UNIFIED"
            }
            
            if symbol:
                params["symbol"] = symbol
            
            response = self._call_api(
                "get_positions",
                lambda: self.session.get_positions(**params),
                cache_key=f"positions_{symbol or 'ALL'}"
            )
            
            self.logger.safe_log_api_response(
                response,
                "–ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_ohlcv(self, symbol: str = "BTCUSDT", interval: str = "1", limit: int = 100) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö (v5 API) —Å fallback –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1, 3, 5, 15, 30, 60, 120, 240, 360, 720, D, M, W)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

        Returns:
            DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("get_kline"):
                self.logger.error("Rate limit exceeded for get_kline")
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç Bybit
            interval_map = {
                "1": "1", "3": "3", "5": "5", "15": "15", "30": "30",
                "60": "60", "120": "120", "240": "240", "360": "360", "720": "720",
                "D": "D", "M": "M", "W": "W"
            }

            bybit_interval = interval_map.get(interval, interval)

            def _fetch_ohlcv():
                return self.session.get_kline(
                    category="linear",
                    symbol=symbol,
                    interval=bybit_interval,
                    limit=limit
                )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º connection manager —Å fallback
            cache_key = f"ohlcv_{symbol}_{interval}_{limit}"

            response = self.connection_manager.execute_with_fallback(
                operation=_fetch_ohlcv,
                operation_name=f"get_ohlcv_{symbol}",
                cache_key=cache_key
            )

            if response and response.get('retCode') == 0:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
                data = response['result']['list']
                df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover'])

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                for col in ['open', 'high', 'low', 'close', 'volume', 'turnover']:
                    df[col] = pd.to_numeric(df[col], errors='coerce')

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º FutureWarning)
                df['timestamp'] = pd.to_datetime(df['timestamp'].astype(float), unit='ms')

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                df = df.sort_values('timestamp').reset_index(drop=True)

                self.logger.info(f"‚úÖ OHLCV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {symbol} {interval} ({len(df)} —Å–≤–µ—á–µ–π)")
                return df
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV: {response}")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV: {e}")
            return None
    
    def cancel_all_orders(self, symbol: str) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç API
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("cancel_all_orders"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for cancel_all_orders"}
            response = self._call_api(
                "cancel_all_orders",
                lambda: self.session.cancel_all_orders(
                    category="linear",
                    symbol=symbol
                )
            )
            
            self.logger.safe_log_api_response(
                response,
                f"–í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã: {symbol}",
                "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤"
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_open_orders(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ –æ—Ä–¥–µ—Ä–∞)
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("get_open_orders"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for get_open_orders"}
            params = {
                "category": "linear",
                "accountType": "UNIFIED"
            }
            
            if symbol:
                params["symbol"] = symbol
            
            response = self._call_api(
                "get_open_orders",
                lambda: self.session.get_open_orders(**params),
                cache_key=f"open_orders_{symbol or 'ALL'}"
            )
            
            self.logger.safe_log_api_response(
                response,
                "–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_server_time(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ (v5 API)
        
        Returns:
            –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            response = self._call_api(
                "get_server_time",
                lambda: self.session.get_server_time(),
                cache_key="server_time"
            )
            return response
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_instruments_info(self, category: str = "linear", symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö (v5 API)
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (linear, inverse, spot, option)
            symbol: –¢–∏–∫–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        """
        try:
            # üõ°Ô∏è RATE LIMITING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ API –≤—ã–∑–æ–≤–æ–º
            if not self.rate_limiter.can_make_request("get_instruments_info"):
                return {"retCode": -1001, "retMsg": "Rate limit exceeded for get_instruments_info"}
            params = {"category": category}
            if symbol:
                params["symbol"] = symbol
                
            response = self._call_api(
                "get_instruments_info",
                lambda: self.session.get_instruments_info(**params),
                cache_key=f"instruments_{category}_{symbol or 'ALL'}"
            )
            
            if response and response.get('retCode') == 0:
                self.logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –ø–æ–ª—É—á–µ–Ω–∞: {len(response['result']['list'])} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return response
            else:
                error_msg = response.get('retMsg', 'Unknown error') if response else 'No response from API'
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö: {error_msg}")
                return response or {"retCode": -1, "retMsg": "No response"}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def log_trade(self, symbol: str, side: str, qty: float, entry_price: float, 
                  exit_price: float, pnl: float, stop_loss: Optional[float] = None, 
                  take_profit: Optional[float] = None, strategy: str = "", 
                  comment: str = "") -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ CSV —Ñ–∞–π–ª
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            side: –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            pnl: –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
            log_dir = "data/logs"
            os.makedirs(log_dir, exist_ok=True)
            
            # –§–∞–π–ª –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫
            journal_file = "data/trade_journal.csv"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            file_exists = os.path.exists(journal_file)
            
            with open(journal_file, 'a', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
                if not file_exists:
                    writer.writerow([
                        'timestamp', 'symbol', 'side', 'qty', 'entry_price', 'exit_price',
                        'pnl', 'stop_loss', 'take_profit', 'strategy', 'comment'
                    ])
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                writer.writerow([
                    datetime.now(timezone.utc).isoformat(),
                    symbol, side, qty, entry_price, exit_price,
                    pnl, stop_loss, take_profit, strategy, comment
                ])
            
            self.logger.info(f"üìù –°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª: {symbol} {side} {qty}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª: {e}")
    
    def log_strategy_signal(self, strategy: str, symbol: str, signal: str, 
                           market_data: Dict[str, Any], indicators: Dict[str, Any], 
                           comment: str = "") -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            log_dir = "data/logs/strategies"
            os.makedirs(log_dir, exist_ok=True)
            
            # –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_log_file = f"{log_dir}/{strategy.lower().replace(' ', '_')}.log"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
            message = f"{timestamp} - {strategy} - INFO - üìä –°–∏–≥–Ω–∞–ª: {signal} –ø–æ —Ü–µ–Ω–µ {market_data.get('close', 'N/A')}"
            
            if comment:
                message += f" - {comment}"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            with open(strategy_log_file, 'a', encoding='utf-8') as f:
                f.write(message + "\n")
            
            self.logger.info(f"üìù –°–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω: {strategy} {signal}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")


class TradingBotV5(BybitAPIV5):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TradingBot —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bybit API v5
    """
    
    def __init__(self, symbol: str = "BTCUSDT", api_key: str = None, 
                 api_secret: str = None, uid: str = None, testnet: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v5
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            api_key: API –∫–ª—é—á
            api_secret: API —Å–µ–∫—Ä–µ—Ç
            uid: UID –∞–∫–∫–∞—É–Ω—Ç–∞
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        super().__init__(api_key, api_secret, testnet)
        
        self.symbol = symbol
        self.uid = uid
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
        self.position_size = 0.0
        self.entry_price = 0.0
        self.position_side = None
        
        self.logger.info(f"ü§ñ TradingBot v5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}")
    
    def update_position_info(self) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            positions = self.get_positions(self.symbol)
            
            if positions and positions.get('retCode') == 0:
                position_list = positions['result']['list']
                
                if position_list:
                    pos = position_list[0]
                    self.position_size = float(pos.get('size', 0))
                    self.entry_price = float(pos.get('avgPrice', 0))
                    self.position_side = pos.get('side')
                    
                    self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: size={self.position_size}, entry={self.entry_price}, side={self.position_side}")
                else:
                    self.position_size = 0.0
                    self.entry_price = 0.0
                    self.position_side = None
                    self.logger.info("üìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def execute_strategy(self, risk_percent: float = 0.01) -> None:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø—Ä–∏–º–µ—Ä)
        
        Args:
            risk_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_data = self.get_wallet_balance_v5()
            
            if not balance_data or balance_data.get('retCode') != 0:
                self.logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                return
            
            available_balance = float(balance_data['result']['list'][0]['totalAvailableBalance'])
            qty = available_balance * risk_percent
            
            self.logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${available_balance:.2f}, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${qty:.2f}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API
def create_bybit_api_v5(api_key: str = None, api_secret: str = None, 
                        testnet: bool = False) -> BybitAPIV5:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Bybit API v5
    
    Args:
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä BybitAPIV5
    """
    return BybitAPIV5(api_key, api_secret, testnet)


def create_trading_bot_v5(symbol: str = "BTCUSDT", api_key: str = None, 
                          api_secret: str = None, uid: str = None, 
                          testnet: bool = False) -> TradingBotV5:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v5
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        uid: UID –∞–∫–∫–∞—É–Ω—Ç–∞
        testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä TradingBotV5
    """
    return TradingBotV5(symbol, api_key, api_secret, uid, testnet) 
