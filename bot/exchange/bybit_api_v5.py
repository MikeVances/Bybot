# bot/exchange/bybit_api_v5.py
"""
–ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit API v5 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pybit
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit
"""

import os
import logging
import pandas as pd
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any, Union
import csv

from pybit.unified_trading import HTTP
from config import BYBIT_API_KEY, BYBIT_API_SECRET, BYBIT_API_URL


class BybitAPIV5:
    """
    –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit API v5 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pybit
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Bybit
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API
    - –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π v5
    """
    
    def __init__(self, api_key: str = None, api_secret: str = None, testnet: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit API v5
        
        Args:
            api_key: API –∫–ª—é—á (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ config)
            api_secret: API —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ config)
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∑ config
        self.api_key = api_key or BYBIT_API_KEY
        self.api_secret = api_secret or BYBIT_API_SECRET
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç testnet
        if testnet:
            self.base_url = "https://api-testnet.bybit.com"
        else:
            self.base_url = BYBIT_API_URL or "https://api.bybit.com"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
        self.session = HTTP(
            api_key=self.api_key,
            api_secret=self.api_secret,
            testnet=testnet
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_dir = 'data/logs'
        os.makedirs(log_dir, exist_ok=True)
        self.logger = logging.getLogger('bybit_api_v5')
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler(os.path.join(log_dir, 'bybit_api_v5.log'))
        handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        if not self.logger.hasHandlers():
            self.logger.addHandler(handler)
        
        self.logger.info(f"üöÄ Bybit API v5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (testnet: {testnet})")
    
    def get_wallet_balance_v5(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ (v5 API)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ
        """
        try:
            response = self.session.get_wallet_balance(accountType="UNIFIED")
            self.logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return response
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def format_balance_v5(self, balance_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            balance_data: –î–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç API
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
        """
        if not balance_data or balance_data.get('retCode') != 0:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
        
        try:
            result = balance_data['result']['list'][0]
            coins = "\n".join(
                f"{coin['coin']}: {coin['walletBalance']} (${coin['usdValue']})"
                for coin in result['coin']
            )
            return f"""–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${result['totalEquity']}
–î–æ—Å—Ç—É–ø–Ω–æ: ${result['totalAvailableBalance']}
–ú–æ–Ω–µ—Ç—ã:
{coins}"""
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
    
    def create_order(self, symbol: str, side: str, order_type: str, qty: float, 
                    price: Optional[float] = None, stop_loss: Optional[float] = None, 
                    take_profit: Optional[float] = None, reduce_only: bool = False, 
                    position_idx: Optional[int] = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            side: –°—Ç–æ—Ä–æ–Ω–∞ (Buy/Sell)
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market/Limit)
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            stop_loss: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            reduce_only: –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            position_idx: –ò–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏
            
        Returns:
            –û—Ç–≤–µ—Ç API
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {
                "category": "linear",
                "symbol": symbol,
                "side": side,
                "orderType": order_type,
                "qty": str(qty),
                "accountType": "UNIFIED"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            if order_type == "Limit" and price:
                params["price"] = str(price)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø—ã
            if stop_loss:
                params["stopLoss"] = str(stop_loss)
            if take_profit:
                params["takeProfit"] = str(take_profit)
            
            # –î–æ–±–∞–≤–ª—è–µ–º reduce_only
            if reduce_only:
                params["reduceOnly"] = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º position_idx
            if position_idx is not None:
                params["positionIdx"] = position_idx
            
            self.logger.info(f"üéØ –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {symbol} {side} {order_type} {qty}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            response = self.session.place_order(**params)
            
            if response.get('retCode') == 0:
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {response['result']}")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def set_trading_stop(self, symbol: str, stop_loss: Optional[float] = None, 
                         take_profit: Optional[float] = None, 
                         sl_trigger_by: str = "MarkPrice", 
                         tp_trigger_by: str = "MarkPrice") -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            stop_loss: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            sl_trigger_by: –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è SL
            tp_trigger_by: –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è TP
            
        Returns:
            –û—Ç–≤–µ—Ç API
        """
        try:
            params = {
                "category": "linear",
                "symbol": symbol,
                "accountType": "UNIFIED"
            }
            
            if stop_loss:
                params["stopLoss"] = str(stop_loss)
                params["slTriggerBy"] = sl_trigger_by
                self.logger.info(f"üõë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL: {stop_loss}")
            
            if take_profit:
                params["takeProfit"] = str(take_profit)
                params["tpTriggerBy"] = tp_trigger_by
                self.logger.info(f"üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP: {take_profit}")
            
            response = self.session.set_trading_stop(**params)
            
            if response.get('retCode') == 0:
                self.logger.info("‚úÖ –°—Ç–æ–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_positions(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏)
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        """
        try:
            params = {
                "category": "linear",
                "accountType": "UNIFIED"
            }
            
            if symbol:
                params["symbol"] = symbol
            
            response = self.session.get_positions(**params)
            
            if response.get('retCode') == 0:
                self.logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_ohlcv(self, symbol: str = "BTCUSDT", interval: str = "1", limit: int = 100) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1, 3, 5, 15, 30, 60, 120, 240, 360, 720, D, M, W)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç Bybit
            interval_map = {
                "1": "1", "3": "3", "5": "5", "15": "15", "30": "30",
                "60": "60", "120": "120", "240": "240", "360": "360", "720": "720",
                "D": "D", "M": "M", "W": "W"
            }
            
            bybit_interval = interval_map.get(interval, interval)
            
            response = self.session.get_kline(
                category="linear",
                symbol=symbol,
                interval=bybit_interval,
                limit=limit
            )
            
            if response.get('retCode') == 0:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
                data = response['result']['list']
                df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover'])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                for col in ['open', 'high', 'low', 'close', 'volume', 'turnover']:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                df = df.sort_values('timestamp').reset_index(drop=True)
                
                self.logger.info(f"‚úÖ OHLCV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {symbol} {interval} ({len(df)} —Å–≤–µ—á–µ–π)")
                return df
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV: {response}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV: {e}")
            return None
    
    def cancel_all_orders(self, symbol: str) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç API
        """
        try:
            response = self.session.cancel_all_orders(
                category="linear",
                symbol=symbol
            )
            
            if response.get('retCode') == 0:
                self.logger.info(f"‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã: {symbol}")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_open_orders(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (v5 API)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤—Å–µ –æ—Ä–¥–µ—Ä–∞)
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        """
        try:
            params = {
                "category": "linear",
                "accountType": "UNIFIED"
            }
            
            if symbol:
                params["symbol"] = symbol
            
            response = self.session.get_open_orders(**params)
            
            if response.get('retCode') == 0:
                self.logger.info("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_server_time(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ (v5 API)
        
        Returns:
            –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            response = self.session.get_server_time()
            return response
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def get_instruments_info(self, category: str = "linear", symbol: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö (v5 API)
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (linear, inverse, spot, option)
            symbol: –¢–∏–∫–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        """
        try:
            params = {"category": category}
            if symbol:
                params["symbol"] = symbol
                
            response = self.session.get_instruments_info(**params)
            
            if response and response.get('retCode') == 0:
                self.logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –ø–æ–ª—É—á–µ–Ω–∞: {len(response['result']['list'])} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return response
            else:
                error_msg = response.get('retMsg', 'Unknown error') if response else 'No response from API'
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö: {error_msg}")
                return response or {"retCode": -1, "retMsg": "No response"}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö: {e}")
            return {"retCode": -1, "retMsg": str(e)}
    
    def log_trade(self, symbol: str, side: str, qty: float, entry_price: float, 
                  exit_price: float, pnl: float, stop_loss: Optional[float] = None, 
                  take_profit: Optional[float] = None, strategy: str = "", 
                  comment: str = "") -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ CSV —Ñ–∞–π–ª
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            side: –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            pnl: –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
            log_dir = "data/logs"
            os.makedirs(log_dir, exist_ok=True)
            
            # –§–∞–π–ª –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫
            journal_file = "data/trade_journal.csv"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            file_exists = os.path.exists(journal_file)
            
            with open(journal_file, 'a', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
                if not file_exists:
                    writer.writerow([
                        'timestamp', 'symbol', 'side', 'qty', 'entry_price', 'exit_price',
                        'pnl', 'stop_loss', 'take_profit', 'strategy', 'comment'
                    ])
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                writer.writerow([
                    datetime.now(timezone.utc).isoformat(),
                    symbol, side, qty, entry_price, exit_price,
                    pnl, stop_loss, take_profit, strategy, comment
                ])
            
            self.logger.info(f"üìù –°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª: {symbol} {side} {qty}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª: {e}")
    
    def log_strategy_signal(self, strategy: str, symbol: str, signal: str, 
                           market_data: Dict[str, Any], indicators: Dict[str, Any], 
                           comment: str = "") -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            signal: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            log_dir = "data/logs/strategies"
            os.makedirs(log_dir, exist_ok=True)
            
            # –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_log_file = f"{log_dir}/{strategy.lower().replace(' ', '_')}.log"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
            message = f"{timestamp} - {strategy} - INFO - üìä –°–∏–≥–Ω–∞–ª: {signal} –ø–æ —Ü–µ–Ω–µ {market_data.get('close', 'N/A')}"
            
            if comment:
                message += f" - {comment}"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            with open(strategy_log_file, 'a', encoding='utf-8') as f:
                f.write(message + "\n")
            
            self.logger.info(f"üìù –°–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω: {strategy} {signal}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")


class TradingBotV5(BybitAPIV5):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TradingBot —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bybit API v5
    """
    
    def __init__(self, symbol: str = "BTCUSDT", api_key: str = None, 
                 api_secret: str = None, uid: str = None, testnet: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v5
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            api_key: API –∫–ª—é—á
            api_secret: API —Å–µ–∫—Ä–µ—Ç
            uid: UID –∞–∫–∫–∞—É–Ω—Ç–∞
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        super().__init__(api_key, api_secret, testnet)
        
        self.symbol = symbol
        self.uid = uid
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
        self.position_size = 0.0
        self.entry_price = 0.0
        self.position_side = None
        
        self.logger.info(f"ü§ñ TradingBot v5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}")
    
    def update_position_info(self) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            positions = self.get_positions(self.symbol)
            
            if positions and positions.get('retCode') == 0:
                position_list = positions['result']['list']
                
                if position_list:
                    pos = position_list[0]
                    self.position_size = float(pos.get('size', 0))
                    self.entry_price = float(pos.get('avgPrice', 0))
                    self.position_side = pos.get('side')
                    
                    self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: size={self.position_size}, entry={self.entry_price}, side={self.position_side}")
                else:
                    self.position_size = 0.0
                    self.entry_price = 0.0
                    self.position_side = None
                    self.logger.info("üìä –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def execute_strategy(self, risk_percent: float = 0.01) -> None:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø—Ä–∏–º–µ—Ä)
        
        Args:
            risk_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_data = self.get_wallet_balance_v5()
            
            if not balance_data or balance_data.get('retCode') != 0:
                self.logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                return
            
            available_balance = float(balance_data['result']['list'][0]['totalAvailableBalance'])
            qty = available_balance * risk_percent
            
            self.logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${available_balance:.2f}, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${qty:.2f}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API
def create_bybit_api_v5(api_key: str = None, api_secret: str = None, 
                        testnet: bool = False) -> BybitAPIV5:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Bybit API v5
    
    Args:
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä BybitAPIV5
    """
    return BybitAPIV5(api_key, api_secret, testnet)


def create_trading_bot_v5(symbol: str = "BTCUSDT", api_key: str = None, 
                          api_secret: str = None, uid: str = None, 
                          testnet: bool = False) -> TradingBotV5:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v5
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        uid: UID –∞–∫–∫–∞—É–Ω—Ç–∞
        testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä TradingBotV5
    """
    return TradingBotV5(symbol, api_key, api_secret, uid, testnet) 