# bot/exchange/api_adapter.py
"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Bybit API v5
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π
"""

import logging
from typing import Dict, List, Optional, Any, Union
from datetime import datetime, timezone

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ v5 API - –Ω–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
from .bybit_api_v5 import BybitAPIV5, TradingBotV5


class APIAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Bybit API v5
    """
    
    def __init__(self, api_key: str = None, api_secret: str = None, testnet: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á
            api_secret: API —Å–µ–∫—Ä–µ—Ç
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        self.testnet = testnet
        
        # –°–æ–∑–¥–∞–µ–º API v5
        self.api = BybitAPIV5(api_key, api_secret, testnet)
        self.logger = logging.getLogger('api_adapter_v5')
        
        self.logger.info(f"üîß API Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (v5, testnet: {testnet})")
    
    def get_wallet_balance_v5(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        return self.api.get_wallet_balance_v5()
    
    def format_balance_v5(self, balance_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        return self.api.format_balance_v5(balance_data)
    
    def create_order(self, symbol: str, side: str, order_type: str, qty: float, 
                    price: Optional[float] = None, stop_loss: Optional[float] = None, 
                    take_profit: Optional[float] = None, reduce_only: bool = False, 
                    position_idx: Optional[int] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        return self.api.create_order(symbol, side, order_type, qty, price, 
                                   stop_loss, take_profit, reduce_only, position_idx)
    
    def set_trading_stop(self, symbol: str, stop_loss: Optional[float] = None, 
                         take_profit: Optional[float] = None, 
                         sl_trigger_by: str = "MarkPrice", 
                         tp_trigger_by: str = "MarkPrice") -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø–æ–≤"""
        return self.api.set_trading_stop(symbol, stop_loss, take_profit, 
                                       sl_trigger_by, tp_trigger_by)
    
    def get_positions(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        return self.api.get_positions(symbol)
    
    def get_ohlcv(self, symbol: str = "BTCUSDT", interval: str = "1", limit: int = 100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
        return self.api.get_ohlcv(symbol, interval, limit)
    
    def cancel_all_orders(self, symbol: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        return self.api.cancel_all_orders(symbol)
    
    def get_open_orders(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        return self.api.get_open_orders(symbol)
    
    def get_server_time(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        return self.api.get_server_time()
    
    def log_trade(self, symbol: str, side: str, qty: float, entry_price: float, 
                  exit_price: float, pnl: float, stop_loss: Optional[float] = None, 
                  take_profit: Optional[float] = None, strategy: str = "", 
                  comment: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        return self.api.log_trade(symbol, side, qty, entry_price, exit_price, 
                                pnl, stop_loss, take_profit, strategy, comment)
    
    def log_strategy_signal(self, strategy: str, symbol: str, signal: str, 
                           market_data: Dict[str, Any], indicators: Dict[str, Any], 
                           comment: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.api.log_strategy_signal(strategy, symbol, signal, 
                                         market_data, indicators, comment)


class TradingBotAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è TradingBot v5
    """
    
    def __init__(self, symbol: str = "BTCUSDT", api_key: str = None, 
                 api_secret: str = None, uid: str = None, testnet: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            api_key: API –∫–ª—é—á
            api_secret: API —Å–µ–∫—Ä–µ—Ç
            uid: UID –∞–∫–∫–∞—É–Ω—Ç–∞
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        """
        self.symbol = symbol
        self.uid = uid
        
        self.bot = TradingBotV5(symbol, api_key, api_secret, uid, testnet)
        self.logger = logging.getLogger('trading_bot_adapter')
        
        self.logger.info(f"ü§ñ TradingBot Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (symbol: {symbol})")
    
    def update_position_info(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.bot.update_position_info()
    
    def execute_strategy(self, risk_percent: float = 0.01) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.bot.execute_strategy(risk_percent)
    
    def get_ohlcv(self, interval: str = "1", limit: int = 100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
        return self.bot.get_ohlcv(self.symbol, interval, limit)

    def get_wallet_balance_v5(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        return self.bot.get_wallet_balance_v5()

    def format_balance_v5(self, balance_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        return self.bot.format_balance_v5(balance_data)

    def get_positions(self, symbol: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        return self.bot.get_positions(symbol or self.symbol)

    def log_strategy_signal(self, strategy: str, symbol: str, signal: str,
                           market_data: Dict[str, Any], indicators: Dict[str, Any],
                           comment: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.bot.log_strategy_signal(strategy, symbol, signal,
                                         market_data, indicators, comment)


# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
def create_api_adapter(api_key: str = None, api_secret: str = None, 
                      testnet: bool = False) -> APIAdapter:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ API
    
    Args:
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä APIAdapter
    """
    return APIAdapter(api_key, api_secret, testnet)


def create_trading_bot_adapter(symbol: str = "BTCUSDT", api_key: str = None, 
                              api_secret: str = None, uid: str = None, 
                              testnet: bool = False) -> TradingBotAdapter:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        uid: UID –∞–∫–∫–∞—É–Ω—Ç–∞
        testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä TradingBotAdapter
    """
    return TradingBotAdapter(symbol, api_key, api_secret, uid, testnet)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API v5
def test_api_v5() -> Dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API v5
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API v5
        api = create_api_adapter(testnet=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        tests = {
            'server_time': api.get_server_time(),
            'balance': api.get_wallet_balance_v5(),
            'positions': api.get_positions(),
            'ohlcv': api.get_ohlcv("BTCUSDT", "1", 10)
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {}
        for test_name, result in tests.items():
            if test_name == 'ohlcv':
                # –î–ª—è OHLCV –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ DataFrame
                if result is not None and hasattr(result, 'shape') and result.shape[0] > 0:
                    results[test_name] = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                else:
                    results[test_name] = "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            elif result and result.get('retCode') == 0:
                results[test_name] = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
            else:
                results[test_name] = f"‚ùå –û—à–∏–±–∫–∞: {result.get('retMsg', 'Unknown') if result else 'No response'}"
        
        return {
            'api_status': 'working',
            'api_version': 'v5',
            'test_results': results,
            'recommendation': 'API v5 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
        }
        
    except Exception as e:
        return {
            'api_status': 'failed',
            'api_version': 'v5',
            'error': str(e),
            'recommendation': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É pybit –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API'
        }


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    result = test_api_v5()
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", result)