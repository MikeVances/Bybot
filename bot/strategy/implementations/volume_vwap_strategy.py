# bot/strategy/implementations/volume_vwap_strategy.py
"""
VolumeSpike VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Strategy01
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Any
import logging

from ..base import (
    BaseStrategy,
    VolumeVWAPConfig, 
    MarketRegime,
    SignalType,
    ConfluenceFactor,
    PositionSide
)
from ..utils.indicators import TechnicalIndicators
from ..utils.validators import DataValidator
from ..utils.market_analysis import MarketRegimeAnalyzer


class VolumeVWAPStrategy(BaseStrategy):
    """
    VolumeSpike VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v2.0
    
    –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
    - –ü–æ–∏—Å–∫ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞ (volume spike)
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VWAP
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–º
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ SL/TP —É—Ä–æ–≤–Ω–∏
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ confluence —Ñ–∞–∫—Ç–æ—Ä—ã
    
    –£–ª—É—á—à–µ–Ω–∏—è –≤ v2.0:
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    """
    
    def __init__(self, config: VolumeVWAPConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VolumeSpike VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–∏–ø–∞ VolumeVWAPConfig
        """
        super().__init__(config, "VolumeVWAP_v2")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config: VolumeVWAPConfig = config
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.config.min_risk_reward_ratio = 0.8  # –°–Ω–∏–∂–∞–µ–º –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (–±—ã–ª–æ 1.0)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.config.adaptive_parameters = True  # –û—Å—Ç–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.config.market_regime_adaptation = True
        
        # –ö—ç—à –¥–ª—è VWAP —Ä–∞—Å—á–µ—Ç–æ–≤
        self._vwap_cache = {}
        
        self.logger.info(f"üéØ VolumeSpike VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: volume_mult={config.volume_multiplier}, trend_period={config.trend_period}")
        self.logger.info(f"üìä R:R –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: risk_reward_ratio={config.risk_reward_ratio}, min_risk_reward_ratio={self.config.min_risk_reward_ratio}")
    
    def calculate_strategy_indicators(self, market_data) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (DataFrame –∏–ª–∏ Dict)
        
        Returns:
            Dict —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
            df = self.get_primary_dataframe(market_data)
            if df is None:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return {}
            
            indicators = {}
            
            # 1. –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞)
            base_indicators = self.calculate_base_indicators(df)
            indicators.update(base_indicators)
            
            # 2. –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if 'volume' in df.columns:
                # Volume SMA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–ø–ª–µ—Å–∫–æ–≤
                vol_sma_period = self.config.volume_sma_period
                indicators['vol_sma'] = df['volume'].rolling(vol_sma_period, min_periods=1).mean()
                indicators['volume_ratio'] = df['volume'] / indicators['vol_sma']
                indicators['volume_spike'] = indicators['volume_ratio'] > self.config.volume_multiplier
                
                # Volume trend –∞–Ω–∞–ª–∏–∑
                vol_trend_window = self.config.volume_trend_window
                indicators['volume_trend'] = df['volume'].rolling(vol_trend_window).mean().diff()
                indicators['volume_increasing'] = indicators['volume_trend'] > 0
                
                # Volume consistency (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∏—Ö –æ–±—ä–µ–º–æ–≤)
                high_volume_bars = (indicators['volume_ratio'] > self.config.volume_multiplier).rolling(
                    self.config.min_volume_consistency
                ).sum()
                indicators['volume_consistent'] = high_volume_bars >= self.config.min_volume_consistency
                
            else:
                self.logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–º–µ - –æ–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                indicators.update({
                    'vol_sma': pd.Series([1000] * len(df), index=df.index),
                    'volume_ratio': pd.Series([1.0] * len(df), index=df.index),
                    'volume_spike': pd.Series([False] * len(df), index=df.index),
                    'volume_increasing': pd.Series([False] * len(df), index=df.index),
                    'volume_consistent': pd.Series([False] * len(df), index=df.index)
                })
            
            # 3. VWAP —Ä–∞—Å—á–µ—Ç—ã
            vwap_result = TechnicalIndicators.calculate_vwap(df, self.config.vwap_period)
            if vwap_result.is_valid:
                indicators['vwap'] = vwap_result.value
                
                # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç VWAP
                indicators['vwap_deviation'] = abs(df['close'] - indicators['vwap']) / df['close']
                indicators['vwap_significant_deviation'] = indicators['vwap_deviation'] > self.config.vwap_deviation_threshold
                
                # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VWAP
                indicators['price_above_vwap'] = df['close'] > indicators['vwap']
                indicators['price_below_vwap'] = df['close'] < indicators['vwap']
                
                # VWAP confirmation (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ä–æ–≤ –ø–æ–¥—Ä—è–¥)
                confirmation_bars = self.config.vwap_confirmation_bars
                indicators['vwap_bullish_confirmed'] = indicators['price_above_vwap'].rolling(confirmation_bars).sum() >= confirmation_bars
                indicators['vwap_bearish_confirmed'] = indicators['price_below_vwap'].rolling(confirmation_bars).sum() >= confirmation_bars
                
            else:
                self.logger.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ VWAP")
                return {}
            
            # 4. –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            trend_period = self.config.trend_period
            indicators['sma_trend'] = df['close'].rolling(trend_period, min_periods=1).mean()
            
            # –ù–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞
            slope_period = max(trend_period // 4, 5)
            indicators['trend_slope'] = indicators['sma_trend'].diff(slope_period)
            indicators['trend_slope_normalized'] = indicators['trend_slope'] / df['close']
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            indicators['trend_bullish'] = indicators['trend_slope_normalized'] > self.config.min_trend_slope
            indicators['trend_bearish'] = indicators['trend_slope_normalized'] < -self.config.min_trend_slope
            indicators['trend_sideways'] = (~indicators['trend_bullish']) & (~indicators['trend_bearish'])
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º)
            if len(df) >= trend_period:
                price_series = indicators['sma_trend'].tail(trend_period)
                time_series = np.arange(len(price_series))
                correlation = np.corrcoef(time_series, price_series)[0, 1] if len(price_series) > 1 else 0
                indicators['trend_strength'] = abs(correlation) if not np.isnan(correlation) else 0
            else:
                indicators['trend_strength'] = 0
            
            # 5. –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            momentum_period = self.config.price_momentum_period
            indicators['price_momentum'] = df['close'].pct_change(momentum_period)
            indicators['momentum_bullish'] = indicators['price_momentum'] > 0
            indicators['momentum_bearish'] = indicators['price_momentum'] < 0
            
            # Volume momentum
            if 'volume' in df.columns:
                vol_momentum_period = self.config.volume_momentum_period
                indicators['volume_momentum'] = df['volume'].pct_change(vol_momentum_period)
                indicators['volume_momentum_positive'] = indicators['volume_momentum'] > 0
            else:
                indicators['volume_momentum'] = pd.Series([0] * len(df), index=df.index)
                indicators['volume_momentum_positive'] = pd.Series([False] * len(df), index=df.index)
            
            # 6. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            # Bullish setup (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞)
            indicators['bullish_setup'] = (
                indicators['volume_spike'] & 
                indicators['price_above_vwap'] & 
                (indicators['trend_bullish'] | indicators['momentum_bullish'])  # –î–æ–±–∞–≤–ª–µ–Ω momentum
            )
            
            # Bearish setup (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞)
            indicators['bearish_setup'] = (
                indicators['volume_spike'] & 
                indicators['price_below_vwap'] & 
                (indicators['trend_bearish'] | indicators['momentum_bearish'])  # –î–æ–±–∞–≤–ª–µ–Ω momentum
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∞–ø—ã –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
            indicators['range_bullish_setup'] = (
                indicators['volume_spike'] & 
                indicators['price_above_vwap'] & 
                indicators['trend_sideways'] & 
                indicators['momentum_bullish']
            )
            
            indicators['range_bearish_setup'] = (
                indicators['volume_spike'] & 
                indicators['price_below_vwap'] & 
                indicators['trend_sideways'] & 
                indicators['momentum_bearish']
            )
            
            self.logger.debug(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            return indicators
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {}
    
    def calculate_signal_strength(self, market_data, indicators: Dict, signal_type: str) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –¥–æ 3 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')

        Returns:
            –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç 0.0 –¥–æ 1.0
        """
        try:
            df = self.get_primary_dataframe(market_data)
            if df is None or not indicators:
                return 0.0

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —Ç–æ–ª—å–∫–æ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–ª—è VWAP
            strength_factors = []
            last_idx = -1

            # 1. –§–∞–∫—Ç–æ—Ä –æ–±—ä–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (0-1) - –ì–õ–ê–í–ù–´–ô
            if 'volume_ratio' in indicators:
                volume_ratio = indicators['volume_ratio'].iloc[last_idx]
                volume_factor = min(volume_ratio / self.config.volume_multiplier, 3.0) / 3.0
                strength_factors.append(volume_factor)

            # 2. –§–∞–∫—Ç–æ—Ä VWAP –ø–æ–∑–∏—Ü–∏–∏ (0-1) - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô
            if 'vwap_deviation' in indicators:
                vwap_deviation = indicators['vwap_deviation'].iloc[last_idx]
                # –ß–µ–º –±–æ–ª—å—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ VWAP
                vwap_factor = min(vwap_deviation / (self.config.vwap_deviation_threshold * 2), 1.0)
                strength_factors.append(vwap_factor)

            # 3. –§–∞–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ (0-1) - –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ò–ô
            if signal_type in ['BUY', SignalType.BUY]:
                if 'trend_bullish' in indicators and indicators['trend_bullish'].iloc[last_idx]:
                    trend_factor = 1.0
                else:
                    trend_factor = 0.3  # –°–ª–∞–±–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            else:
                if 'trend_bearish' in indicators and indicators['trend_bearish'].iloc[last_idx]:
                    trend_factor = 1.0
                else:
                    trend_factor = 0.3
            strength_factors.append(trend_factor)

            # –£–ü–†–û–©–ï–ù–ù–´–ï –í–ï–°–ê: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            weights = [0.40, 0.35, 0.25]  # –û–±—ä—ë–º –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç, VWAP –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —Ç—Ä–µ–Ω–¥ —É—Ç–æ—á–Ω—è–µ—Ç

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if len(strength_factors) != len(weights):
                weights = weights[:len(strength_factors)]
                total_weight = sum(weights)
                weights = [w/total_weight for w in weights] if total_weight > 0 else [1.0/len(strength_factors)] * len(strength_factors)

            signal_strength = sum(factor * weight for factor, weight in zip(strength_factors, weights))

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            final_strength = max(0.0, min(1.0, signal_strength))

            self.logger.debug(f"–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal_type}: {final_strength:.3f} (—Ñ–∞–∫—Ç–æ—Ä—ã: {len(strength_factors)})")
            return final_strength

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return 0.5
    
    def check_confluence_factors(self, market_data, indicators: Dict, signal_type: str) -> Tuple[int, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –£–ü–†–û–©–ï–ù–û –¥–æ 3 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞

        Returns:
            Tuple (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫_—Ñ–∞–∫—Ç–æ—Ä–æ–≤)
        """
        try:
            confluence_count = 0
            factors = []
            last_idx = -1

            if not indicators:
                return 0, []

            # –§–ê–ö–¢–û–† 1: –û–±—ä—ë–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ì–õ–ê–í–ù–´–ô)
            if indicators.get('volume_spike', pd.Series([False])).iloc[last_idx]:
                confluence_count += 1
                factors.append('volume_confirmation')

            # –§–ê–ö–¢–û–† 2: VWAP –ø–æ–∑–∏—Ü–∏—è (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)
            if signal_type in ['BUY', SignalType.BUY]:
                if indicators.get('price_above_vwap', pd.Series([False])).iloc[last_idx]:
                    confluence_count += 1
                    factors.append('vwap_position')
            else:  # SELL
                if indicators.get('price_below_vwap', pd.Series([False])).iloc[last_idx]:
                    confluence_count += 1
                    factors.append('vwap_position')

            # –§–ê–ö–¢–û–† 3: –¢—Ä–µ–Ω–¥–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ò–ô)
            if signal_type in ['BUY', SignalType.BUY]:
                if indicators.get('trend_bullish', pd.Series([False])).iloc[last_idx]:
                    confluence_count += 1
                    factors.append('trend_alignment')
            else:
                if indicators.get('trend_bearish', pd.Series([False])).iloc[last_idx]:
                    confluence_count += 1
                    factors.append('trend_alignment')
            if signal_type in ['BUY', SignalType.BUY]:
                if indicators.get('momentum_bullish', pd.Series([False])).iloc[last_idx]:
                    confluence_count += 1
                    factors.append(ConfluenceFactor.MOMENTUM_BULLISH.value)
            else:
                if indicators.get('momentum_bearish', pd.Series([False])).iloc[last_idx]:
                    confluence_count += 1
                    factors.append(ConfluenceFactor.MOMENTUM_BEARISH.value)
            
            # 8. –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç VWAP
            if indicators.get('vwap_significant_deviation', pd.Series([False])).iloc[last_idx]:
                confluence_count += 1
                factors.append(ConfluenceFactor.VWAP_DEVIATION.value)
            
            
            return confluence_count, factors
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
            return 0, []
    
    def _check_strategic_exit_conditions(self, market_data, state, current_price: float) -> Optional[Dict[str, Any]]:
        """
        –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Returns:
            Dict —Å —Å–∏–≥–Ω–∞–ª–æ–º –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ None
        """
        try:
            if not self.is_in_position(state):
                return None
            
            df = self.get_primary_dataframe(market_data)
            if df is None:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.calculate_strategy_indicators(market_data)
            if not indicators:
                return None
            
            position_info = self.get_position_info(state)
            position_side = position_info.get('side')
            
            # –û–±—Ä–∞—Ç–Ω—ã–µ VWAP —Å–∏–≥–Ω–∞–ª—ã
            if position_side in ['BUY', PositionSide.LONG]:
                # –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–Ω–≥–∞ –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ VWAP —Å –æ–±—ä–µ–º–æ–º
                price_below_vwap = indicators.get('price_below_vwap', pd.Series([False])).iloc[-1]
                volume_spike = indicators.get('volume_spike', pd.Series([False])).iloc[-1]
                trend_bearish = indicators.get('trend_bearish', pd.Series([False])).iloc[-1]
                
                if price_below_vwap and (volume_spike or trend_bearish):
                    return {
                        'signal': SignalType.EXIT_LONG,
                        'exit_reason': 'vwap_reversal',
                        'current_price': current_price,
                        'comment': '–í—ã—Ö–æ–¥: —Ü–µ–Ω–∞ –Ω–∏–∂–µ VWAP —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º'
                    }
                    
            elif position_side in ['SELL', PositionSide.SHORT]:
                # –í—ã—Ö–æ–¥ –∏–∑ —à–æ—Ä—Ç–∞ –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ VWAP —Å –æ–±—ä–µ–º–æ–º
                price_above_vwap = indicators.get('price_above_vwap', pd.Series([False])).iloc[-1]
                volume_spike = indicators.get('volume_spike', pd.Series([False])).iloc[-1]
                trend_bullish = indicators.get('trend_bullish', pd.Series([False])).iloc[-1]
                
                if price_above_vwap and (volume_spike or trend_bullish):
                    return {
                        'signal': SignalType.EXIT_SHORT,
                        'exit_reason': 'vwap_reversal',
                        'current_price': current_price,
                        'comment': '–í—ã—Ö–æ–¥: —Ü–µ–Ω–∞ –≤—ã—à–µ VWAP —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º'
                    }
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞: {e}")
            return None
    
    def execute(self, market_data, state=None, bybit_api=None, symbol='BTCUSDT') -> Optional[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è VolumeSpike VWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            bybit_api: API –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Returns:
            –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            can_execute, reason = self.pre_execution_check(market_data, state)
            if not can_execute:
                self.logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: {reason}")
                return None
            
            # 2. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
            df = self.get_primary_dataframe(market_data)
            if df is not None and len(df) > 20:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                returns = df['close'].pct_change().dropna()
                volatility = returns.tail(10).std()
                
                # –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–±–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫), —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                if volatility < 0.02:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    self.logger.info("üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞")
                    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É
                    self._original_volume_mult = self.config.volume_multiplier
                    self.config.volume_multiplier = max(1.5, self._original_volume_mult * 0.5)  # –°–Ω–∏–∂–∞–µ–º –≤ 2 —Ä–∞–∑–∞
                    self.logger.info(f"üìä Volume multiplier: {self._original_volume_mult} ‚Üí {self.config.volume_multiplier}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
            df = self.get_primary_dataframe(market_data)
            if df is None:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                return None
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_analysis = self.analyze_current_market(df)
            condition = market_analysis.get('condition')
            if condition:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                if self._execution_count % 20 == 0:
                    self.log_market_analysis(market_analysis)
            
            # 4. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = self.calculate_strategy_indicators(market_data)
            if not indicators:
                self.logger.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return None
            
            # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = df['close'].iloc[-1]
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if self.is_in_position(state):
                exit_signal = self.should_exit_position(market_data, state, current_price)
                if exit_signal:
                    self.logger.info(f"üö™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞: {exit_signal.get('signal')}")
                    return exit_signal
                
                # –ï—Å–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞
                return None
            
            # 7. –§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
            
            # –§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if self.config.volatility_filter:
                returns = df['close'].pct_change().dropna()
                current_volatility = returns.tail(10).std()
                if current_volatility > self.config.max_volatility_threshold:
                    self.logger.debug(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {current_volatility:.4f}")
                    return None
            
            # –§–∏–ª—å—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
            if 'volume' in df.columns and df['volume'].iloc[-1] < self.config.min_volume_for_signal:
                self.logger.debug(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º {df['volume'].iloc[-1]}")
                return None
            
            # 8. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
            if self._execution_count % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
                volume_ratio = indicators.get('volume_ratio', pd.Series([0])).iloc[-1]
                volume_spike = indicators.get('volume_spike', pd.Series([False])).iloc[-1]
                price_above_vwap = indicators.get('price_above_vwap', pd.Series([False])).iloc[-1]
                momentum_bullish = indicators.get('momentum_bullish', pd.Series([False])).iloc[-1]
                trend_bullish = indicators.get('trend_bullish', pd.Series([False])).iloc[-1]
                
                self.logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: vol_ratio={volume_ratio:.2f}, vol_spike={volume_spike}, "
                               f"above_vwap={price_above_vwap}, momentum_bull={momentum_bullish}, trend_bull={trend_bullish}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–µ—Ç–∞–ø—ã (–≤–∫–ª—é—á–∞—è –±–æ–∫–æ–≤—ã–µ)
            long_setup = (
                indicators.get('bullish_setup', pd.Series([False])).iloc[-1] or
                indicators.get('range_bullish_setup', pd.Series([False])).iloc[-1]
            )
            short_setup = (
                indicators.get('bearish_setup', pd.Series([False])).iloc[-1] or
                indicators.get('range_bearish_setup', pd.Series([False])).iloc[-1]
            )
            
            # 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞
            if long_setup:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º confluence —Ñ–∞–∫—Ç–æ—Ä—ã
                confluence_count, confluence_factors = self.check_confluence_factors(market_data, indicators, 'BUY')
                
                # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ confluence –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
                required_confluence = max(1, self.config.confluence_required - 1)  # –ú–∏–Ω–∏–º—É–º 1
                if confluence_count < required_confluence:
                    self.logger.debug(f"–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ confluence ({confluence_count} < {required_confluence})")
                    return None
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                signal_strength = self.calculate_signal_strength(market_data, indicators, 'BUY')
                
                if signal_strength < self.config.signal_strength_threshold:
                    self.logger.debug(f"–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∞–±–∞—è —Å–∏–ª–∞ {signal_strength:.3f}")
                    return None
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞
                entry_price = self.round_price(current_price)
                stop_loss, take_profit = self.calculate_dynamic_levels(df, entry_price, 'BUY')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                risk = entry_price - stop_loss
                reward = take_profit - entry_price
                actual_rr = reward / risk if risk > 0 else 0
                
                if actual_rr < 1.0:
                    self.logger.debug(f"–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø–ª–æ—Ö–æ–π R:R {actual_rr:.2f}")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                signal = self.create_signal(
                    signal_type='BUY',
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    indicators={
                        'volume_ratio': float(indicators['volume_ratio'].iloc[-1]) if 'volume_ratio' in indicators else 1.0,
                        'vwap': float(indicators['vwap'].iloc[-1]) if 'vwap' in indicators else entry_price,
                        'vwap_deviation': float(indicators['vwap_deviation'].iloc[-1]) if 'vwap_deviation' in indicators else 0.0,
                        'trend_strength': float(indicators['trend_strength']) if 'trend_strength' in indicators else 0.0,
                        'rsi': float(indicators['rsi'].iloc[-1]) if 'rsi' in indicators else 50.0,
                        'atr': float(indicators['atr']) if 'atr' in indicators else 0.0,
                        'volatility': float(df['close'].pct_change().tail(10).std())
                    },
                    confluence_factors=confluence_factors,
                    signal_strength=signal_strength,
                    symbol=symbol
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
                if bybit_api:
                    try:
                        bybit_api.log_strategy_signal(
                            strategy=signal['strategy'],
                            symbol=symbol,
                            signal=signal['signal'],
                            market_data=signal['indicators'],
                            indicators=signal['indicators'],
                            comment=signal['comment']
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
                
                self.log_signal_generation(signal, {'market_analysis': market_analysis})
                return signal
            
            # 10. –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–∞
            elif short_setup:
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —à–æ—Ä—Ç–∞
                confluence_count, confluence_factors = self.check_confluence_factors(market_data, indicators, 'SELL')
                
                # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ confluence –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
                required_confluence = max(1, self.config.confluence_required - 1)  # –ú–∏–Ω–∏–º—É–º 1
                if confluence_count < required_confluence:
                    self.logger.debug(f"–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ confluence ({confluence_count} < {required_confluence})")
                    return None
                
                signal_strength = self.calculate_signal_strength(market_data, indicators, 'SELL')
                
                if signal_strength < self.config.signal_strength_threshold:
                    self.logger.debug(f"–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∞–±–∞—è —Å–∏–ª–∞ {signal_strength:.3f}")
                    return None
                
                entry_price = self.round_price(current_price)
                stop_loss, take_profit = self.calculate_dynamic_levels(df, entry_price, 'SELL')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º R:R
                risk = stop_loss - entry_price
                reward = entry_price - take_profit
                actual_rr = reward / risk if risk > 0 else 0
                
                if actual_rr < 1.0:
                    self.logger.debug(f"–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø–ª–æ—Ö–æ–π R:R {actual_rr:.2f}")
                    return None
                
                signal = self.create_signal(
                    signal_type='SELL',
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    indicators={
                        'volume_ratio': float(indicators['volume_ratio'].iloc[-1]) if 'volume_ratio' in indicators else 1.0,
                        'vwap': float(indicators['vwap'].iloc[-1]) if 'vwap' in indicators else entry_price,
                        'vwap_deviation': float(indicators['vwap_deviation'].iloc[-1]) if 'vwap_deviation' in indicators else 0.0,
                        'trend_strength': float(indicators['trend_strength']) if 'trend_strength' in indicators else 0.0,
                        'rsi': float(indicators['rsi'].iloc[-1]) if 'rsi' in indicators else 50.0,
                        'atr': float(indicators['atr']) if 'atr' in indicators else 0.0,
                        'volatility': float(df['close'].pct_change().tail(10).std())
                    },
                    confluence_factors=confluence_factors,
                    signal_strength=signal_strength,
                    symbol=symbol
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if bybit_api:
                    try:
                        bybit_api.log_strategy_signal(
                            strategy=signal['strategy'],
                            symbol=symbol,
                            signal=signal['signal'],
                            market_data=signal['indicators'],
                            indicators=signal['indicators'],
                            comment=signal['comment']
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
                
                self.log_signal_generation(signal, {'market_analysis': market_analysis})
                return signal
            
            # 11. –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            return None
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", exc_info=True)
            return None
        
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, '_original_volume_mult'):
                self.config.volume_multiplier = self._original_volume_mult
                delattr(self, '_original_volume_mult')
            
            # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞
            signal_result = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            self.post_execution_tasks(signal_result, market_data, state)


# =========================================================================
# –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –£–¢–ò–õ–ò–¢–´
# =========================================================================

def create_volume_vwap_strategy(config: Optional[VolumeVWAPConfig] = None, **kwargs) -> VolumeVWAPStrategy:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä VolumeVWAPStrategy
    """
    if config is None:
        config = VolumeVWAPConfig()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if kwargs:
        config_dict = config.to_dict()
        config_dict.update(kwargs)
        config = VolumeVWAPConfig.from_dict(config_dict)
    
    return VolumeVWAPStrategy(config)


def create_conservative_volume_vwap() -> VolumeVWAPStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    from ..base.config import get_conservative_vwap_config
    config = get_conservative_vwap_config()
    return VolumeVWAPStrategy(config)


def create_aggressive_volume_vwap() -> VolumeVWAPStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = VolumeVWAPConfig(
        volume_multiplier=2.0,  # –ú–µ–Ω—å—à–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±—ä–µ–º–∞
        signal_strength_threshold=0.5,  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
        risk_reward_ratio=2.0,  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π R:R
        confluence_required=1,  # –ú–µ–Ω—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        max_risk_per_trade_pct=1.5  # –ë–æ–ª—å—à–∏–π —Ä–∏—Å–∫
    )
    return VolumeVWAPStrategy(config)


# =========================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ú–ï–¢–ê–î–ê–ù–ù–´–ï
# =========================================================================

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
STRATEGY_INFO = {
    'name': 'VolumeSpike_VWAP',
    'version': '2.0.0',
    'description': '–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞ –∏ VWAP –∞–Ω–∞–ª–∏–∑–∞',
    'author': 'TradingBot Team',
    'category': 'Volume Analysis',
    'timeframes': ['1m', '5m', '15m'],
    'min_data_points': 100,
    'supported_assets': ['crypto', 'forex', 'stocks']
}

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
MARKET_PRESETS = {
    'crypto_volatile': {
        'volume_multiplier': 4.0,
        'max_volatility_threshold': 0.08,
        'signal_strength_threshold': 0.7
    },
    'crypto_stable': {
        'volume_multiplier': 2.5,
        'max_volatility_threshold': 0.04,
        'signal_strength_threshold': 0.6
    },
    'forex': {
        'volume_multiplier': 1.8,
        'max_volatility_threshold': 0.02,
        'signal_strength_threshold': 0.65
    }
}