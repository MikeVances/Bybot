# bot/strategy/implementations/cumdelta_sr_strategy.py
"""
CumDelta Support/Resistance —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Strategy02
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞

–¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
- –ê–Ω–∞–ª–∏–∑ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–µ–ª—å—Ç—ã (Cumulative Delta)
- –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ confluence —Ñ–∞–∫—Ç–æ—Ä–∞–º
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ SL/TP —É—Ä–æ–≤–Ω–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Any
import logging

from ..base import (
    BaseStrategy,
    CumDeltaConfig, 
    MarketRegime,
    SignalType,
    ConfluenceFactor,
    PositionSide
)
from ..utils.indicators import TechnicalIndicators
from ..utils.validators import DataValidator
from ..utils.market_analysis import MarketRegimeAnalyzer
from ..utils.levels import LevelsFinder


class CumDeltaSRStrategy(BaseStrategy):
    """
    CumDelta Support/Resistance —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v2.0
    
    –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
    - –ê–Ω–∞–ª–∏–∑ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–µ–ª—å—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–¥–∞–≤—Ü–æ–≤
    - –ü–æ–∏—Å–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º confluence —Ñ–∞–∫—Ç–æ—Ä–∞–º
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    
    –£–ª—É—á—à–µ–Ω–∏—è –≤ v2.0:
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    """
    
    def __init__(self, config: CumDeltaConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CumDelta Support/Resistance —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–∏–ø–∞ CumDeltaConfig
        """
        super().__init__(config, "CumDelta_SR_v2")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config: CumDeltaConfig = config
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        self.config.min_risk_reward_ratio = 0.8  # –°–Ω–∏–∂–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        # –ö—ç—à –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        self._delta_cache = {}
        self._levels_cache = {}
        
        self.logger.info(f"üéØ CumDelta Support/Resistance —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: delta_window={config.delta_window}, support_window={config.support_window}")
    
    def calculate_strategy_indicators(self, market_data) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (DataFrame –∏–ª–∏ Dict)
        
        Returns:
            Dict —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
            df = self.get_primary_dataframe(market_data)
            if df is None:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return {}
            
            indicators = {}
            
            # 1. –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞)
            base_indicators = self.calculate_base_indicators(df)
            indicators.update(base_indicators)
            
            # 2. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–µ–ª—å—Ç–∞
            indicators['cum_delta'] = self._calculate_enhanced_delta(df)
            indicators['delta_momentum'] = indicators['cum_delta'].diff(self.config.delta_momentum_period)
            indicators['delta_strength'] = abs(indicators['cum_delta']) / df['volume'].rolling(10, min_periods=1).mean()
            
            # 3. –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            try:
                from bot.strategy.utils.levels import find_all_levels, get_trading_levels
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
                all_levels = find_all_levels(df, current_price=df['close'].iloc[-1])
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
                support_levels = [level.price for level in all_levels if level.level_type.value == 'support']
                resistance_levels = [level.price for level in all_levels if level.level_type.value == 'resistance']
            except ImportError:
                # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å —É—Ä–æ–≤–Ω–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                self.logger.warning("–ú–æ–¥—É–ª—å levels –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞—Å—á–µ—Ç")
                support_levels = [df['low'].tail(self.config.support_window).min()]
                resistance_levels = [df['high'].tail(self.config.support_window).max()]
            
            indicators['support_levels'] = support_levels
            indicators['resistance_levels'] = resistance_levels
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            current_price = df['close'].iloc[-1]
            if support_levels:
                indicators['nearest_support'] = min(support_levels, key=lambda x: abs(x - current_price))
            else:
                indicators['nearest_support'] = None
                
            if resistance_levels:
                indicators['nearest_resistance'] = min(resistance_levels, key=lambda x: abs(x - current_price))
            else:
                indicators['nearest_resistance'] = None
            
            # –ó–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
            if indicators['nearest_support']:
                indicators['support_zone'] = indicators['nearest_support'] * (1 + self.config.support_resistance_tolerance)
            else:
                indicators['support_zone'] = df['low'].tail(self.config.support_window).min()
            
            if indicators['nearest_resistance']:
                indicators['resist_zone'] = indicators['nearest_resistance'] * (1 - self.config.support_resistance_tolerance)
            else:
                indicators['resist_zone'] = df['high'].tail(self.config.support_window).max()
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            indicators['trend_slope'] = df['close'].rolling(self.config.trend_period, min_periods=1).mean().diff()
            indicators['trend_strength'] = abs(indicators['trend_slope']) / current_price
            
            # 5. –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if 'volume' in df.columns:
                vol_sma = df['volume'].rolling(20, min_periods=1).mean()
                indicators['volume_ratio'] = df['volume'] / vol_sma
                indicators['volume_increasing'] = df['volume'].diff() > 0
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –æ–±—ä–µ–º–∞ –∏ –¥–µ–ª—å—Ç—ã
                if self.config.volume_delta_correlation:
                    indicators['volume_delta_corr'] = self._calculate_volume_delta_correlation(df, indicators['cum_delta'])
            
            # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            # RSI –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            rsi_result = TechnicalIndicators.calculate_rsi(df)
            if rsi_result.is_valid:
                indicators['rsi'] = rsi_result.value
            
            # Bollinger Bands
            bb_result = TechnicalIndicators.calculate_bollinger_bands(df)
            if bb_result.is_valid:
                indicators['bb_position'] = bb_result.value['position']
                indicators['bb_upper'] = bb_result.value['upper']
                indicators['bb_lower'] = bb_result.value['lower']
            
            # 7. –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
            if self.config.delta_divergence_detection:
                indicators['delta_divergence'] = self._detect_delta_divergence(df, indicators['cum_delta'])
            
            # 8. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ–µ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
            if self.config.support_resistance_breakout:
                indicators['support_breakout'] = self._detect_support_breakout(df, indicators['support_levels'])
                indicators['resistance_breakout'] = self._detect_resistance_breakout(df, indicators['resistance_levels'])
            
            return indicators
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ CumDelta: {e}")
            return {}
    
    def _calculate_enhanced_delta(self, df: pd.DataFrame) -> pd.Series:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–µ–ª—å—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ buy_volume –∏ sell_volume
            if "buy_volume" in df.columns and "sell_volume" in df.columns:
                delta = df["buy_volume"] - df["sell_volume"]
            elif "delta" in df.columns:
                delta = df["delta"]
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–µ–ª—å—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º–∞
                price_change = df['close'].pct_change()
                volume_weighted_delta = price_change * df['volume'] * np.sign(price_change)
                delta = volume_weighted_delta.fillna(0)
            
            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–µ–ª—å—Ç—ã
            if self.config.delta_smoothing_period > 1:
                delta = delta.rolling(self.config.delta_smoothing_period, min_periods=1).mean()
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–µ–ª—å—Ç–∞
            cum_delta = delta.rolling(self.config.delta_window, min_periods=1).sum()
            
            return cum_delta
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–ª—å—Ç—ã: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–∞—Å—á–µ—Ç—É
            return (df["close"] - df["open"]).rolling(self.config.delta_window, min_periods=1).sum()
    
    def _calculate_volume_delta_correlation(self, df: pd.DataFrame, cum_delta: pd.Series) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä–µ–º–æ–º –∏ –¥–µ–ª—å—Ç–æ–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            window = min(20, len(df))
            volume = df['volume'].tail(window)
            delta = cum_delta.tail(window)
            
            if len(volume) < 5:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                return 0.0
            
            correlation = volume.corr(delta)
            return correlation if not pd.isna(correlation) else 0.0
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–±—ä–µ–º–∞ –∏ –¥–µ–ª—å—Ç—ã: {e}")
            return 0.0
    
    def _detect_delta_divergence(self, df: pd.DataFrame, cum_delta: pd.Series) -> Dict[str, bool]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –¥–µ–ª—å—Ç–æ–π"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –±–∞—Ä–æ–≤
            analysis_period = min(30, len(df))
            recent_price = df['close'].tail(analysis_period)
            recent_delta = cum_delta.tail(analysis_period)
            
            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            price_highs = self._find_local_extrema(recent_price, 'high')
            price_lows = self._find_local_extrema(recent_price, 'low')
            delta_highs = self._find_local_extrema(recent_delta, 'high')
            delta_lows = self._find_local_extrema(recent_delta, 'low')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
            bullish_divergence = False
            bearish_divergence = False
            
            if len(price_lows) >= 2 and len(delta_lows) >= 2:
                # –ë—ã—á—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–µ –º–∏–Ω–∏–º—É–º—ã, –¥–µ–ª—å—Ç–∞ - –Ω–µ—Ç
                if price_lows[-1] < price_lows[-2] and delta_lows[-1] > delta_lows[-2]:
                    bullish_divergence = True
            
            if len(price_highs) >= 2 and len(delta_highs) >= 2:
                # –ú–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–µ –º–∞–∫—Å–∏–º—É–º—ã, –¥–µ–ª—å—Ç–∞ - –Ω–µ—Ç
                if price_highs[-1] > price_highs[-2] and delta_highs[-1] < delta_highs[-2]:
                    bearish_divergence = True
            
            return {
                'bullish_divergence': bullish_divergence,
                'bearish_divergence': bearish_divergence
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π: {e}")
            return {'bullish_divergence': False, 'bearish_divergence': False}
    
    def _find_local_extrema(self, series: pd.Series, extrema_type: str) -> List[int]:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤"""
        try:
            extrema_indices = []
            
            for i in range(2, len(series) - 2):
                if extrema_type == 'high':
                    if (series.iloc[i] > series.iloc[i-1] and series.iloc[i] > series.iloc[i-2] and
                        series.iloc[i] > series.iloc[i+1] and series.iloc[i] > series.iloc[i+2]):
                        extrema_indices.append(i)
                else:  # low
                    if (series.iloc[i] < series.iloc[i-1] and series.iloc[i] < series.iloc[i-2] and
                        series.iloc[i] < series.iloc[i+1] and series.iloc[i] < series.iloc[i+2]):
                        extrema_indices.append(i)
            
            return extrema_indices
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤: {e}")
            return []
    
    def _detect_support_breakout(self, df: pd.DataFrame, support_levels: List[float]) -> bool:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            if not support_levels:
                return False
            
            current_price = df['close'].iloc[-1]
            previous_price = df['close'].iloc[-2]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∞ —Ç–µ–ø–µ—Ä—å –Ω–∏–∂–µ
            for support in support_levels:
                if previous_price > support and current_price < support:
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–æ–±–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            return False
    
    def _detect_resistance_breakout(self, df: pd.DataFrame, resistance_levels: List[float]) -> bool:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–æ—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            if not resistance_levels:
                return False
            
            current_price = df['close'].iloc[-1]
            previous_price = df['close'].iloc[-2]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –∞ —Ç–µ–ø–µ—Ä—å –≤—ã—à–µ
            for resistance in resistance_levels:
                if previous_price < resistance and current_price > resistance:
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–æ–±–æ—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def calculate_signal_strength(self, market_data, indicators: Dict, signal_type: str) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
        
        Returns:
            –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç 0 –¥–æ 1
        """
        try:
            df = self.get_primary_dataframe(market_data)
            if df is None:
                return 0.0
            
            strength_factors = []
            current_price = df['close'].iloc[-1]
            
            # 1. –§–∞–∫—Ç–æ—Ä –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–µ–ª—å—Ç—ã (0-1)
            cum_delta_series = indicators.get('cum_delta', pd.Series([0]))
            cum_delta = float(cum_delta_series.iloc[-1]) if not cum_delta_series.empty else 0.0
            delta_factor = min(abs(cum_delta) / (self.config.min_delta_threshold * 2), 1.0)
            strength_factors.append(delta_factor)
            
            # 2. –§–∞–∫—Ç–æ—Ä –±–ª–∏–∑–æ—Å—Ç–∏ –∫ S/R —É—Ä–æ–≤–Ω—è–º (0-1)
            if signal_type == 'BUY':
                # –î–ª—è –ª–æ–Ω–≥–∞: –±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
                support_zone = indicators.get('support_zone', current_price * 0.99)
                distance_to_support = abs(current_price - support_zone) / current_price
                sr_factor = max(0, 1 - (distance_to_support * 100))
            else:
                # –î–ª—è —à–æ—Ä—Ç–∞: –±–ª–∏–∑–æ—Å—Ç—å –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é
                resist_zone = indicators.get('resist_zone', current_price * 1.01)
                distance_to_resistance = abs(current_price - resist_zone) / current_price
                sr_factor = max(0, 1 - (distance_to_resistance * 100))
            strength_factors.append(sr_factor)
            
            # 3. –§–∞–∫—Ç–æ—Ä —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (0-1)
            trend_strength_series = indicators.get('trend_strength', 0)
            trend_strength = float(trend_strength_series) if isinstance(trend_strength_series, (int, float)) else 0.0
            trend_factor = min(trend_strength * 1000, 1.0)
            strength_factors.append(trend_factor)
            
            # 4. –§–∞–∫—Ç–æ—Ä RSI (0-1)
            rsi_series = indicators.get('rsi', pd.Series([50]))
            rsi = float(rsi_series.iloc[-1]) if not rsi_series.empty else 50.0
            if signal_type == 'BUY':
                rsi_factor = max(0, (50 - rsi) / 50) if rsi < 50 else 0
            else:
                rsi_factor = max(0, (rsi - 50) / 50) if rsi > 50 else 0
            strength_factors.append(rsi_factor)
            
            # 5. –§–∞–∫—Ç–æ—Ä –æ–±—ä–µ–º–∞ (0-1)
            volume_ratio_series = indicators.get('volume_ratio', pd.Series([1]))
            volume_ratio = float(volume_ratio_series.iloc[-1]) if not volume_ratio_series.empty else 1.0
            volume_factor = min(volume_ratio / 3.0, 1.0)
            strength_factors.append(volume_factor)
            
            # 6. –§–∞–∫—Ç–æ—Ä –º–æ–º–µ–Ω—Ç—É–º–∞ –¥–µ–ª—å—Ç—ã (0-1)
            delta_momentum_series = indicators.get('delta_momentum', pd.Series([0]))
            delta_momentum = float(delta_momentum_series.iloc[-1]) if not delta_momentum_series.empty else 0.0
            if signal_type == 'BUY':
                momentum_factor = max(0, delta_momentum / self.config.min_delta_threshold) if delta_momentum > 0 else 0
            else:
                momentum_factor = max(0, -delta_momentum / self.config.min_delta_threshold) if delta_momentum < 0 else 0
            momentum_factor = min(momentum_factor, 1.0)
            strength_factors.append(momentum_factor)
            
            # 7. –§–∞–∫—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–±—ä–µ–º–∞ –∏ –¥–µ–ª—å—Ç—ã (0-1)
            volume_delta_corr = indicators.get('volume_delta_corr', 0)
            correlation_factor = abs(volume_delta_corr) if self.config.volume_delta_correlation else 0.5
            strength_factors.append(correlation_factor)
            
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
            weights = [0.25, 0.20, 0.15, 0.12, 0.10, 0.10, 0.08]  # Delta –∏ S/R –≤–∞–∂–Ω–µ–µ
            signal_strength = sum(factor * weight for factor, weight in zip(strength_factors, weights))
            
            return min(signal_strength, 1.0)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return 0.5
    
    def check_confluence_factors(self, market_data, indicators: Dict, signal_type: str) -> Tuple[int, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
        
        Returns:
            Tuple: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤)
        """
        try:
            confluence_count = 0
            factors = []
            
            df = self.get_primary_dataframe(market_data)
            if df is None:
                return 0, []
            
            current_price = df['close'].iloc[-1]
            
            # 1. Delta —Ñ–∞–∫—Ç–æ—Ä
            cum_delta = indicators.get('cum_delta', pd.Series([0])).iloc[-1]
            if signal_type == 'BUY' and cum_delta > self.config.min_delta_threshold:
                confluence_count += 1
                factors.append(ConfluenceFactor.POSITIVE_DELTA.value)
            elif signal_type == 'SELL' and cum_delta < -self.config.min_delta_threshold:
                confluence_count += 1
                factors.append(ConfluenceFactor.NEGATIVE_DELTA.value)
            
            # 2. S/R —Ñ–∞–∫—Ç–æ—Ä
            if signal_type == 'BUY':
                support_zone = indicators.get('support_zone', current_price * 0.99)
                if current_price <= support_zone:
                    confluence_count += 1
                    factors.append(ConfluenceFactor.AT_SUPPORT.value)
            else:
                resist_zone = indicators.get('resist_zone', current_price * 1.01)
                if current_price >= resist_zone:
                    confluence_count += 1
                    factors.append(ConfluenceFactor.AT_RESISTANCE.value)
            
            # 3. –¢—Ä–µ–Ω–¥–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä
            trend_slope = indicators.get('trend_slope', pd.Series([0])).iloc[-1]
            if signal_type == 'BUY' and trend_slope > 0:
                confluence_count += 1
                factors.append(ConfluenceFactor.BULLISH_TREND.value)
            elif signal_type == 'SELL' and trend_slope < 0:
                confluence_count += 1
                factors.append(ConfluenceFactor.BEARISH_TREND.value)
            
            # 4. RSI —Ñ–∞–∫—Ç–æ—Ä
            rsi = indicators.get('rsi', pd.Series([50])).iloc[-1]
            if signal_type == 'BUY' and 30 <= rsi <= 60:
                confluence_count += 1
                factors.append(ConfluenceFactor.RSI_FAVORABLE.value)
            elif signal_type == 'SELL' and 40 <= rsi <= 70:
                confluence_count += 1
                factors.append(ConfluenceFactor.RSI_FAVORABLE.value)
            
            # 5. Volume —Ñ–∞–∫—Ç–æ—Ä
            volume_ratio = indicators.get('volume_ratio', pd.Series([1])).iloc[-1]
            if volume_ratio > self.config.volume_multiplier:
                confluence_count += 1
                factors.append(ConfluenceFactor.HIGH_VOLUME.value)
            
            # 6. Delta momentum —Ñ–∞–∫—Ç–æ—Ä
            delta_momentum = indicators.get('delta_momentum', pd.Series([0])).iloc[-1]
            if signal_type == 'BUY' and delta_momentum > 0:
                confluence_count += 1
                factors.append(ConfluenceFactor.DELTA_MOMENTUM.value)
            elif signal_type == 'SELL' and delta_momentum < 0:
                confluence_count += 1
                factors.append(ConfluenceFactor.DELTA_MOMENTUM.value)
            
            # 7. –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä
            if self.config.delta_divergence_detection:
                divergence = indicators.get('delta_divergence', {})
                if signal_type == 'BUY' and divergence.get('bullish_divergence', False):
                    confluence_count += 1
                    factors.append('delta_bullish_divergence')
                elif signal_type == 'SELL' and divergence.get('bearish_divergence', False):
                    confluence_count += 1
                    factors.append('delta_bearish_divergence')
            
            # 8. –ü—Ä–æ–±–æ–π —Ñ–∞–∫—Ç–æ—Ä
            if self.config.support_resistance_breakout:
                if signal_type == 'BUY' and indicators.get('support_breakout', False):
                    confluence_count += 1
                    factors.append(ConfluenceFactor.BREAKOUT_SUPPORT.value)
                elif signal_type == 'SELL' and indicators.get('resistance_breakout', False):
                    confluence_count += 1
                    factors.append(ConfluenceFactor.BREAKOUT_RESISTANCE.value)
            
            return confluence_count, factors
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
            return 0, []
    
    def _check_strategic_exit_conditions(self, market_data, state, current_price: float) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –¥–ª—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ None
        """
        try:
            if not state or not state.in_position:
                return None
            
            position_side = getattr(state, 'position_side', None)
            entry_price = getattr(state, 'entry_price', None)
            
            if not position_side or not entry_price:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.calculate_strategy_indicators(market_data)
            if not indicators:
                return None
            
            # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ P&L
            if position_side == 'BUY':
                pnl_pct = (current_price - entry_price) / entry_price * 100
            else:
                pnl_pct = (entry_price - current_price) / entry_price * 100
            
            # 1. –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø (–µ—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å > 1.5%)
            if pnl_pct > self.config.trailing_stop_activation_pct:
                df = self.get_primary_dataframe(market_data)
                if df is not None:
                    atr = TechnicalIndicators.calculate_atr_safe(df, 14).value
                    trailing_distance = atr * 0.7
                    
                    if position_side == 'BUY':
                        trailing_stop = current_price - trailing_distance
                        if current_price < trailing_stop:
                            return {
                                'signal': SignalType.EXIT_LONG.value,
                                'reason': 'trailing_stop',
                                'current_price': current_price,
                                'pnl_pct': pnl_pct
                            }
                    else:
                        trailing_stop = current_price + trailing_distance
                        if current_price > trailing_stop:
                            return {
                                'signal': SignalType.EXIT_SHORT.value,
                                'reason': 'trailing_stop',
                                'current_price': current_price,
                                'pnl_pct': pnl_pct
                            }
            
            # 2. –û–±—Ä–∞—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–ª—å—Ç—ã
            cum_delta = indicators.get('cum_delta', pd.Series([0])).iloc[-1]
            
            if position_side == 'BUY':
                # –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–Ω–≥–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ–ª—å—Ç–µ
                if cum_delta < -self.config.min_delta_threshold:
                    return {
                        'signal': SignalType.EXIT_LONG.value,
                        'reason': 'negative_delta',
                        'current_price': current_price,
                        'pnl_pct': pnl_pct
                    }
            else:
                # –í—ã—Ö–æ–¥ –∏–∑ —à–æ—Ä—Ç–∞ –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ–ª—å—Ç–µ
                if cum_delta > self.config.min_delta_threshold:
                    return {
                        'signal': SignalType.EXIT_SHORT.value,
                        'reason': 'positive_delta',
                        'current_price': current_price,
                        'pnl_pct': pnl_pct
                    }
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞: {e}")
            return None
    
    def execute(self, market_data, state=None, bybit_api=None, symbol='BTCUSDT') -> Optional[Dict]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            bybit_api: API –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏–ª–∏ None
        """
        try:
            # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            can_execute, reason = self.pre_execution_check(market_data, state)
            if not can_execute:
                self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {reason}")
                return None
            
            # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            is_valid, validation_msg = self.validate_market_data(market_data)
            if not is_valid:
                self.logger.warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {validation_msg}")
                return None
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.get_primary_dataframe(market_data)
            if df is None:
                return None
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            self._update_market_regime(market_data)
            
            # 5. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = self.calculate_strategy_indicators(market_data)
            if not indicators:
                self.logger.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return None
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if self.is_in_position(state):
                exit_signal = self._check_strategic_exit_conditions(market_data, state, df['close'].iloc[-1])
                if exit_signal:
                    self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞: {exit_signal['signal']}")
                    return self.create_signal(
                        signal_type=exit_signal['signal'],
                        entry_price=df['close'].iloc[-1],
                        stop_loss=df['close'].iloc[-1],  # –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–µ –≤–∞–∂–Ω–æ
                        take_profit=df['close'].iloc[-1],  # –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–µ –≤–∞–∂–Ω–æ
                        indicators=indicators,
                        confluence_factors=[exit_signal['reason']],
                        signal_strength=0.8,
                        symbol=symbol,
                        additional_data={'exit_reason': exit_signal['reason']}
                    )
            
            # 7. –ï—Å–ª–∏ —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞
            if self.is_in_position(state):
                return None
            
            # 8. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            current_price = df['close'].iloc[-1]
            cum_delta = indicators.get('cum_delta', pd.Series([0])).iloc[-1]
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–Ω–≥–∞
            delta_bullish = cum_delta > self.config.min_delta_threshold
            price_at_support = current_price <= indicators.get('support_zone', current_price * 0.99)
            trend_up = indicators.get('trend_slope', pd.Series([0])).iloc[-1] > 0
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è —à–æ—Ä—Ç–∞
            delta_bearish = cum_delta < -self.config.min_delta_threshold
            price_at_resist = current_price >= indicators.get('resist_zone', current_price * 1.01)
            trend_down = indicators.get('trend_slope', pd.Series([0])).iloc[-1] < 0
            
            # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            long_confluence, long_factors = self.check_confluence_factors(market_data, indicators, 'BUY')
            short_confluence, short_factors = self.check_confluence_factors(market_data, indicators, 'SELL')
            
            # 10. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            long_entry = (delta_bullish and price_at_support and trend_up and 
                         long_confluence >= self.config.confluence_required)
            short_entry = (delta_bearish and price_at_resist and trend_down and 
                          short_confluence >= self.config.confluence_required)
            
            # 11. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ª–æ–Ω–≥–∞
            if long_entry:
                signal_strength = self.calculate_signal_strength(market_data, indicators, 'BUY')
                
                if signal_strength < self.config.signal_strength_threshold:
                    self.logger.debug(f"–°–∏–≥–Ω–∞–ª BUY –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∞–±–∞—è —Å–∏–ª–∞ {signal_strength:.3f}")
                    return None
                
                entry_price = self.round_price(current_price)
                stop_loss, take_profit = self.calculate_dynamic_levels(df, entry_price, 'BUY')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ R:R
                risk = entry_price - stop_loss
                reward = take_profit - entry_price
                actual_rr = reward / risk if risk > 0 else 0
                
                if actual_rr < self.config.min_risk_reward_ratio:
                    self.logger.debug(f"–°–∏–≥–Ω–∞–ª BUY –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø–ª–æ—Ö–æ–π R:R {actual_rr:.2f} < {self.config.min_risk_reward_ratio}")
                    return None
                
                self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è BUY —Å–∏–≥–Ω–∞–ª–∞: –¥–µ–ª—å—Ç–∞ {cum_delta:.0f}, —Å–∏–ª–∞ {signal_strength:.3f}")
                
                return self.create_signal(
                    signal_type='BUY',
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    indicators=indicators,
                    confluence_factors=long_factors,
                    signal_strength=signal_strength,
                    symbol=symbol,
                    additional_data={
                        'cum_delta': float(cum_delta),
                        'support_zone': float(indicators.get('support_zone', 0)),
                        'delta_momentum': float(indicators.get('delta_momentum', pd.Series([0])).iloc[-1]),
                        'volume_delta_corr': float(indicators.get('volume_delta_corr', 0))
                    }
                )
            
            # 12. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —à–æ—Ä—Ç–∞
            elif short_entry:
                signal_strength = self.calculate_signal_strength(market_data, indicators, 'SELL')
                
                if signal_strength < self.config.signal_strength_threshold:
                    self.logger.debug(f"–°–∏–≥–Ω–∞–ª SELL –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∞–±–∞—è —Å–∏–ª–∞ {signal_strength:.3f}")
                    return None
                
                entry_price = self.round_price(current_price)
                stop_loss, take_profit = self.calculate_dynamic_levels(df, entry_price, 'SELL')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ R:R
                risk = stop_loss - entry_price
                reward = entry_price - take_profit
                actual_rr = reward / risk if risk > 0 else 0
                
                if actual_rr < self.config.min_risk_reward_ratio:
                    self.logger.debug(f"–°–∏–≥–Ω–∞–ª SELL –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø–ª–æ—Ö–æ–π R:R {actual_rr:.2f} < {self.config.min_risk_reward_ratio}")
                    return None
                
                self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SELL —Å–∏–≥–Ω–∞–ª–∞: –¥–µ–ª—å—Ç–∞ {cum_delta:.0f}, —Å–∏–ª–∞ {signal_strength:.3f}")
                
                return self.create_signal(
                    signal_type='SELL',
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    indicators=indicators,
                    confluence_factors=short_factors,
                    signal_strength=signal_strength,
                    symbol=symbol,
                    additional_data={
                        'cum_delta': float(cum_delta),
                        'resist_zone': float(indicators.get('resist_zone', 0)),
                        'delta_momentum': float(indicators.get('delta_momentum', pd.Series([0])).iloc[-1]),
                        'volume_delta_corr': float(indicators.get('volume_delta_corr', 0))
                    }
                )
            
            # 13. –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
            return None
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ execute: {e}", exc_info=True)
            return None
    
    def _update_market_regime(self, market_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            df = self.get_primary_dataframe(market_data)
            if df is None:
                return
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            returns = df['close'].pct_change().dropna()
            volatility = returns.std()
            
            if volatility > 0.03:  # 3%
                self.current_market_regime = MarketRegime.VOLATILE
            elif volatility < 0.01:  # 1%
                self.current_market_regime = MarketRegime.SIDEWAYS
            else:
                self.current_market_regime = MarketRegime.NORMAL
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            self.current_market_regime = MarketRegime.NORMAL
    
    def get_strategy_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'strategy_name': 'CumDelta_SupportResistance_v2',
            'version': '2.0.0',
            'description': 'CumDelta Support/Resistance —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π',
            'config': {
                'delta_window': self.config.delta_window,
                'support_window': self.config.support_window,
                'min_delta_threshold': self.config.min_delta_threshold,
                'support_resistance_tolerance': self.config.support_resistance_tolerance,
                'volume_multiplier': self.config.volume_multiplier,
                'use_enhanced_delta': self.config.use_enhanced_delta,
                'delta_divergence_detection': self.config.delta_divergence_detection,
                'support_resistance_breakout': self.config.support_resistance_breakout
            },
            'current_market_regime': self.current_market_regime.value,
            'is_active': self.is_active
        }


# =============================================================================
# –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô
# =============================================================================

def create_cumdelta_sr_strategy(config: Optional[CumDeltaConfig] = None, **kwargs) -> CumDeltaSRStrategy:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CumDelta Support/Resistance —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä CumDeltaSRStrategy
    """
    if config is None:
        config = CumDeltaConfig()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if kwargs:
        config = config.copy(**kwargs)
    
    return CumDeltaSRStrategy(config)


def create_conservative_cumdelta_sr() -> CumDeltaSRStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = CumDeltaConfig(
        min_delta_threshold=150.0,  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
        confluence_required=3,  # –ë–æ–ª—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        signal_strength_threshold=0.7,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
        support_resistance_tolerance=0.003,  # –ë–æ–ª—å—à–µ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        volume_multiplier=2.0,  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
        risk_reward_ratio=2.0,  # –õ—É—á—à–µ–µ R:R
        stop_loss_atr_multiplier=1.2  # –ë–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π SL
    )
    return CumDeltaSRStrategy(config)


def create_aggressive_cumdelta_sr() -> CumDeltaSRStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ CumDelta —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = CumDeltaConfig(
        min_delta_threshold=50.0,  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
        confluence_required=1,  # –ú–µ–Ω—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        signal_strength_threshold=0.5,  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
        support_resistance_tolerance=0.001,  # –ú–µ–Ω—å—à–µ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        volume_multiplier=1.2,  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º
        risk_reward_ratio=1.5,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ R:R
        stop_loss_atr_multiplier=2.0,  # –ë–æ–ª–µ–µ –¥–∞–ª—å–Ω–∏–π SL
        delta_smoothing_period=3,  # –ú–µ–Ω—å—à–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        delta_momentum_period=3  # –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –º–æ–º–µ–Ω—Ç—É–º
    )
    return CumDeltaSRStrategy(config)
