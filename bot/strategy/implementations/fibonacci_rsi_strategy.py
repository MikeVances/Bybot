"""
Fibonacci RSI Volume Strategy
–°—Ç—Ä–∞—Ç–µ–≥–∏—è, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –°–µ—Ä–≥–µ—è –Ω–∞ SoloConf.
–°–æ—á–µ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤, —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA,
RSI –∏ –æ–±—ä—ë–º–∞, —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è —Ü–µ–ª–µ–π –∏ ATR –¥–ª—è —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å–æ–≤.
"""

import pandas as pd
import numpy as np
from typing import Optional, Dict, Any, Tuple, List
from datetime import datetime
import logging

from bot.strategy.base import BaseStrategy, BaseStrategyConfig
from bot.strategy.base.mixins import (
    PositionManagerMixin,
    StatisticsMixin,
    PriceUtilsMixin,
    MarketAnalysisMixin,
    LoggingMixin
)
from dataclasses import dataclass, field
from enum import Enum


class FibonacciLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏"""
    FIB_382 = "fib_382"
    FIB_618 = "fib_618"
    FIB_500 = "fib_500"
    FIB_786 = "fib_786"


class ConfluenceFactor(Enum):
    """–§–∞–∫—Ç–æ—Ä—ã confluence –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    TREND_ALIGNMENT = "trend_alignment"
    VOLUME_SPIKE = "volume_spike"
    RSI_FAVORABLE = "rsi_favorable"
    FIBONACCI_LEVEL = "fibonacci_level"
    ATR_VOLATILITY = "atr_volatility"
    MULTI_TIMEFRAME = "multi_timeframe"


@dataclass
class FibonacciRSIConfig(BaseStrategyConfig):
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Fibonacci RSI Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    
    # === –¢–ê–ô–ú–§–†–ï–ô–ú–´ ===
    fast_tf: str = '15m'  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥–æ–≤
    slow_tf: str = '1h'   # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
    
    # === EMA –ü–ê–†–ê–ú–ï–¢–†–´ ===
    ema_short: int = 20   # –ö–æ—Ä–æ—Ç–∫–∞—è EMA
    ema_long: int = 50    # –î–ª–∏–Ω–Ω–∞—è EMA
    
    # === RSI –ü–ê–†–ê–ú–ï–¢–†–´ ===
    rsi_period: int = 14  # –ü–µ—Ä–∏–æ–¥ RSI
    rsi_overbought: float = 70.0  # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
    rsi_oversold: float = 30.0    # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
    rsi_favorable_zone: Tuple[float, float] = field(default=(40.0, 60.0))  # –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è –∑–æ–Ω–∞ RSI
    
    # === –û–ë–™–ï–ú–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
    volume_multiplier: float = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞ –¥–ª—è –≤—Å–ø–ª–µ—Å–∫–∞
    volume_ma_period: int = 20      # –ü–µ—Ä–∏–æ–¥ MA –¥–ª—è –æ–±—ä–µ–º–∞
    
    # === ATR –ü–ê–†–ê–ú–ï–¢–†–´ ===
    atr_period: int = 14  # –ü–µ—Ä–∏–æ–¥ ATR
    atr_multiplier_sl: float = 1.0  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
    atr_multiplier_tp: float = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    
    # === –§–ò–ë–û–ù–ê–ß–ß–ò –ü–ê–†–ê–ú–ï–¢–†–´ ===
    fib_lookback: int = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –§–∏–±–æ–Ω–∞—á—á–∏
    fib_levels: List[float] = field(default_factory=lambda: [0.382, 0.5, 0.618, 0.786])
    
    # === –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ ===
    risk_reward_ratio: float = 1.5  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    max_risk_per_trade_pct: float = 2.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
    
    # === –§–ò–õ–¨–¢–†–´ ===
    min_volume_threshold: float = 1000.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
    trend_strength_threshold: float = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
    
    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
    use_fibonacci_targets: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è —Ü–µ–ª–µ–π
    require_volume_confirmation: bool = True  # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–º–∞
    multi_timeframe_confirmation: bool = True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¢–§
    
    def __post_init__(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        super().__post_init__()
        self.strategy_name = "FibonacciRSI"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if self.ema_short >= self.ema_long:
            raise ValueError("ema_short –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < ema_long")
        
        if self.rsi_overbought <= self.rsi_oversold:
            raise ValueError("rsi_overbought –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > rsi_oversold")
        
        if self.volume_multiplier <= 1.0:
            raise ValueError("volume_multiplier –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 1.0")
        
        if self.atr_period < 1:
            raise ValueError("atr_period –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
        
        if self.fib_lookback < 10:
            raise ValueError("fib_lookback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 10")


class FibonacciRSIStrategy(BaseStrategy):
    """
    Fibonacci RSI Volume Strategy
    
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –°–µ—Ä–≥–µ—è –Ω–∞ SoloConf.
    –°–æ—á–µ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤, —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA,
    RSI –∏ –æ–±—ä—ë–º–∞, —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è —Ü–µ–ª–µ–π –∏ ATR –¥–ª—è —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å–æ–≤.
    """
    
    def __init__(self, config: FibonacciRSIConfig):
        super().__init__(config, config.strategy_name)
        self.config = config
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        self.config.min_risk_reward_ratio = 0.8  # –°–Ω–∏–∂–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        self.logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {self.config.strategy_name} v{self.config.strategy_version}")
        self.logger.info(f"üéØ Fibonacci RSI Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: fast_tf={self.config.fast_tf}, slow_tf={self.config.slow_tf}, "
                        f"ema_short={self.config.ema_short}, ema_long={self.config.ema_long}")
    
    def calculate_strategy_indicators(self, market_data: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            df_fast = market_data.get(self.config.fast_tf)
            df_slow = market_data.get(self.config.slow_tf)
            
            if df_fast is None or df_slow is None:
                self.logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ {self.config.fast_tf} –∏–ª–∏ {self.config.slow_tf}")
                return {}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            min_periods = max(self.config.ema_long, self.config.rsi_period, 
                            self.config.atr_period, self.config.fib_lookback)
            
            if len(df_fast) < min_periods or len(df_slow) < min_periods:
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: fast={len(df_fast)}, slow={len(df_slow)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è={min_periods}")
                return {}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            for df in [df_fast, df_slow]:
                for col in ['open', 'high', 'low', 'close', 'volume']:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce')
            
            indicators = {}
            
            # 1. EMA –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            ema_analysis = self._calculate_ema_analysis(df_slow)
            indicators.update(ema_analysis)
            
            # 2. RSI –∞–Ω–∞–ª–∏–∑ –Ω–∞ –±—ã—Å—Ç—Ä–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
            rsi_analysis = self._calculate_rsi_analysis(df_fast)
            indicators.update(rsi_analysis)
            
            # 3. –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            volume_analysis = self._calculate_volume_analysis(df_fast)
            indicators.update(volume_analysis)
            
            # 4. ATR –∞–Ω–∞–ª–∏–∑
            atr_analysis = self._calculate_atr_analysis(df_fast)
            indicators.update(atr_analysis)
            
            # 5. –§–∏–±–æ–Ω–∞—á—á–∏ —É—Ä–æ–≤–Ω–∏
            fib_analysis = self._calculate_fibonacci_levels(df_fast)
            indicators.update(fib_analysis)
            
            # 6. –ú–Ω–æ–≥–æ—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            mtf_analysis = self._calculate_mtf_analysis(df_fast, df_slow)
            indicators.update(mtf_analysis)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–µ —É—Ä–æ–≤–Ω–µ–π
            indicators['_df_fast'] = df_fast
            
            return indicators
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def _calculate_ema_analysis(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ EMA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
        try:
            ema_short = df['close'].ewm(span=self.config.ema_short, adjust=False).mean()
            ema_long = df['close'].ewm(span=self.config.ema_long, adjust=False).mean()
            
            current_ema_short = ema_short.iloc[-1]
            current_ema_long = ema_long.iloc[-1]
            
            trend_up = current_ema_short > current_ema_long
            trend_down = current_ema_short < current_ema_long
            trend_strength = abs(current_ema_short - current_ema_long) / current_ema_long
            
            return {
                'ema_short': current_ema_short,
                'ema_long': current_ema_long,
                'trend_up': trend_up,
                'trend_down': trend_down,
                'trend_strength': trend_strength,
                'trend_neutral': not trend_up and not trend_down
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ EMA: {e}")
            return {}
    
    def _calculate_rsi_analysis(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ RSI"""
        try:
            rsi = self._calculate_rsi(df['close'], self.config.rsi_period)
            current_rsi = rsi.iloc[-1]
            
            rsi_overbought = current_rsi > self.config.rsi_overbought
            rsi_oversold = current_rsi < self.config.rsi_oversold
            rsi_favorable = (self.config.rsi_favorable_zone[0] <= current_rsi <= 
                           self.config.rsi_favorable_zone[1])
            
            return {
                'rsi': current_rsi,
                'rsi_overbought': rsi_overbought,
                'rsi_oversold': rsi_oversold,
                'rsi_favorable': rsi_favorable,
                'rsi_bullish': current_rsi > 50 and not rsi_overbought,
                'rsi_bearish': current_rsi < 50 and not rsi_oversold
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ RSI: {e}")
            return {}
    
    def _calculate_volume_analysis(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞"""
        try:
            volume_ma = df['volume'].rolling(self.config.volume_ma_period).mean()
            current_volume = df['volume'].iloc[-1]
            current_volume_ma = volume_ma.iloc[-1]
            
            volume_spike = current_volume > self.config.volume_multiplier * current_volume_ma
            volume_ratio = current_volume / current_volume_ma if current_volume_ma > 0 else 1.0
            
            return {
                'volume': current_volume,
                'volume_ma': current_volume_ma,
                'volume_spike': volume_spike,
                'volume_ratio': volume_ratio,
                'volume_sufficient': current_volume > self.config.min_volume_threshold
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞: {e}")
            return {}
    
    def _calculate_atr_analysis(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            atr = self._calculate_atr(df)
            
            return {
                'atr': atr,
                'atr_high': atr > df['close'].iloc[-1] * 0.02,  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                'atr_low': atr < df['close'].iloc[-1] * 0.005,   # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                'atr_normal': not (atr > df['close'].iloc[-1] * 0.02 or atr < df['close'].iloc[-1] * 0.005)
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ATR: {e}")
            return {}
    
    def _calculate_fibonacci_levels(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏"""
        try:
            if len(df) < self.config.fib_lookback:
                return {}
            
            recent = df.tail(self.config.fib_lookback)
            high_price = recent['high'].max()
            low_price = recent['low'].min()
            range_ = high_price - low_price
            
            fib_levels = {}
            for level in self.config.fib_levels:
                fib_price = high_price - level * range_
                fib_levels[f'fib_{int(level*1000)}'] = fib_price
            
            current_price = df['close'].iloc[-1]
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            above_levels = [price for price in fib_levels.values() if price > current_price]
            below_levels = [price for price in fib_levels.values() if price < current_price]
            
            nearest_above = min(above_levels) if above_levels else None
            nearest_below = max(below_levels) if below_levels else None
            
            return {
                'fib_levels': fib_levels,
                'fib_high': high_price,
                'fib_low': low_price,
                'fib_range': range_,
                'nearest_above': nearest_above,
                'nearest_below': nearest_below,
                'current_price': current_price
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –§–∏–±–æ–Ω–∞—á—á–∏: {e}")
            return {}
    
    def _calculate_mtf_analysis(self, df_fast: pd.DataFrame, df_slow: pd.DataFrame) -> Dict[str, Any]:
        """–ú–Ω–æ–≥–æ—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
            fast_trend = df_fast['close'].iloc[-1] > df_fast['close'].iloc[-5]  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
            slow_trend = df_slow['close'].iloc[-1] > df_slow['close'].iloc[-3]   # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
            
            trends_aligned_bullish = fast_trend and slow_trend
            trends_aligned_bearish = not fast_trend and not slow_trend
            
            return {
                'fast_trend': fast_trend,
                'slow_trend': slow_trend,
                'trends_aligned_bullish': trends_aligned_bullish,
                'trends_aligned_bearish': trends_aligned_bearish,
                'mtf_confirmation': trends_aligned_bullish or trends_aligned_bearish
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ—Ä–µ–π–º–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {}
    
    def _calculate_rsi(self, series: pd.Series, period: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI"""
        delta = series.diff()
        up, down = delta.clip(lower=0), -delta.clip(upper=0)
        roll_up = up.rolling(period).mean()
        roll_down = down.rolling(period).mean()
        rs = roll_up / roll_down
        return 100 - (100 / (1 + rs))
    
    def _calculate_atr(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        high = df['high']
        low = df['low']
        close = df['close']
        
        tr1 = high - low
        tr2 = abs(high - close.shift(1))
        tr3 = abs(low - close.shift(1))
        
        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        atr = tr.rolling(self.config.atr_period).mean()
        
        return atr.iloc[-1] if not pd.isna(atr.iloc[-1]) else (high.iloc[-1] - low.iloc[-1])
    
    def calculate_signal_strength(self, market_data: Dict[str, pd.DataFrame], 
                                indicators: Dict[str, Any], signal_type: str) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
            
        Returns:
            –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç 0 –¥–æ 1
        """
        try:
            strength = 0.0
            
            # 1. –¢—Ä–µ–Ω–¥ (30%)
            if signal_type == 'BUY' and indicators.get('trend_up', False):
                strength += 0.3
            elif signal_type == 'SELL' and indicators.get('trend_down', False):
                strength += 0.3
            
            # 2. RSI (25%)
            rsi = indicators.get('rsi', 50)
            if signal_type == 'BUY' and indicators.get('rsi_bullish', False):
                strength += 0.25
            elif signal_type == 'SELL' and indicators.get('rsi_bearish', False):
                strength += 0.25
            
            # 3. –û–±—ä–µ–º (20%)
            if indicators.get('volume_spike', False):
                strength += 0.2
            
            # 4. –ú–Ω–æ–≥–æ—Ñ—Ä–µ–π–º–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (15%)
            if indicators.get('mtf_confirmation', False):
                strength += 0.15
            
            # 5. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (10%)
            if indicators.get('atr_normal', False):
                strength += 0.1
            
            return min(strength, 1.0)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return 0.0
    
    def check_confluence_factors(self, market_data: Dict[str, pd.DataFrame], 
                               indicators: Dict[str, Any], signal_type: str) -> Tuple[int, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
            
        Returns:
            Tuple: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤)
        """
        try:
            confluence_count = 0
            factors = []
            
            # 1. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
            if signal_type == 'BUY' and indicators.get('trends_aligned_bullish', False):
                confluence_count += 1
                factors.append(ConfluenceFactor.TREND_ALIGNMENT.value)
            elif signal_type == 'SELL' and indicators.get('trends_aligned_bearish', False):
                confluence_count += 1
                factors.append(ConfluenceFactor.TREND_ALIGNMENT.value)
            
            # 2. –û–±—ä–µ–º–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫
            if indicators.get('volume_spike', False):
                confluence_count += 1
                factors.append(ConfluenceFactor.VOLUME_SPIKE.value)
            
            # 3. –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π RSI
            if indicators.get('rsi_favorable', False):
                confluence_count += 1
                factors.append(ConfluenceFactor.RSI_FAVORABLE.value)
            
            # 4. –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
            if indicators.get('nearest_above') or indicators.get('nearest_below'):
                confluence_count += 1
                factors.append(ConfluenceFactor.FIBONACCI_LEVEL.value)
            
            # 5. –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if indicators.get('atr_normal', False):
                confluence_count += 1
                factors.append(ConfluenceFactor.ATR_VOLATILITY.value)
            
            # 6. –ú–Ω–æ–≥–æ—Ñ—Ä–µ–π–º–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if indicators.get('mtf_confirmation', False):
                confluence_count += 1
                factors.append(ConfluenceFactor.MULTI_TIMEFRAME.value)
            
            return confluence_count, factors
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
            return 0, []
    
    def execute(self, market_data: Dict[str, pd.DataFrame], state=None, 
               bybit_api=None, symbol='BTCUSDT') -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            bybit_api: API –∫–ª–∏–µ–Ω—Ç
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            in_position = self.is_in_position(state)
            position_side = getattr(state, 'position_side', None) if state else None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.calculate_strategy_indicators(market_data)
            if not indicators:
                return None
            
            current_price = indicators.get('current_price', 0)
            if current_price == 0:
                return None
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: fast_tf={self.config.fast_tf}, slow_tf={self.config.slow_tf}, "
                           f"rsi={indicators.get('rsi', 0):.1f}, volume_ratio={indicators.get('volume_ratio', 0):.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
            if not in_position:
                signal = self._check_entry_conditions(indicators, current_price, symbol)
                if signal:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                    signal_strength = self.calculate_signal_strength(market_data, indicators, signal['signal'])
                    signal['signal_strength'] = signal_strength
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º confluence —Ñ–∞–∫—Ç–æ—Ä—ã
                    confluence_count, factors = self.check_confluence_factors(market_data, indicators, signal['signal'])
                    signal['confluence_count'] = confluence_count
                    signal['confluence_factors'] = factors
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                    if signal_strength >= self.config.signal_strength_threshold:
                        self.logger.info(f"üéØ –°–∏–≥–Ω–∞–ª {signal['signal']} —Å —Å–∏–ª–æ–π {signal_strength:.2f}")
                        return signal
                    else:
                        self.logger.debug(f"üîá –°–∏–≥–Ω–∞–ª {signal['signal']} –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–∏–ª–∞ {signal_strength:.2f} < {self.config.signal_strength_threshold}")
                        return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
            elif in_position:
                exit_signal = self._check_exit_conditions(indicators, position_side, current_price)
                if exit_signal:
                    self.logger.info(f"üîö –°–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞: {exit_signal['signal']}")
                    return exit_signal
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None
    
    def _check_entry_conditions(self, indicators: Dict[str, Any], current_price: float, symbol: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG
            long_conditions = (
                indicators.get('trend_up', False) and
                indicators.get('rsi_bullish', False) and
                indicators.get('volume_spike', False) and
                indicators.get('volume_sufficient', False) and
                indicators.get('atr_normal', False)
            )
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT
            short_conditions = (
                indicators.get('trend_down', False) and
                indicators.get('rsi_bearish', False) and
                indicators.get('volume_spike', False) and
                indicators.get('volume_sufficient', False) and
                indicators.get('atr_normal', False)
            )
            
            if long_conditions:
                return self._create_long_signal(indicators, current_price, symbol)
            elif short_conditions:
                return self._create_short_signal(indicators, current_price, symbol)
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞: {e}")
            return None
    
    def _create_long_signal(self, indicators: Dict[str, Any], current_price: float, symbol: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
            df_fast = indicators.get('_df_fast')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
            if df_fast is None:
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–∞—Å—á–µ—Ç—É
                atr = indicators.get('atr', current_price * 0.01)
                stop_loss = current_price - atr * self.config.atr_multiplier_sl
                take_profit = current_price + atr * self.config.atr_multiplier_tp
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
                stop_loss, take_profit = self.calculate_dynamic_levels(df_fast, current_price, 'BUY')
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –§–∏–±–æ–Ω–∞—á—á–∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            if self.config.use_fibonacci_targets and indicators.get('nearest_above'):
                take_profit = indicators['nearest_above']
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã
            stop_loss = self.round_price(stop_loss)
            take_profit = self.round_price(take_profit)
            
            return {
                'symbol': symbol,
                'signal': 'BUY',
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'timestamp': datetime.now().isoformat(),
                'indicators': indicators,
                'strategy': 'Fibonacci_RSI_Volume',
                'comment': 'Fibonacci RSI Volume Strategy - LONG'
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LONG —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return {}
    
    def _create_short_signal(self, indicators: Dict[str, Any], current_price: float, symbol: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
            df_fast = indicators.get('_df_fast')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
            if df_fast is None:
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–∞—Å—á–µ—Ç—É
                atr = indicators.get('atr', current_price * 0.01)
                stop_loss = current_price + atr * self.config.atr_multiplier_sl
                take_profit = current_price - atr * self.config.atr_multiplier_tp
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
                stop_loss, take_profit = self.calculate_dynamic_levels(df_fast, current_price, 'SELL')
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –§–∏–±–æ–Ω–∞—á—á–∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            if self.config.use_fibonacci_targets and indicators.get('nearest_below'):
                take_profit = indicators['nearest_below']
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã
            stop_loss = self.round_price(stop_loss)
            take_profit = self.round_price(take_profit)
            
            return {
                'symbol': symbol,
                'signal': 'SELL',
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'timestamp': datetime.now().isoformat(),
                'indicators': indicators,
                'strategy': 'Fibonacci_RSI_Volume',
                'comment': 'Fibonacci RSI Volume Strategy - SHORT'
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SHORT —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return {}
    
    def _check_exit_conditions(self, indicators: Dict[str, Any], position_side: str, current_price: float) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if position_side == 'BUY':
                # –í—ã—Ö–æ–¥ –∏–∑ LONG
                exit_conditions = (
                    indicators.get('trend_down', False) or
                    indicators.get('rsi_overbought', False)
                )
                if exit_conditions:
                    return {
                        'signal': 'EXIT_LONG',
                        'comment': '–í—ã—Ö–æ–¥ –∏–∑ LONG: —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å RSI'
                    }
            
            elif position_side == 'SELL':
                # –í—ã—Ö–æ–¥ –∏–∑ SHORT
                exit_conditions = (
                    indicators.get('trend_up', False) or
                    indicators.get('rsi_oversold', False)
                )
                if exit_conditions:
                    return {
                        'signal': 'EXIT_SHORT',
                        'comment': '–í—ã—Ö–æ–¥ –∏–∑ SHORT: —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å RSI'
                    }
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞: {e}")
            return None
    
    def get_strategy_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'name': self.config.strategy_name,
            'version': self.config.strategy_version,
            'description': 'Fibonacci RSI Volume Strategy - –º–Ω–æ–≥–æ—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å EMA, RSI, –æ–±—ä–µ–º–æ–º –∏ —É—Ä–æ–≤–Ω—è–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏',
            'parameters': {
                'fast_tf': self.config.fast_tf,
                'slow_tf': self.config.slow_tf,
                'ema_short': self.config.ema_short,
                'ema_long': self.config.ema_long,
                'rsi_period': self.config.rsi_period,
                'volume_multiplier': self.config.volume_multiplier,
                'atr_period': self.config.atr_period,
                'fib_lookback': self.config.fib_lookback
            }
        }


# Factory —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
def create_fibonacci_rsi_strategy(config: Optional[FibonacciRSIConfig] = None, **kwargs) -> FibonacciRSIStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    if config is None:
        config = FibonacciRSIConfig()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for key, value in kwargs.items():
        if hasattr(config, key):
            setattr(config, key, value)
    
    return FibonacciRSIStrategy(config)


def create_conservative_fibonacci_rsi() -> FibonacciRSIStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = FibonacciRSIConfig(
        rsi_overbought=75.0,
        rsi_oversold=25.0,
        volume_multiplier=2.0,
        atr_multiplier_sl=1.5,
        atr_multiplier_tp=2.0,
        signal_strength_threshold=0.7,
        confluence_required=3
    )
    return FibonacciRSIStrategy(config)


def create_aggressive_fibonacci_rsi() -> FibonacciRSIStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = FibonacciRSIConfig(
        rsi_overbought=65.0,
        rsi_oversold=35.0,
        volume_multiplier=1.2,
        atr_multiplier_sl=0.8,
        atr_multiplier_tp=1.2,
        signal_strength_threshold=0.5,
        confluence_required=2
    )
    return FibonacciRSIStrategy(config) 