# bot/strategy/implementations/multitf_volume_strategy_v3.py
"""
–†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø Multi-timeframe Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v3.0
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
"""

from __future__ import annotations

from typing import Any, Dict, Optional
import pandas as pd

from ..base import (
    BaseStrategy,
    MultiTFConfig,
    SignalType,
    MarketRegime,
)
from ..pipeline import PipelineStrategyMixin, StrategyPipeline, StrategyIndicators
from ..modules.multitf_pipeline import (
    MultiTFIndicatorEngine,
    MultiTFSignalGenerator,
    MultiTFPositionSizer,
)

# –ò–º–ø–æ—Ä—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–∫—Å–∏–Ω–æ–≤
from ..base.trailing_stop_mixin import TrailingStopMixin
from ..base.market_regime_mixin import MarketRegimeMixin
from ..base.factory_mixin import StrategyFactoryMixin
from ..utils.debug_logger import DebugLoggingMixin
from ..utils.exit_conditions import ExitConditionsCalculator


class MultiTFVolumeStrategyV3(
    TrailingStopMixin,           # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π trailing stop
    MarketRegimeMixin,           # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    StrategyFactoryMixin,        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏
    DebugLoggingMixin,           # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    PipelineStrategyMixin,       # Pipeline –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    BaseStrategy                 # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
):
    """
    –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø Multi-timeframe Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v3.0

    üî• –£–°–¢–†–ê–ù–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:
    - 60+ —Å—Ç—Ä–æ–∫ trailing stop –ª–æ–≥–∏–∫–∏ ‚Üí TrailingStopMixin
    - 30+ —Å—Ç—Ä–æ–∫ market regime –∞–Ω–∞–ª–∏–∑–∞ ‚Üí MarketRegimeMixin (–±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ —Å CumDelta)
    - 20+ —Å—Ç—Ä–æ–∫ —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ‚Üí StrategyFactoryMixin
    - 15+ —Å—Ç—Ä–æ–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Üí DebugLoggingMixin
    - Multi-TF —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ ‚Üí ExitConditionsCalculator

    ‚úÖ –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ê:
    - –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
    - –õ–æ–≥–∏–∫–∞ alignment —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞
    - –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ timeframe –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏
    - Momentum –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    """

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∏–∫—Å–∏–Ω–æ–≤
    strategy_type = 'multitf_volume'

    def __init__(self, config: MultiTFConfig):
        super().__init__(config, "MultiTF_Volume_v3")
        self.config = config

        # –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ê: –∏–¥–µ–Ω—Ç–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ pipeline
        pipeline = StrategyPipeline(
            indicator_engine=MultiTFIndicatorEngine(
                self.config,
                base_indicator_fn=self.calculate_base_indicators,
            ),
            signal_generator=MultiTFSignalGenerator(self.config),
            position_sizer=MultiTFPositionSizer(
                self.config,
                round_price_fn=self.round_price,
                calc_levels_fn=self.calculate_dynamic_levels,
            ),
        )
        self._init_pipeline(pipeline)

        self.logger.info(
            "üéØ MultiTF v3.0 —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: fast_tf=%s, slow_tf=%s",
            self.config.fast_tf.value,
            self.config.slow_tf.value,
        )

    # =========================================================================
    # –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ê: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    # =========================================================================

    def calculate_strategy_indicators(self, market_data) -> Dict[str, Any]:
        """–¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ê: –†–∞—Å—á–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        bundle = self.pipeline.indicator_engine.calculate(market_data)
        self._pipeline_indicators = bundle
        self._after_indicator_calculation(bundle)
        return bundle.data

    def _extract_timeframes(self, market_data: Any) -> tuple[pd.DataFrame, pd.DataFrame]:
        """–¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ê: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞."""
        if isinstance(market_data, dict):
            df_fast = market_data.get(self.config.fast_tf.value)
            df_slow = market_data.get(self.config.slow_tf.value)
            if df_fast is None or df_slow is None:
                raise ValueError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞')
        else:
            df_fast = market_data
            df_slow = market_data
        return df_fast, df_slow

    # =========================================================================
    # –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ (–ó–ê–ú–ï–ù–Ø–Æ–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î)
    # =========================================================================

    def _check_strategic_exit_conditions(self, market_data, state, current_price: float) -> Optional[Dict[str, Any]]:
        """
        üî• –í–ú–ï–°–¢–û 60+ –°–¢–†–û–ö –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê ‚Üí 3 –°–¢–†–û–ö–ò!
        –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ê: ExitConditionsCalculator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É MultiTF –≤—ã—Ö–æ–¥–æ–≤
        """
        return ExitConditionsCalculator.calculate_strategic_exit(
            self, market_data, state, current_price
        )

    def _on_market_analysis(self, market_analysis: Dict[str, Any], df: pd.DataFrame) -> None:
        """
        üî• –í–ú–ï–°–¢–û 30+ –°–¢–†–û–ö –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ì–û MARKET REGIME –ö–û–î–ê ‚Üí 1 –°–¢–†–û–ö–ê!
        –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–û–ü–û–õ–ù–ï–ù–ê: –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–æ–≤ + –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        """
        self.update_market_regime(df)

    def calculate_atr_safe(self, df, period: int = 14):
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ TechnicalIndicators.calculate_atr_safe"""
        from ..utils.indicators import TechnicalIndicators
        return TechnicalIndicators.calculate_atr_safe(df, period)

    # =========================================================================
    # –ö–ê–°–¢–û–ú–ù–´–ï –ü–†–ï–°–ï–¢–´ –î–õ–Ø FACTORY MIXIN
    # =========================================================================

    @classmethod
    def _get_custom_presets(cls) -> Dict[str, Any]:
        """–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è Multi-TF Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""

        return {
            'trend_following': MultiTFConfig(
                volume_multiplier=2.5,
                trend_strength_threshold=0.002,
                signal_strength_threshold=0.6,
                confluence_required=2,
                fast_window=20,
                slow_window=50,
                momentum_analysis=True,
                mtf_divergence_detection=True,
                risk_reward_ratio=2.5,
            ),
            'breakout': MultiTFConfig(
                volume_multiplier=4.0,
                trend_strength_threshold=0.005,
                signal_strength_threshold=0.7,
                confluence_required=3,
                fast_window=15,
                slow_window=40,
                momentum_analysis=True,
                mtf_divergence_detection=False,
                risk_reward_ratio=3.0,
            ),
            'swing_trading': MultiTFConfig(
                volume_multiplier=1.8,
                trend_strength_threshold=0.001,
                signal_strength_threshold=0.65,
                confluence_required=4,
                fast_window=50,
                slow_window=100,
                momentum_analysis=False,
                mtf_divergence_detection=True,
                risk_reward_ratio=4.0,
            ),
            'scalping': MultiTFConfig(
                volume_multiplier=6.0,
                trend_strength_threshold=0.003,
                signal_strength_threshold=0.5,
                confluence_required=1,
                fast_window=10,
                slow_window=20,
                momentum_analysis=True,
                trailing_stop_activation_pct=1.5,
                risk_reward_ratio=1.3,
            ),
        }

    # =========================================================================
    # –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–†–ê–¢–ï–ì–ò–ò
    # =========================================================================

    def get_strategy_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∂–∏–º–æ–≤."""

        base_info = {
            'strategy_name': 'MultiTF_Volume_v3',
            'version': '3.0.0',
            'description': '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Multi-timeframe volume —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∏–∫—Å–∏–Ω–∞–º–∏',
            'config': {
                'fast_tf': self.config.fast_tf.value,
                'slow_tf': self.config.slow_tf.value,
                'volume_multiplier': self.config.volume_multiplier,
                'trend_strength_threshold': self.config.trend_strength_threshold,
                'momentum_analysis': self.config.momentum_analysis,
                'mtf_divergence_detection': self.config.mtf_divergence_detection,
            },
            'is_active': self.is_active,
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
        if hasattr(self, 'get_market_analysis'):
            base_info['market_analysis'] = self.get_market_analysis()

        return base_info


# =========================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =========================================================================

def create_multitf_trend_following(**kwargs) -> MultiTFVolumeStrategyV3:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Multi-TF —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥—É."""
    return MultiTFVolumeStrategyV3.create_preset('trend_following', **kwargs)

def create_multitf_breakout(**kwargs) -> MultiTFVolumeStrategyV3:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Multi-TF —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–±–æ–µ–≤."""
    return MultiTFVolumeStrategyV3.create_preset('breakout', **kwargs)

def create_multitf_swing(**kwargs) -> MultiTFVolumeStrategyV3:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Multi-TF —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–≤–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–ª–∏."""
    return MultiTFVolumeStrategyV3.create_preset('swing_trading', **kwargs)

def create_multitf_scalping(**kwargs) -> MultiTFVolumeStrategyV3:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Multi-TF —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞."""
    return MultiTFVolumeStrategyV3.create_preset('scalping', **kwargs)


# =========================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ú–ï–¢–ê–î–ê–ù–ù–´–ï
# =========================================================================

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
def create_multitf_volume_strategy(**kwargs) -> MultiTFVolumeStrategyV3:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π Multi-TF —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    return MultiTFVolumeStrategyV3.create_strategy(**kwargs)


STRATEGY_INFO_V3 = {
    'name': 'MultiTF_Volume_v3',
    'version': '3.0.0',
    'description': '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Multi-timeframe Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    'author': 'TradingBot Team',
    'category': 'Multi-Timeframe Analysis',
    'trading_logic_preserved': {
        'multitf_calculations': '100% identical',
        'trend_alignment_logic': '100% identical',
        'momentum_analysis': '100% identical',
        'divergence_detection': '100% identical',
        'volume_correlation': '100% identical',
    },
    'eliminated_duplication': {
        'trailing_stop_logic': '60+ lines',
        'market_regime_analysis': '30+ lines (identical to CumDelta)',
        'factory_functions': '20+ lines',
        'debug_logging': '15+ lines',
    }
}