# bot/strategy/implementations/range_trading_strategy.py
"""
Range Trading Strategy - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏—Ç–æ–º
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Any
import logging

from ..base import (
    BaseStrategy,
    VolumeVWAPConfig, 
    MarketRegime,
    SignalType,
    ConfluenceFactor,
    PositionSide
)
from ..utils.indicators import TechnicalIndicators
from ..utils.validators import DataValidator
from ..utils.market_analysis import MarketRegimeAnalyzer


class RangeTradingStrategy(BaseStrategy):
    """
    Range Trading Strategy v1.0
    
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞:
    - –ß–∞—Å—Ç—ã–µ —Å–¥–µ–ª–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏—Ç–æ–º
    - –ù–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É
    - –§–æ–∫—É—Å –Ω–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ SL/TP –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    """
    
    def __init__(self, config: VolumeVWAPConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        super().__init__(config, "RangeTrading_v1")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        self.config: VolumeVWAPConfig = config
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
        self.config.volume_multiplier = 1.2  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞
        self.config.signal_strength_threshold = 0.3  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        self.config.confluence_required = 1  # –ú–∏–Ω–∏–º—É–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        self.config.risk_reward_ratio = 1.2  # –ù–∏–∑–∫–∏–π R:R –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        self.config.min_risk_reward_ratio = 0.8  # –°–Ω–∏–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R:R –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        
        self.logger.info(f"üéØ Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: volume_mult={self.config.volume_multiplier}, "
                        f"signal_strength={self.config.signal_strength_threshold}")
    
    def calculate_strategy_indicators(self, market_data) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Returns:
            Dict —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            df = self.get_primary_dataframe(market_data)
            if df is None:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return {}
            
            indicators = {}
            
            # 1. –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            base_indicators = self.calculate_base_indicators(df)
            indicators.update(base_indicators)
            
            # 2. –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Å–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
            if 'volume' in df.columns:
                vol_sma_period = 10  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
                indicators['vol_sma'] = df['volume'].rolling(vol_sma_period, min_periods=1).mean()
                indicators['volume_ratio'] = df['volume'] / indicators['vol_sma']
                indicators['volume_spike'] = indicators['volume_ratio'] > self.config.volume_multiplier
                
                # Volume momentum
                indicators['volume_momentum'] = df['volume'].pct_change(3)
                indicators['volume_momentum_positive'] = indicators['volume_momentum'] > 0
            else:
                indicators.update({
                    'vol_sma': pd.Series([1000] * len(df), index=df.index),
                    'volume_ratio': pd.Series([1.0] * len(df), index=df.index),
                    'volume_spike': pd.Series([True] * len(df), index=df.index),  # –í—Å–µ–≥–¥–∞ True –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    'volume_momentum': pd.Series([0] * len(df), index=df.index),
                    'volume_momentum_positive': pd.Series([True] * len(df), index=df.index)
                })
            
            # 3. VWAP —Ä–∞—Å—á–µ—Ç—ã
            vwap_result = TechnicalIndicators.calculate_vwap(df, 20)  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
            if vwap_result.is_valid:
                indicators['vwap'] = vwap_result.value
                indicators['vwap_deviation'] = abs(df['close'] - indicators['vwap']) / df['close']
                indicators['price_above_vwap'] = df['close'] > indicators['vwap']
                indicators['price_below_vwap'] = df['close'] < indicators['vwap']
            else:
                indicators.update({
                    'vwap': df['close'],
                    'vwap_deviation': pd.Series([0] * len(df), index=df.index),
                    'price_above_vwap': pd.Series([True] * len(df), index=df.index),
                    'price_below_vwap': pd.Series([False] * len(df), index=df.index)
                })
            
            # 4. –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            short_trend_period = 10
            indicators['sma_short'] = df['close'].rolling(short_trend_period, min_periods=1).mean()
            indicators['trend_slope_short'] = indicators['sma_short'].diff(3)
            indicators['trend_bullish_short'] = indicators['trend_slope_short'] > 0
            indicators['trend_bearish_short'] = indicators['trend_slope_short'] < 0
            
            # 5. –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators['price_momentum'] = df['close'].pct_change(3)
            indicators['momentum_bullish'] = indicators['price_momentum'] > 0.001  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
            indicators['momentum_bearish'] = indicators['price_momentum'] < -0.001
            
            # 6. RSI –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            rsi_period = 14
            rsi_result = TechnicalIndicators.calculate_rsi(df, rsi_period)
            if rsi_result.is_valid:
                indicators['rsi'] = rsi_result.value
                indicators['rsi_oversold'] = indicators['rsi'] < 30
                indicators['rsi_overbought'] = indicators['rsi'] > 70
                indicators['rsi_neutral'] = (indicators['rsi'] >= 30) & (indicators['rsi'] <= 70)
            else:
                indicators.update({
                    'rsi': pd.Series([50] * len(df), index=df.index),
                    'rsi_oversold': pd.Series([False] * len(df), index=df.index),
                    'rsi_overbought': pd.Series([False] * len(df), index=df.index),
                    'rsi_neutral': pd.Series([True] * len(df), index=df.index)
                })
            
            # 7. Bollinger Bands –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            bb_period = 20
            bb_std = 2
            bb_result = TechnicalIndicators.calculate_bollinger_bands(df, bb_period, bb_std)
            if bb_result.is_valid:
                indicators['bb_upper'] = bb_result.value['upper']
                indicators['bb_lower'] = bb_result.value['lower']
                indicators['bb_middle'] = bb_result.value['middle']
                indicators['price_near_bb_upper'] = df['close'] > indicators['bb_upper'] * 0.98
                indicators['price_near_bb_lower'] = df['close'] < indicators['bb_lower'] * 1.02
            else:
                indicators.update({
                    'bb_upper': df['close'] * 1.02,
                    'bb_lower': df['close'] * 0.98,
                    'bb_middle': df['close'],
                    'price_near_bb_upper': pd.Series([False] * len(df), index=df.index),
                    'price_near_bb_lower': pd.Series([False] * len(df), index=df.index)
                })
            
            # 8. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            # –õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª—ã (–æ—Ç—Å–∫–æ–∫ –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã)
            indicators['range_bullish_setup'] = (
                (indicators['price_near_bb_lower'] | indicators['rsi_oversold']) &
                indicators['momentum_bullish'] &
                indicators['volume_momentum_positive']
            )
            
            # –®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª—ã (–æ—Ç—Å–∫–æ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã)
            indicators['range_bearish_setup'] = (
                (indicators['price_near_bb_upper'] | indicators['rsi_overbought']) &
                indicators['momentum_bearish'] &
                indicators['volume_momentum_positive']
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            indicators['vwap_bullish_setup'] = (
                indicators['price_below_vwap'] &
                indicators['momentum_bullish'] &
                indicators['volume_spike']
            )
            
            indicators['vwap_bearish_setup'] = (
                indicators['price_above_vwap'] &
                indicators['momentum_bearish'] &
                indicators['volume_spike']
            )
            
            self.logger.debug(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            return indicators
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {}
    
    def calculate_signal_strength(self, market_data, indicators: Dict, signal_type: str) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
        
        Returns:
            –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (0.0 - 1.0)
        """
        try:
            strength = 0.0
            
            # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            if signal_type == 'BUY':
                # RSI oversold
                if indicators.get('rsi_oversold', pd.Series([False])).iloc[-1]:
                    strength += 0.3
                
                # Momentum positive
                if indicators.get('momentum_bullish', pd.Series([False])).iloc[-1]:
                    strength += 0.2
                
                # Volume momentum
                if indicators.get('volume_momentum_positive', pd.Series([False])).iloc[-1]:
                    strength += 0.2
                
                # Price near BB lower
                if indicators.get('price_near_bb_lower', pd.Series([False])).iloc[-1]:
                    strength += 0.3
                
            elif signal_type == 'SELL':
                # RSI overbought
                if indicators.get('rsi_overbought', pd.Series([False])).iloc[-1]:
                    strength += 0.3
                
                # Momentum negative
                if indicators.get('momentum_bearish', pd.Series([False])).iloc[-1]:
                    strength += 0.2
                
                # Volume momentum
                if indicators.get('volume_momentum_positive', pd.Series([False])).iloc[-1]:
                    strength += 0.2
                
                # Price near BB upper
                if indicators.get('price_near_bb_upper', pd.Series([False])).iloc[-1]:
                    strength += 0.3
            
            return min(1.0, strength)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return 0.0
    
    def check_confluence_factors(self, market_data, indicators: Dict, signal_type: str) -> Tuple[int, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        
        Returns:
            Tuple (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–æ–≤)
        """
        confluence_factors = []
        
        try:
            if signal_type == 'BUY':
                # RSI oversold
                if indicators.get('rsi_oversold', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("RSI oversold")
                
                # Momentum positive
                if indicators.get('momentum_bullish', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("Positive momentum")
                
                # Volume momentum
                if indicators.get('volume_momentum_positive', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("Volume momentum")
                
                # Price near BB lower
                if indicators.get('price_near_bb_lower', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("Price near BB lower")
                
                # VWAP support
                if indicators.get('price_below_vwap', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("VWAP support")
                
            elif signal_type == 'SELL':
                # RSI overbought
                if indicators.get('rsi_overbought', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("RSI overbought")
                
                # Momentum negative
                if indicators.get('momentum_bearish', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("Negative momentum")
                
                # Volume momentum
                if indicators.get('volume_momentum_positive', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("Volume momentum")
                
                # Price near BB upper
                if indicators.get('price_near_bb_upper', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("Price near BB upper")
                
                # VWAP resistance
                if indicators.get('price_above_vwap', pd.Series([False])).iloc[-1]:
                    confluence_factors.append("VWAP resistance")
            
            return len(confluence_factors), confluence_factors
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
            return 0, []
    
    def execute(self, market_data, state=None, bybit_api=None, symbol='BTCUSDT') -> Optional[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            bybit_api: API –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Returns:
            –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            can_execute, reason = self.pre_execution_check(market_data, state)
            if not can_execute:
                self.logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: {reason}")
                return None
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
            df = self.get_primary_dataframe(market_data)
            if df is None:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                return None
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_analysis = self.analyze_current_market(df)
            condition = market_analysis.get('condition')
            if condition:
                if self._execution_count % 10 == 0:
                    self.log_market_analysis(market_analysis)
            
            # 4. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = self.calculate_strategy_indicators(market_data)
            if not indicators:
                self.logger.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return None
            
            # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = df['close'].iloc[-1]
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if self.is_in_position(state):
                exit_signal = self.should_exit_position(market_data, state, current_price)
                if exit_signal:
                    self.logger.info(f"üö™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞: {exit_signal.get('signal')}")
                    return exit_signal
                return None
            
            # 7. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if self._execution_count % 5 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π
                volume_ratio = indicators.get('volume_ratio', pd.Series([0])).iloc[-1]
                rsi = indicators.get('rsi', pd.Series([50])).iloc[-1]
                momentum = indicators.get('price_momentum', pd.Series([0])).iloc[-1]
                
                self.logger.info(f"üîç Range Trading –æ—Ç–ª–∞–¥–∫–∞: vol_ratio={volume_ratio:.2f}, "
                               f"rsi={rsi:.1f}, momentum={momentum:.4f}")
            
            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∞–ø—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            long_setup = (
                indicators.get('range_bullish_setup', pd.Series([False])).iloc[-1] or
                indicators.get('vwap_bullish_setup', pd.Series([False])).iloc[-1]
            )
            short_setup = (
                indicators.get('range_bearish_setup', pd.Series([False])).iloc[-1] or
                indicators.get('vwap_bearish_setup', pd.Series([False])).iloc[-1]
            )
            
            # 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞
            if long_setup:
                confluence_count, confluence_factors = self.check_confluence_factors(market_data, indicators, 'BUY')
                
                if confluence_count < 1:  # –ú–∏–Ω–∏–º—É–º 1 —Ñ–∞–∫—Ç–æ—Ä
                    self.logger.debug(f"–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ confluence ({confluence_count})")
                    return None
                
                signal_strength = self.calculate_signal_strength(market_data, indicators, 'BUY')
                
                if signal_strength < self.config.signal_strength_threshold:
                    self.logger.debug(f"–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∞–±–∞—è —Å–∏–ª–∞ {signal_strength:.3f}")
                    return None
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ (—É–∑–∫–∏–µ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
                entry_price = self.round_price(current_price)
                stop_loss, take_profit = self.calculate_range_levels(df, entry_price, 'BUY')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                risk = entry_price - stop_loss
                reward = take_profit - entry_price
                actual_rr = reward / risk if risk > 0 else 0
                
                min_rr = getattr(self.config, 'min_risk_reward_ratio', 1.0)
                if actual_rr < min_rr:
                    self.logger.debug(f"–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø–ª–æ—Ö–æ–π R:R {actual_rr:.2f} < {min_rr}")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
                signal = self.create_signal(
                    signal_type='BUY',
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    indicators={
                        'volume_ratio': float(indicators['volume_ratio'].iloc[-1]) if 'volume_ratio' in indicators else 1.0,
                        'rsi': float(indicators['rsi'].iloc[-1]) if 'rsi' in indicators else 50.0,
                        'momentum': float(indicators['price_momentum'].iloc[-1]) if 'price_momentum' in indicators else 0.0,
                        'vwap': float(indicators['vwap'].iloc[-1]) if 'vwap' in indicators else entry_price,
                        'bb_lower': float(indicators['bb_lower'].iloc[-1]) if 'bb_lower' in indicators else entry_price * 0.98,
                        'bb_upper': float(indicators['bb_upper'].iloc[-1]) if 'bb_upper' in indicators else entry_price * 1.02
                    },
                    confluence_factors=confluence_factors,
                    signal_strength=signal_strength,
                    symbol=symbol
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if bybit_api:
                    try:
                        bybit_api.log_strategy_signal(
                            strategy=signal['strategy'],
                            symbol=symbol,
                            signal=signal['signal'],
                            market_data=signal['indicators'],
                            indicators=signal['indicators'],
                            comment=f"Range Trading: {', '.join(confluence_factors)}"
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
                
                self.log_signal_generation(signal, {'market_analysis': market_analysis})
                return signal
            
            # 10. –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–∞
            elif short_setup:
                confluence_count, confluence_factors = self.check_confluence_factors(market_data, indicators, 'SELL')
                
                if confluence_count < 1:
                    self.logger.debug(f"–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ confluence ({confluence_count})")
                    return None
                
                signal_strength = self.calculate_signal_strength(market_data, indicators, 'SELL')
                
                if signal_strength < self.config.signal_strength_threshold:
                    self.logger.debug(f"–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Å–ª–∞–±–∞—è —Å–∏–ª–∞ {signal_strength:.3f}")
                    return None
                
                entry_price = self.round_price(current_price)
                stop_loss, take_profit = self.calculate_range_levels(df, entry_price, 'SELL')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º R:R
                risk = stop_loss - entry_price
                reward = entry_price - take_profit
                actual_rr = reward / risk if risk > 0 else 0
                
                min_rr = getattr(self.config, 'min_risk_reward_ratio', 1.0)
                if actual_rr < min_rr:
                    self.logger.debug(f"–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –ø–ª–æ—Ö–æ–π R:R {actual_rr:.2f} < {min_rr}")
                    return None
                
                signal = self.create_signal(
                    signal_type='SELL',
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    indicators={
                        'volume_ratio': float(indicators['volume_ratio'].iloc[-1]) if 'volume_ratio' in indicators else 1.0,
                        'rsi': float(indicators['rsi'].iloc[-1]) if 'rsi' in indicators else 50.0,
                        'momentum': float(indicators['price_momentum'].iloc[-1]) if 'price_momentum' in indicators else 0.0,
                        'vwap': float(indicators['vwap'].iloc[-1]) if 'vwap' in indicators else entry_price,
                        'bb_lower': float(indicators['bb_lower'].iloc[-1]) if 'bb_lower' in indicators else entry_price * 0.98,
                        'bb_upper': float(indicators['bb_upper'].iloc[-1]) if 'bb_upper' in indicators else entry_price * 1.02
                    },
                    confluence_factors=confluence_factors,
                    signal_strength=signal_strength,
                    symbol=symbol
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if bybit_api:
                    try:
                        bybit_api.log_strategy_signal(
                            strategy=signal['strategy'],
                            symbol=symbol,
                            signal=signal['signal'],
                            market_data=signal['indicators'],
                            indicators=signal['indicators'],
                            comment=f"Range Trading: {', '.join(confluence_factors)}"
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
                
                self.log_signal_generation(signal, {'market_analysis': market_analysis})
                return signal
            
            # 11. –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            return None
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", exc_info=True)
            return None
        
        finally:
            signal_result = None
            self.post_execution_tasks(signal_result, market_data, state)
    
    def calculate_range_levels(self, df: pd.DataFrame, entry_price: float, signal_type: str) -> Tuple[float, float]:
        """
        –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π SL/TP –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        
        Returns:
            Tuple (stop_loss, take_profit)
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
            atr_period = 14
            atr_result = TechnicalIndicators.calculate_atr_safe(df, atr_period)
            atr = atr_result.last_value if atr_result and atr_result.is_valid else None
            
            if not atr or atr <= 0:
                atr = entry_price * 0.01  # 1% –æ—Ç —Ü–µ–Ω—ã
            
            # –£–∑–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if signal_type == 'BUY':
                stop_loss = entry_price - (atr * 1.5)  # 1.5 ATR –Ω–∏–∂–µ
                take_profit = entry_price + (atr * 2.0)  # 2.0 ATR –≤—ã—à–µ
            else:  # SELL
                stop_loss = entry_price + (atr * 1.5)  # 1.5 ATR –≤—ã—à–µ
                take_profit = entry_price - (atr * 2.0)  # 2.0 ATR –Ω–∏–∂–µ
            
            return self.round_price(stop_loss), self.round_price(take_profit)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            # Fallback —É—Ä–æ–≤–Ω–∏
            if signal_type == 'BUY':
                return entry_price * 0.985, entry_price * 1.015  # 1.5% –¥–∏–∞–ø–∞–∑–æ–Ω
            else:
                return entry_price * 1.015, entry_price * 0.985


# =========================================================================
# –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =========================================================================

def create_range_trading_strategy() -> RangeTradingStrategy:
    """–°–æ–∑–¥–∞–Ω–∏–µ Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    config = VolumeVWAPConfig(
        volume_multiplier=1.2,
        signal_strength_threshold=0.3,
        confluence_required=1,
        risk_reward_ratio=1.2,
        max_risk_per_trade_pct=0.5,  # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        min_volume_for_signal=100  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
    )
    return RangeTradingStrategy(config)


# =========================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ú–ï–¢–ê–î–ê–ù–ù–´–ï
# =========================================================================

STRATEGY_INFO = {
    'name': 'Range_Trading',
    'version': '1.0.0',
    'description': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å —á–∞—Å—Ç—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏—Ç–æ–º',
    'author': 'TradingBot Team',
    'category': 'Range Trading',
    'timeframes': ['1m', '5m', '15m'],
    'min_data_points': 50,
    'supported_assets': ['crypto', 'forex', 'stocks'],
    'market_conditions': ['sideways', 'range', 'low_volatility']
} 
