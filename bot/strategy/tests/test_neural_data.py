#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.ai import NeuralIntegration

def test_neural_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–∫–∏"""
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–∫–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        neural_integration = NeuralIntegration()
        print("‚úÖ NeuralIntegration —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = neural_integration.get_neural_statistics()
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        neural_stats = stats['neural_trader']
        strategy_analysis = stats['strategy_analysis']
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏:")
        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${neural_stats['current_balance']:.2f}")
        print(f"   üìà –ü—Ä–∏–±—ã–ª—å: ${neural_stats['profit']:.2f}")
        print(f"   üìä ROI: {neural_stats['roi']:.1f}%")
        print(f"   üéØ –°—Ç–∞–≤–æ–∫: {neural_stats['total_bets']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {neural_stats['winning_bets']}")
        print(f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {neural_stats['win_rate']:.1f}%")
        
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        for strategy_name, data in strategy_analysis.items():
            print(f"   {strategy_name}:")
            print(f"      üìä –°–∏–≥–Ω–∞–ª–æ–≤: {data['total_signals']}")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {data['success_rate']*100:.1f}%")
            print(f"      üí∞ –ü—Ä–∏–±—ã–ª—å: {data['avg_profit']*100:.2f}%")
            print(f"      üü¢ –ü–æ–∫—É–ø–∫–∏: {data['buy_signals']} | üî¥ –ü—Ä–æ–¥–∞–∂–∏: {data['sell_signals']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        ranking = neural_integration.get_strategy_ranking()
        print(f"\nüèÜ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        for i, strategy in enumerate(ranking[:5], 1):
            print(f"   {i}. {strategy['strategy']}")
            print(f"      üìä –°–∏–≥–Ω–∞–ª–æ–≤: {strategy['total_signals']}")
            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {strategy['success_rate']*100:.1f}%")
            print(f"      üí∞ –ü—Ä–∏–±—ã–ª—å: {strategy['avg_profit']*100:.2f}%")
        
        print(f"\nüî• –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏: {stats['active_bets']}")
        print(f"üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['completed_trades']}")
        
        print("\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_neural_data() 