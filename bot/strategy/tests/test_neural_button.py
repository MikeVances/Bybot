#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_neural_button():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ù–µ–π—Ä–æ–Ω–∫–∞ –≤ Telegram –±–æ—Ç–µ"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É '–ù–µ–π—Ä–æ–Ω–∫–∞' –≤ Telegram –±–æ—Ç–µ...")
    
    try:
        from bot.services.telegram_bot import TelegramBot
        from config import TELEGRAM_TOKEN
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = TelegramBot(TELEGRAM_TOKEN)
        print("‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è _neural —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(bot, '_neural'):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è _neural –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è _neural –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –≤ –º–µ–Ω—é
        from bot.services.telegram_bot import InlineKeyboardButton
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                InlineKeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="position")
            ],
            [
                InlineKeyboardButton("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies"),
                InlineKeyboardButton("üìã –°–¥–µ–ª–∫–∏", callback_data="trades")
            ],
            [
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="charts"),
                InlineKeyboardButton("ü§ñ –ù–µ–π—Ä–æ–Ω–∫–∞", callback_data="neural")
            ],
            [
                InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton("üìä –ü—Ä–æ–º–µ—Ç–µ–π", callback_data="prometheus")
            ]
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–µ–π—Ä–æ–Ω–∫–∞" –µ—Å—Ç—å
        neural_button_found = False
        for row in keyboard:
            for button in row:
                if button.callback_data == "neural":
                    neural_button_found = True
                    print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–µ–π—Ä–æ–Ω–∫–∞' –Ω–∞–π–¥–µ–Ω–∞: {button.text}")
                    break
            if neural_button_found:
                break
        
        if not neural_button_found:
            print("‚ùå –ö–Ω–æ–ø–∫–∞ '–ù–µ–π—Ä–æ–Ω–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        if hasattr(bot, '_on_menu_button'):
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ '–ù–µ–π—Ä–æ–Ω–∫–∞':")
        print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è _neural —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   ‚úÖ Markdown —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 10 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("   ‚úÖ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑")
        
        print("\nüéØ –ö–Ω–æ–ø–∫–∞ '–ù–µ–π—Ä–æ–Ω–∫–∞' –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
        print("   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
        print("   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")
        print("   ‚Ä¢ –°–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ 10 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("   ‚Ä¢ –ò–º–µ–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ù–µ–π—Ä–æ–Ω–∫–∞': {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_neural_button()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ö–Ω–æ–ø–∫–∞ '–ù–µ–π—Ä–æ–Ω–∫–∞' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–Ω–æ–ø–∫–æ–π '–ù–µ–π—Ä–æ–Ω–∫–∞'.") 