#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import json

def analyze_data_sources():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º trade_journal.csv
    print("\nüìä 1. –ê–Ω–∞–ª–∏–∑ trade_journal.csv:")
    if os.path.exists("data/trade_journal.csv"):
        df = pd.read_csv("data/trade_journal.csv")
        print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"   üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamp'].iloc[0]} - {df['timestamp'].iloc[-1]}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        strategy_counts = df['strategy'].value_counts()
        print(f"   üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:")
        for strategy, count in strategy_counts.items():
            print(f"      {strategy}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_counts = df['signal'].value_counts()
        print(f"   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for signal, count in signal_counts.items():
            print(f"      {signal}: {count} —Ä–∞–∑")
            
    else:
        print("   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\nü§ñ 2. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    if os.path.exists("data/ai/neural_integration_state.json"):
        with open("data/ai/neural_integration_state.json", 'r') as f:
            state = json.load(f)
        print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"   üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {len(state.get('active_bets', {}))}")
        print(f"   üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(state.get('completed_trades', []))}")
        print(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {state.get('timestamp', 'N/A')}")
    else:
        print("   ‚ùå –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
    print("\nüß† 3. –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏:")
    if os.path.exists("data/ai/neural_trader_model.json"):
        with open("data/ai/neural_trader_model.json", 'r') as f:
            model = json.load(f)
        print(f"   ‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"   üéØ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {model.get('total_bets', 0)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {model.get('winning_bets', 0)}")
        print(f"   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${model.get('current_balance', 1000.0):.2f}")
        print(f"   üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(model.get('performance_history', []))} –∑–∞–ø–∏—Å–µ–π")
    else:
        print("   ‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ trade_journal.csv
    print("\nüìà 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö trade_journal.csv:")
    if os.path.exists("data/trade_journal.csv"):
        df = pd.read_csv("data/trade_journal.csv")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        strategy_analysis = {}
        for strategy in df['strategy'].unique():
            strategy_df = df[df['strategy'] == strategy]
            
            total_signals = len(strategy_df)
            buy_signals = len(strategy_df[strategy_df['signal'] == 'BUY'])
            sell_signals = len(strategy_df[strategy_df['signal'] == 'SELL'])
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö)
            if 'entry_price' in strategy_df.columns and 'close' in strategy_df.columns:
                success_count = 0
                total_profit = 0
                
                for _, row in strategy_df.tail(100).iterrows():  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–≥–Ω–∞–ª–æ–≤
                    entry_price = row.get('entry_price', 0)
                    close_price = row.get('close', 0)
                    
                    if entry_price > 0 and close_price > 0:
                        if row['signal'] == 'BUY':
                            profit_pct = (close_price - entry_price) / entry_price
                        else:  # SELL
                            profit_pct = (entry_price - close_price) / entry_price
                        
                        if profit_pct > 0.005:  # 0.5%
                            success_count += 1
                        total_profit += profit_pct
                
                success_rate = success_count / min(100, len(strategy_df)) if strategy_df.shape[0] > 0 else 0
                avg_profit = total_profit / min(100, len(strategy_df)) if strategy_df.shape[0] > 0 else 0
            else:
                success_rate = 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                avg_profit = 0
            
            strategy_analysis[strategy] = {
                'total_signals': total_signals,
                'buy_signals': buy_signals,
                'sell_signals': sell_signals,
                'success_rate': success_rate,
                'avg_profit': avg_profit
            }
        
        print(f"   üìä –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:")
        for strategy, data in strategy_analysis.items():
            print(f"      {strategy}:")
            print(f"         üìä –°–∏–≥–Ω–∞–ª–æ–≤: {data['total_signals']}")
            print(f"         üü¢ –ü–æ–∫—É–ø–∫–∏: {data['buy_signals']} | üî¥ –ü—Ä–æ–¥–∞–∂–∏: {data['sell_signals']}")
            print(f"         ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {data['success_rate']*100:.1f}%")
            print(f"         üí∞ –ü—Ä–∏–±—ã–ª—å: {data['avg_profit']*100:.2f}%")
    
    print("\nüéØ –í—ã–≤–æ–¥—ã:")
    print("   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –ù–ê–°–¢–û–Ø–©–ò–ï - –æ–Ω–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ trade_journal.csv")
    print("   ‚Ä¢ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç 56,457 –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –ø–µ—Ä–∏–æ–¥ —Å 99 –≥–æ–¥–∞ –¥–æ 2025-07-29")
    print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("   ‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    analyze_data_sources() 