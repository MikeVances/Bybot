#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.ai import NeuralIntegration

def test_neural_fixed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–π—Ä–æ–Ω–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–π—Ä–æ–Ω–∫–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        neural_integration = NeuralIntegration()
        print("‚úÖ NeuralIntegration —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = neural_integration.get_neural_statistics()
        neural_stats = stats['neural_trader']
        strategy_analysis = stats['strategy_analysis']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (–∫–∞–∫ –≤ Telegram –±–æ—Ç–µ)
        neural_text = "ü§ñ *–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å-—Ç—Ä–µ–π–¥–µ—Ä*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏
        neural_text += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏:*\n"
        neural_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: \\${neural_stats['current_balance']:.2f}\n"
        neural_text += f"   üìà –ü—Ä–∏–±—ã–ª—å: \\${neural_stats['profit']:.2f}\n"
        neural_text += f"   üìä ROI: {neural_stats['roi']:.1f}%\n"
        neural_text += f"   üéØ –°—Ç–∞–≤–æ–∫: {neural_stats['total_bets']}\n"
        neural_text += f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {neural_stats['winning_bets']}\n"
        neural_text += f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {neural_stats['win_rate']:.1f}%\n\n"
        
        # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        ranking = neural_integration.get_strategy_ranking()
        if ranking:
            neural_text += "üèÜ *–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:*\n"
            for i, strategy in enumerate(ranking[:5], 1):
                strategy_name = strategy['strategy'].replace('_', '\\_')
                neural_text += f"   {i}\\. {strategy_name}\n"
                neural_text += f"      üìä –°–∏–≥–Ω–∞–ª–æ–≤: {strategy['total_signals']}\n"
                neural_text += f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {strategy['success_rate']*100:.1f}%\n"
                neural_text += f"      üí∞ –ü—Ä–∏–±—ã–ª—å: {strategy['avg_profit']*100:.2f}%\n"
                neural_text += f"      üü¢ –ü–æ–∫—É–ø–∫–∏: {strategy['buy_signals']} \\| üî¥ –ü—Ä–æ–¥–∞–∂–∏: {strategy['sell_signals']}\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
        neural_text += f"üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:* {stats['active_bets']}\n"
        neural_text += f"üìã *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* {stats['completed_trades']}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        neural_text += "üß† *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:*\n"
        neural_text += "   ‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 50 –Ω–µ–π—Ä–æ–Ω–æ–≤\n"
        neural_text += "   ‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏: 32 \\+ 32 –Ω–µ–π—Ä–æ–Ω–∞\n"
        neural_text += "   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 10 –Ω–µ–π—Ä–æ–Ω–æ–≤ \\(–ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\\)\n"
        neural_text += "   ‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: ReLU \\+ Softmax\n"
        neural_text += "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: –û–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
        
        neural_text += "üéØ *–§—É–Ω–∫—Ü–∏–∏:*\n"
        neural_text += "   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        neural_text += "   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        neural_text += "   ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏\n"
        neural_text += "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏\n"
        neural_text += "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n"
        
        neural_text += "üìä *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n"
        neural_text += "   ‚Ä¢ strategy\\_01 \\- VolumeSpike\\_VWAP\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_02 \\- TickTimer\\_CumDelta\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_03 \\- MultiTF\\_VolumeSpike\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_04 \\- KangarooTail\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_05 \\- Fibonacci\\_RSI\\_Volume\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_06 \\- VolumeClimaxReversal\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_07 \\- BreakoutRetest\\_Optimized\n"
        neural_text += "   ‚Ä¢ strategy\\_08 \\- –ó–∞–≥–ª—É—à–∫–∞ \\(–æ–±—É—á–µ–Ω–∏–µ\\)\n"
        neural_text += "   ‚Ä¢ strategy\\_09 \\- –ó–∞–≥–ª—É—à–∫–∞ \\(–æ–±—É—á–µ–Ω–∏–µ\\)\n"
        neural_text += "   ‚Ä¢ strategy\\_10 \\- –ó–∞–≥–ª—É—à–∫–∞ \\(–æ–±—É—á–µ–Ω–∏–µ\\)\n"
        
        print("‚úÖ –¢–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown")
        print(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(neural_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        problematic_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        found_problems = []
        
        for char in problematic_chars:
            if char in neural_text and f'\\{char}' not in neural_text:
                count = neural_text.count(char)
                found_problems.append(f"'{char}': {count} —Ä–∞–∑")
        
        if found_problems:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(found_problems)}")
        else:
            print("‚úÖ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("\nüìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:")
        print(neural_text[:500])
        print("...")
        
        print("\n‚úÖ –§—É–Ω–∫—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_neural_fixed() 