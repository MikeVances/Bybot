"""
–ü—Ä–æ—Å—Ç–∞—è MVP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ SMA –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞
"""

import logging
import pandas as pd
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class SimpleMVPStrategy:
    """
    –ü—Ä–æ—Å—Ç–∞—è MVP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    - –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ SMA(9) –≤—ã—à–µ SMA(21)
    - –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ SMA(9) –Ω–∏–∂–µ SMA(21)
    - –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    """

    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.name = "SimpleMVP"
        self.version = "1.0.0"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.fast_period = self.config.get('fast_period', 9)
        self.slow_period = self.config.get('slow_period', 21)
        self.stop_loss_pct = self.config.get('stop_loss_pct', 2.0)
        self.take_profit_pct = self.config.get('take_profit_pct', 3.0)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_signal = None
        self.last_signal_time = None

        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ {self.name} v{self.version}")
        logger.info(f"üìä SMA: fast={self.fast_period}, slow={self.slow_period}")
        logger.info(f"üéØ SL={self.stop_loss_pct}%, TP={self.take_profit_pct}%")

    def analyze(self, df: pd.DataFrame, **kwargs) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏

        Returns:
            Dict —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏–ª–∏ None
        """
        try:
            if len(df) < self.slow_period + 1:
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} < {self.slow_period + 1}")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = df.copy()
            df['sma_fast'] = df['close'].rolling(window=self.fast_period).mean()
            df['sma_slow'] = df['close'].rolling(window=self.slow_period).mean()

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current = df.iloc[-1]
            previous = df.iloc[-2]

            current_price = float(current['close'])
            sma_fast_curr = float(current['sma_fast'])
            sma_slow_curr = float(current['sma_slow'])
            sma_fast_prev = float(previous['sma_fast'])
            sma_slow_prev = float(previous['sma_slow'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if pd.isna(sma_fast_curr) or pd.isna(sma_slow_curr):
                logger.debug("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –≥–æ—Ç–æ–≤—ã (NaN –∑–Ω–∞—á–µ–Ω–∏—è)")
                return None

            signal_type = None
            signal_strength = 0.0

            # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: –∫—Ä–æ—Å—Å–æ–≤–µ—Ä SMA
            # –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª: fast SMA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç slow SMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            if (sma_fast_prev <= sma_slow_prev and
                sma_fast_curr > sma_slow_curr):
                signal_type = 'BUY'
                signal_strength = abs(sma_fast_curr - sma_slow_curr) / sma_slow_curr

            # –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª: fast SMA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç slow SMA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            elif (sma_fast_prev >= sma_slow_prev and
                  sma_fast_curr < sma_slow_curr):
                signal_type = 'SELL'
                signal_strength = abs(sma_fast_curr - sma_slow_curr) / sma_slow_curr

            if signal_type:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
                stop_loss = current_price * (1 - self.stop_loss_pct/100) if signal_type == 'BUY' else current_price * (1 + self.stop_loss_pct/100)
                take_profit = current_price * (1 + self.take_profit_pct/100) if signal_type == 'BUY' else current_price * (1 - self.take_profit_pct/100)

                signal = {
                    'strategy': self.name,
                    'signal': signal_type,
                    'price': current_price,
                    'timestamp': datetime.now(),
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'strength': min(signal_strength * 100, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 0-1
                    'indicators': {
                        'sma_fast': sma_fast_curr,
                        'sma_slow': sma_slow_curr,
                        'crossover': f"{self.fast_period}>{self.slow_period}" if signal_type == 'BUY' else f"{self.fast_period}<{self.slow_period}"
                    },
                    'confidence': 0.7,  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è MVP
                    'trade_amount': self.config.get('trade_amount', 0.001)
                }

                self.last_signal = signal_type
                self.last_signal_time = datetime.now()

                logger.info(f"üéØ {signal_type} —Å–∏–≥–Ω–∞–ª: —Ü–µ–Ω–∞={current_price:.2f}, —Å–∏–ª–∞={signal_strength:.3f}")
                logger.info(f"üìä SMA: fast={sma_fast_curr:.2f}, slow={sma_slow_curr:.2f}")

                return signal

            # –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
            logger.debug(f"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞: SMA fast={sma_fast_curr:.2f}, slow={sma_slow_curr:.2f}")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ MVP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None

    def get_required_history(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return self.slow_period + 5  # +5 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'name': self.name,
            'version': self.version,
            'last_signal': self.last_signal,
            'last_signal_time': self.last_signal_time.isoformat() if self.last_signal_time else None,
            'parameters': {
                'fast_period': self.fast_period,
                'slow_period': self.slow_period,
                'stop_loss_pct': self.stop_loss_pct,
                'take_profit_pct': self.take_profit_pct
            }
        }


def create_strategy(config: Dict[str, Any] = None) -> SimpleMVPStrategy:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    return SimpleMVPStrategy(config)


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
class VolumeVWAP:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    def __init__(self, **kwargs):
        self.strategy = SimpleMVPStrategy(kwargs)

    def analyze(self, df, **kwargs):
        return self.strategy.analyze(df, **kwargs)


class CumDeltaSR:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    def __init__(self, **kwargs):
        self.strategy = SimpleMVPStrategy(kwargs)

    def analyze(self, df, **kwargs):
        return self.strategy.analyze(df, **kwargs)


class MultiTFVolume:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    def __init__(self, **kwargs):
        self.strategy = SimpleMVPStrategy(kwargs)

    def analyze(self, df, **kwargs):
        return self.strategy.analyze(df, **kwargs)