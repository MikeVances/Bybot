"""
üéØ SEASONAL VOLUME ADJUSTMENT MODULE
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–º–æ–≤ –ø–æ–¥ intraday/weekly –ø–∞—Ç—Ç–µ—Ä–Ω—ã

–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–æ–∂–Ω—ã–µ volume spike —Å–∏–≥–Ω–∞–ª—ã –∏–∑-–∑–∞:
- Session –æ—Ç–∫—Ä—ã—Ç–∏–π (Asia/Europe/US)
- Day of week patterns (Monday vs Friday)
- Crypto specific: weekend vs weekday volumes

Expected Impact: +15% win rate —á–µ—Ä–µ–∑ —Å–Ω–∏–∂–µ–Ω–∏–µ false positives
"""

import pandas as pd
import numpy as np
from typing import Dict, Optional, Tuple
from datetime import datetime, time
from dataclasses import dataclass
import logging


@dataclass
class SeasonalityFactors:
    """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–µ–∑–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"""
    hourly: Dict[int, float]  # 0-23 hours
    daily: Dict[int, float]   # 0-6 days of week (Mon=0)
    combined: float           # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
    confidence: float         # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ñ–∞–∫—Ç–æ—Ä–µ (0-1)


class VolumeSeasonalityEngine:
    """
    –î–≤–∏–∂–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–º–æ–≤

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç rolling window –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞
    """

    def __init__(self, lookback_days: int = 30, min_samples: int = 10):
        """
        Args:
            lookback_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            min_samples: –ú–∏–Ω–∏–º—É–º —Å—ç–º–ø–ª–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
        """
        self.lookback_days = lookback_days
        self.min_samples = min_samples
        self.logger = logging.getLogger('volume_seasonality')

        # –ö—ç—à —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å)
        self._hourly_factors: Optional[Dict[int, float]] = None
        self._daily_factors: Optional[Dict[int, float]] = None
        self._last_calibration: Optional[datetime] = None

    def calibrate(self, df: pd.DataFrame) -> bool:
        """
        –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['volume'] –∏ DateTimeIndex

        Returns:
            True –µ—Å–ª–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if len(df) < self.min_samples * 24:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {len(df)} bars")
                return False

            # 1. Hourly seasonality
            df_copy = df.copy()
            df_copy['hour'] = df_copy.index.hour
            df_copy['day_of_week'] = df_copy.index.dayofweek

            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –ø–æ —á–∞—Å–∞–º
            hourly_avg = df_copy.groupby('hour')['volume'].mean()
            overall_avg = df_copy['volume'].mean()

            # –§–∞–∫—Ç–æ—Ä—ã: –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            self._hourly_factors = {}
            for hour in range(24):
                if hour in hourly_avg.index:
                    self._hourly_factors[hour] = hourly_avg[hour] / overall_avg
                else:
                    self._hourly_factors[hour] = 1.0

            # 2. Day of week seasonality
            daily_avg = df_copy.groupby('day_of_week')['volume'].mean()
            self._daily_factors = {}
            for day in range(7):
                if day in daily_avg.index:
                    self._daily_factors[day] = daily_avg[day] / overall_avg
                else:
                    self._daily_factors[day] = 1.0

            self._last_calibration = datetime.now()

            self.logger.info(
                f"‚úÖ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {len(df)} bars. "
                f"Peak hours: {self._get_peak_hours()}, "
                f"Active days: {self._get_active_days()}"
            )

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
            return False

    def get_seasonality_factor(self, timestamp: pd.Timestamp) -> SeasonalityFactors:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

        Args:
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞

        Returns:
            SeasonalityFactors —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        """
        if self._hourly_factors is None or self._daily_factors is None:
            # –ù–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            return SeasonalityFactors(
                hourly={h: 1.0 for h in range(24)},
                daily={d: 1.0 for d in range(7)},
                combined=1.0,
                confidence=0.0
            )

        hour = timestamp.hour
        day_of_week = timestamp.dayofweek

        hourly_factor = self._hourly_factors.get(hour, 1.0)
        daily_factor = self._daily_factors.get(day_of_week, 1.0)

        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (geometric mean –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        combined = np.sqrt(hourly_factor * daily_factor)

        # Confidence –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç 1.0
        # –§–∞–∫—Ç–æ—Ä—ã –±–ª–∏–∑–∫–∏–µ –∫ 1.0 = –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–Ω–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏)
        # –§–∞–∫—Ç–æ—Ä—ã –¥–∞–ª–µ–∫–∏–µ –æ—Ç 1.0 = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–µ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω)
        deviation = abs(combined - 1.0)
        confidence = min(deviation * 2.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ [0, 1]

        return SeasonalityFactors(
            hourly=self._hourly_factors.copy(),
            daily=self._daily_factors.copy(),
            combined=combined,
            confidence=confidence
        )

    def adjust_volume_series(self, df: pd.DataFrame, recalibrate: bool = False) -> pd.Series:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å–µ–π —Å–µ—Ä–∏–∏ –æ–±—ä–µ–º–æ–≤

        Args:
            df: DataFrame —Å –æ–±—ä–µ–º–∞–º–∏
            recalibrate: –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π

        Returns:
            –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ä–∏—è –æ–±—ä–µ–º–æ–≤
        """
        if recalibrate or self._hourly_factors is None:
            self.calibrate(df)

        if self._hourly_factors is None:
            return df['volume']  # –ù–µ —Å–º–æ–≥–ª–∏ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å

        adjusted_volumes = []

        for idx, row in df.iterrows():
            factors = self.get_seasonality_factor(idx)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º: –¥–µ–ª–∏–º –Ω–∞ —Å–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            # –ï—Å–ª–∏ —á–∞—Å –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º (factor > 1),
            # —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –±—É–¥–µ—Ç –Ω–∏–∂–µ
            adjusted_volume = row['volume'] / factors.combined
            adjusted_volumes.append(adjusted_volume)

        return pd.Series(adjusted_volumes, index=df.index, name='volume_adjusted')

    def _get_peak_hours(self) -> list:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self._hourly_factors:
            return []

        # –ß–∞—Å—ã —Å —Ñ–∞–∫—Ç–æ—Ä–æ–º > 1.2 (–Ω–∞ 20% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)
        peak_hours = [h for h, f in self._hourly_factors.items() if f > 1.2]
        return sorted(peak_hours)

    def _get_active_days(self) -> list:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        if not self._daily_factors:
            return []

        day_names = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
        # –î–Ω–∏ —Å —Ñ–∞–∫—Ç–æ—Ä–æ–º > 1.1
        active_days = [day_names[d] for d, f in self._daily_factors.items() if f > 1.1]
        return active_days

    def needs_recalibration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞"""
        if self._last_calibration is None:
            return True

        # –ü–µ—Ä–µ–∫–∞–ª–∏–±—Ä—É–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
        time_since = datetime.now() - self._last_calibration
        return time_since.days >= 1


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_global_seasonality_engine = None


def get_seasonality_engine(lookback_days: int = 30) -> VolumeSeasonalityEngine:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –¥–≤–∏–∂–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
    global _global_seasonality_engine
    if _global_seasonality_engine is None:
        _global_seasonality_engine = VolumeSeasonalityEngine(lookback_days)
    return _global_seasonality_engine


# ============================================================================
# CONVENIENCE FUNCTIONS
# ============================================================================

def adjust_volume_for_seasonality(df: pd.DataFrame,
                                  lookback_days: int = 30,
                                  recalibrate: bool = False) -> pd.Series:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–º–æ–≤

    Args:
        df: DataFrame —Å volume –∏ DateTimeIndex
        lookback_days: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        recalibrate: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞

    Returns:
        –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ä–∏—è –æ–±—ä–µ–º–æ–≤

    Example:
        >>> df['volume_adjusted'] = adjust_volume_for_seasonality(df)
        >>> df['volume_spike'] = df['volume_adjusted'] > df['volume_adjusted'].rolling(20).mean() * 2.5
    """
    engine = get_seasonality_engine(lookback_days)
    return engine.adjust_volume_series(df, recalibrate)


def get_current_seasonality_factor(timestamp: Optional[pd.Timestamp] = None) -> float:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

    Args:
        timestamp: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (default: —Å–µ–π—á–∞—Å)

    Returns:
        –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
    """
    if timestamp is None:
        timestamp = pd.Timestamp.now()

    engine = get_seasonality_engine()
    factors = engine.get_seasonality_factor(timestamp)
    return factors.combined
