# bot/strategy/base/strategy_base.py
"""
–ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–∏–∫—Å–∏–Ω—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import pandas as pd
import numpy as np
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any, Tuple, Union
from datetime import datetime, timezone, timedelta
import logging

from .config import BaseStrategyConfig
from .enums import MarketRegime, SignalType, PositionSide, ExitReason
from .mixins import (
    PositionManagerMixin, 
    StatisticsMixin, 
    PriceUtilsMixin,
    MarketAnalysisMixin,
    LoggingMixin
)
from ..utils.indicators import TechnicalIndicators
from ..utils.validators import DataValidator, ValidationLevel
from ..utils.levels import LevelsFinder
from ..utils.market_analysis import MarketRegimeAnalyzer


class BaseStrategy(ABC, PositionManagerMixin, StatisticsMixin, PriceUtilsMixin, 
                  MarketAnalysisMixin, LoggingMixin):
    """
    –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –û–±—â—É—é –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
    - –°–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    """
    
    def __init__(self, config: BaseStrategyConfig, strategy_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Å–∏–Ω—ã
        StatisticsMixin.__init__(self)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.config = config
        self.strategy_name = strategy_name
        self.strategy_version = config.strategy_version
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.current_market_regime = MarketRegime.NORMAL
        self.is_active = True
        self.last_analysis_time = None
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._indicator_cache = {}
        self._cache_timestamp = None
        self._market_analysis_cache = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(f'strategy.{strategy_name.lower()}')
        self.logger.setLevel(getattr(logging, config.log_level.value))
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self._execution_count = 0
        self._last_signal_time = None
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–æ–ø–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        self._adaptive_params = {}
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        self.logger.debug(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} v{self.strategy_version}")
    
    # =========================================================================
    # –ê–ë–°–¢–†–ê–ö–¢–ù–´–ï –ú–ï–¢–û–î–´ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)
    # =========================================================================
    
    @abstractmethod
    def calculate_strategy_indicators(self, market_data) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (DataFrame –∏–ª–∏ Dict[str, DataFrame])
        
        Returns:
            Dict —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        pass
    
    @abstractmethod
    def calculate_signal_strength(self, market_data, indicators: Dict, signal_type: str) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
        
        Returns:
            –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç 0.0 –¥–æ 1.0
        """
        pass
    
    @abstractmethod
    def check_confluence_factors(self, market_data, indicators: Dict, signal_type: str) -> Tuple[int, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        
        Returns:
            Tuple (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫_—Ñ–∞–∫—Ç–æ—Ä–æ–≤)
        """
        pass
    
    @abstractmethod
    def execute(self, market_data, state=None, bybit_api=None, symbol='BTCUSDT') -> Optional[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            bybit_api: API –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Returns:
            –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        pass
    
    # =========================================================================
    # –û–ë–©–ò–ï –ú–ï–¢–û–î–´ –ë–ê–ó–û–í–û–ì–û –ö–õ–ê–°–°–ê
    # =========================================================================
    
    def validate_market_data(self, market_data) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Tuple (is_valid, error_message)
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            max_staleness = timedelta(minutes=self.config.max_data_staleness_minutes)

            if isinstance(market_data, dict):
                # –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã–µ
                if not market_data:
                    return False, "–ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                for tf, df in market_data.items():
                    if df is None or df.empty:
                        return False, f"–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf}"
                    
                    result = DataValidator.validate_basic_data(df, self.config.validation_level)
                    if not result.is_valid:
                        return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {tf}: {result.errors[0] if result.errors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"

                    safety = DataValidator.validate_market_data_safety(df, max_staleness=max_staleness)
                    if not safety.is_safe:
                        return False, f"–ü—Ä–æ–±–ª–µ–º—ã –¥–∞–Ω–Ω—ã—Ö {tf}: {safety.reason}"
                    for warning in safety.warnings:
                        self.logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö {tf}: {warning}")
            
            elif isinstance(market_data, pd.DataFrame):
                # –û–¥–∏–Ω–æ—á–Ω—ã–π DataFrame
                result = DataValidator.validate_basic_data(market_data, self.config.validation_level)
                if not result.is_valid:
                    return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {result.errors[0] if result.errors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"

                safety = DataValidator.validate_market_data_safety(market_data, max_staleness=max_staleness)
                if not safety.is_safe:
                    return False, f"–ü—Ä–æ–±–ª–µ–º—ã –¥–∞–Ω–Ω—ã—Ö: {safety.reason}"
                for warning in safety.warnings:
                    self.logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {warning}")
            
            else:
                return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(market_data)}"
            
            return True, "–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
    
    def get_primary_dataframe(self, market_data) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Returns:
            –û—Å–Ω–æ–≤–Ω–æ–π DataFrame –∏–ª–∏ None
        """
        try:
            if isinstance(market_data, pd.DataFrame):
                return market_data
            elif isinstance(market_data, dict):
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (5m, 1h, –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
                priority_tfs = ['5m', '1h', '15m', '1m']
                
                for tf in priority_tfs:
                    if tf in market_data and market_data[tf] is not None:
                        return market_data[tf]
                
                # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                for tf, df in market_data.items():
                    if df is not None and not df.empty:
                        return df
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DataFrame: {e}")
            return None
    
    def calculate_base_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –æ–±—â–∏—Ö –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        
        Returns:
            Dict —Å –±–∞–∑–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"base_indicators_{len(df)}"
            current_time = datetime.now()
            
            if (cache_key in self._indicator_cache and 
                self._cache_timestamp and 
                (current_time - self._cache_timestamp).seconds < 60):  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
                return self._indicator_cache[cache_key]
            
            indicators = {}
            
            # ATR - –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω –¥–ª—è SL/TP
            atr_result = TechnicalIndicators.calculate_atr_safe(df, self.config.atr_period)
            if atr_result.is_valid:
                indicators['atr'] = atr_result.value
            
            # RSI - –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
            rsi_result = TechnicalIndicators.calculate_rsi(df, 14)
            if rsi_result.is_valid:
                indicators['rsi'] = rsi_result.value
            
            # Bollinger Bands - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            bb_result = TechnicalIndicators.calculate_bollinger_bands(df, 20)
            if bb_result.is_valid:
                indicators['bb'] = bb_result.value
            
            # Volume SMA –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–º—ã
            if 'volume' in df.columns:
                indicators['volume_sma'] = df['volume'].rolling(20, min_periods=1).mean()
                indicators['volume_ratio'] = df['volume'] / indicators['volume_sma']
            
            # –ë–∞–∑–æ–≤—ã–µ SMA –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            indicators['sma_20'] = TechnicalIndicators.calculate_sma(df, 20).value
            indicators['sma_50'] = TechnicalIndicators.calculate_sma(df, 50).value
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._indicator_cache[cache_key] = indicators
            self._cache_timestamp = current_time
            
            return indicators
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def calculate_dynamic_levels(self, df: pd.DataFrame, entry_price: float, side: str) -> Tuple[float, float]:
        """
        –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π SL/TP —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏ ('BUY' –∏–ª–∏ 'SELL')
        
        Returns:
            Tuple (stop_loss, take_profit)
        """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if hasattr(self, 'analyze_current_market'):
                market_analysis = self.analyze_current_market(df)
                if market_analysis and 'condition' in market_analysis:
                    self.current_market_regime = market_analysis['condition'].regime
            
            # –ü–æ–ª—É—á–∞–µ–º ATR
            atr_result = TechnicalIndicators.calculate_atr_safe(df, self.config.atr_period)
            atr = float(atr_result.last_value) if atr_result.is_valid and atr_result.last_value else None

            # –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            sl_multiplier = self.config.stop_loss_atr_multiplier
            rr_ratio = self.config.risk_reward_ratio

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            if hasattr(self, 'current_market_regime'):
                if self.current_market_regime == MarketRegime.VOLATILE:
                    sl_multiplier *= 1.2  # –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                elif self.current_market_regime == MarketRegime.TRENDING:
                    sl_multiplier *= 0.8  # –ú–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ –≤ —Ç—Ä–µ–Ω–¥–µ
                    rr_ratio *= 1.2      # –ë–æ–ª—å—à–µ –ø—Ä–∏–±—ã–ª–∏ –≤ —Ç—Ä–µ–Ω–¥–µ
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ R:R –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if self.config.adaptive_parameters:
                rr_ratio = self.calculate_adaptive_rr_ratio(df)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            min_sl_distance = entry_price * 0.005  # 0.5% –º–∏–Ω–∏–º—É–º
            max_sl_distance = entry_price * 0.03   # 3% –º–∞–∫—Å–∏–º—É–º

            if not atr or atr <= 0:
                # –ï—Å–ª–∏ ATR –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å 1% —Ü–µ–Ω—ã
                atr = entry_price * 0.01

            if side in ['BUY', PositionSide.LONG]:
                # –†–∞—Å—á–µ—Ç SL —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                raw_sl = entry_price - (atr * sl_multiplier)
                stop_loss = max(raw_sl, entry_price - max_sl_distance)
                stop_loss = min(stop_loss, entry_price - min_sl_distance)
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞
                if self.config.dynamic_tp:
                    resistance_levels = LevelsFinder.find_swing_levels(df, lookback=20)
                    resistance = self._find_nearest_resistance(resistance_levels, entry_price, atr)
                    
                    if resistance:
                        take_profit = resistance
                    else:
                        # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É
                        sl_distance = entry_price - stop_loss
                        take_profit = entry_price + (sl_distance * rr_ratio)
                else:
                    sl_distance = entry_price - stop_loss
                    take_profit = entry_price + (sl_distance * rr_ratio)
                    
            else:  # SELL/SHORT
                raw_sl = entry_price + (atr * sl_multiplier)
                stop_loss = min(raw_sl, entry_price + max_sl_distance)
                stop_loss = max(stop_loss, entry_price + min_sl_distance)
                
                if self.config.dynamic_tp:
                    support_levels = LevelsFinder.find_swing_levels(df, lookback=20)
                    support = self._find_nearest_support(support_levels, entry_price, atr)
                    
                    if support:
                        take_profit = support
                    else:
                        sl_distance = stop_loss - entry_price
                        take_profit = entry_price - (sl_distance * rr_ratio)
                else:
                    sl_distance = stop_loss - entry_price
                    take_profit = entry_price - (sl_distance * rr_ratio)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã
            stop_loss = self.round_price(stop_loss)
            take_profit = self.round_price(take_profit)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
            is_valid, error = self.validate_price_levels(entry_price, stop_loss, take_profit, side)
            if not is_valid:
                self.logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {error}")
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–∞—Å—á–µ—Ç—É
                if side in ['BUY', PositionSide.LONG]:
                    stop_loss = self.round_price(entry_price - (atr * 1.5))
                    take_profit = self.round_price(entry_price + (atr * 2.0))
                else:
                    stop_loss = self.round_price(entry_price + (atr * 1.5))
                    take_profit = self.round_price(entry_price - (atr * 2.0))
            
            return stop_loss, take_profit
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback
            if side in ['BUY', PositionSide.LONG]:
                return entry_price * 0.99, entry_price * 1.02  # 1% SL, 2% TP
            else:
                return entry_price * 1.01, entry_price * 0.98  # 1% SL, 2% TP
    
    def _find_nearest_resistance(self, levels: List, entry_price: float, atr: float) -> Optional[float]:
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            suitable_levels = [
                level.price for level in levels 
                if (level.level_type.value in ['resistance', 'pivot'] and 
                    entry_price < level.price <= entry_price + (atr * 4))
            ]
            return min(suitable_levels) if suitable_levels else None
        except:
            return None
    
    def _find_nearest_support(self, levels: List, entry_price: float, atr: float) -> Optional[float]:
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            suitable_levels = [
                level.price for level in levels 
                if (level.level_type.value in ['support', 'pivot'] and 
                    entry_price > level.price >= entry_price - (atr * 4))
            ]
            return max(suitable_levels) if suitable_levels else None
        except:
            return None
    
    def should_exit_position(self, market_data, state, current_price: float) -> Optional[Dict[str, Any]]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        
        Returns:
            Dict —Å —Å–∏–≥–Ω–∞–ª–æ–º –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ None
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ (—Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø + –≤—Ä–µ–º—è)
            df = self.get_primary_dataframe(market_data)
            if df is None:
                return None
            
            base_exit = self.should_exit_position_base(df, state, current_price)
            if base_exit:
                return base_exit
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)
            strategic_exit = self._check_strategic_exit_conditions(market_data, state, current_price)
            if strategic_exit:
                return strategic_exit
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None
    
    def _check_strategic_exit_conditions(self, market_data, state, current_price: float) -> Optional[Dict[str, Any]]:
        """
        –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)
        """
        return None
    
    def create_signal(self, signal_type: str, entry_price: float, stop_loss: float, 
                     take_profit: float, indicators: Dict, confluence_factors: List[str],
                     signal_strength: float, symbol: str = 'BTCUSDT', 
                     additional_data: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ ('BUY' –∏–ª–∏ 'SELL')
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            indicators: –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            confluence_factors: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            signal_strength: –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Returns:
            –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        """
        try:
            # –†–∞—Å—á–µ—Ç R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
            if signal_type in ['BUY', SignalType.BUY]:
                risk = entry_price - stop_loss
                reward = take_profit - entry_price
            else:
                risk = stop_loss - entry_price
                reward = entry_price - take_profit
            
            actual_rr = reward / risk if risk > 0 else 0
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞
            signal = {
                'symbol': symbol,
                'signal': signal_type,
                'entry_price': self.round_price(entry_price),
                'stop_loss': self.round_price(stop_loss),
                'take_profit': self.round_price(take_profit),
                'signal_strength': min(max(signal_strength, 0.0), 1.0),
                'risk_reward_ratio': actual_rr,
                'confluence_count': len(confluence_factors),
                'confluence_factors': confluence_factors,
                'market_regime': self.current_market_regime.value,
                'timestamp': datetime.now(timezone.utc).isoformat(),
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                'strategy': self.strategy_name,
                'strategy_version': self.strategy_version,
                
                # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                'indicators': {k: float(v) if isinstance(v, (int, float, np.number)) else v 
                             for k, v in indicators.items()},
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                'params': {
                    'stop_loss_atr_multiplier': self.config.stop_loss_atr_multiplier,
                    'risk_reward_ratio': self.config.risk_reward_ratio,
                    'signal_strength_threshold': self.config.signal_strength_threshold,
                    'confluence_required': self.config.confluence_required,
                    'adaptive_parameters': self.config.adaptive_parameters
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if additional_data:
                signal.update(additional_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            signal['comment'] = self._generate_signal_comment(signal_type, signal_strength, actual_rr, len(confluence_factors))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.signals_generated += 1
            self._last_signal_time = datetime.now(timezone.utc)
            
            return signal
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return {}
    
    def _generate_signal_comment(self, signal_type: str, strength: float, rr: float, confluence: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å–∏–≥–Ω–∞–ª—É"""
        direction = "–õ–æ–Ω–≥" if signal_type in ['BUY', SignalType.BUY] else "–®–æ—Ä—Ç"
        return f"{direction} –≤—Ö–æ–¥ (—Å–∏–ª–∞: {strength:.2f}, R:R: {rr:.2f}, confluence: {confluence})"
    
    def pre_execution_check(self, market_data, state) -> Tuple[bool, str]:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Returns:
            Tuple (can_execute, reason)
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not self.is_active:
                return False, "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            is_valid, error = self.validate_market_data(market_data)
            if not is_valid:
                return False, f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {error}"
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            if self._last_signal_time:
                time_since_last = datetime.now(timezone.utc) - self._last_signal_time
                min_interval = getattr(self.config, 'min_signal_interval_minutes', 1)
                if time_since_last.total_seconds() < min_interval * 60:
                    return False, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã (< {min_interval}–º)"
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(self.config, 'max_daily_signals'):
                session_stats = self.get_session_summary()
                if session_stats.get('signals_generated', 0) >= self.config.max_daily_signals:
                    return False, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤"
            
            return True, "–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
    
    def post_execution_tasks(self, signal_result: Optional[Dict], market_data, state):
        """
        –ó–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            signal_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            self._execution_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            if self._execution_count % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
                df = self.get_primary_dataframe(market_data)
                if df is not None:
                    market_analysis = self.analyze_current_market(df)
                    self._market_analysis_cache = market_analysis
                    
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
                    if self.config.adaptive_parameters:
                        condition = market_analysis.get('condition')
                        if condition:
                            self._adaptive_params = self.adapt_strategy_parameters(condition)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –±—ã–ª —Å–∏–≥–Ω–∞–ª
            if signal_result:
                self.log_signal_generation(signal_result, {'execution_count': self._execution_count})
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
            if len(self._indicator_cache) > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                oldest_keys = list(self._indicator_cache.keys())[:5]
                for key in oldest_keys:
                    del self._indicator_cache[key]
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    # =========================================================================
    # –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–û–î–´
    # =========================================================================
    
    def get_strategy_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'name': self.strategy_name,
            'version': self.strategy_version,
            'is_active': self.is_active,
            'current_regime': self.current_market_regime.value,
            'execution_count': self._execution_count,
            'last_signal_time': self._last_signal_time.isoformat() if self._last_signal_time else None,
            'config_summary': {
                'risk_reward_ratio': self.config.risk_reward_ratio,
                'stop_loss_atr_multiplier': self.config.stop_loss_atr_multiplier,
                'signal_strength_threshold': self.config.signal_strength_threshold,
                'adaptive_parameters': self.config.adaptive_parameters,
                'confluence_required': self.config.confluence_required
            },
            'performance': self.get_performance_metrics(),
            'adaptive_params': self._adaptive_params
        }
    
    def get_strategy_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        base_stats = {
            'strategy_name': self.strategy_name,
            'version': self.strategy_version,
            'signals_generated': self.signals_generated,
            'signals_executed': self.signals_executed,
            'last_signal_time': self._last_signal_time.isoformat() if self._last_signal_time else None,
            'current_market_regime': self.current_market_regime.value,
            'execution_count': self._execution_count,
            'is_active': self.is_active
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance = self.get_performance_metrics()
        base_stats.update(performance)
        
        return base_stats
    
    def get_current_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if not self.is_active:
                return "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            performance = self.get_performance_metrics()
            total_trades = performance.get('total_trades', 0)
            win_rate = performance.get('win_rate', 0)
            
            if total_trades == 0:
                return f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞ | –†–µ–∂–∏–º: {self.current_market_regime.value} | –°–∏–≥–Ω–∞–ª–æ–≤: {self.signals_generated}"
            else:
                return f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞ | –°–¥–µ–ª–æ–∫: {total_trades} | –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}% | –†–µ–∂–∏–º: {self.current_market_regime.value}"
                
        except Exception as e:
            return f"‚ùì –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    # =========================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ï–ô
    # =========================================================================
    
    def activate(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.is_active = True
        self.logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    
    def deactivate(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.is_active = False
        self.logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    
    def update_config(self, new_config: BaseStrategyConfig):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            new_config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        try:
            old_config = self.config
            self.config = new_config
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —É—Ä–æ–≤–µ–Ω—å
            if old_config.log_level != new_config.log_level:
                self.logger.setLevel(getattr(logging, new_config.log_level.value))
            
            self.logger.info(f"üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.strategy_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.reset_statistics()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            self._indicator_cache.clear()
            self._market_analysis_cache.clear()
            self._adaptive_params.clear()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            self._execution_count = 0
            self._last_signal_time = None
            self._cache_timestamp = None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
            self.current_market_regime = MarketRegime.NORMAL
            
            self.logger.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.strategy_name} —Å–±—Ä–æ—à–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    # =========================================================================
    # –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
    # =========================================================================
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        status = "üü¢" if self.is_active else "üî¥"
        return f"{status} {self.strategy_name} v{self.strategy_version} | –°–∏–≥–Ω–∞–ª–æ–≤: {self.signals_generated} | –†–µ–∂–∏–º: {self.current_market_regime.value}"
    
    def __repr__(self) -> str:
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"BaseStrategy(name='{self.strategy_name}', version='{self.strategy_version}', "
                f"active={self.is_active}, signals={self.signals_generated}, "
                f"regime={self.current_market_regime.value})")
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.activate()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if exc_type:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {exc_val}")
        self.deactivate()


# =========================================================================
# –£–¢–ò–õ–ò–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =========================================================================

def create_strategy_instance(strategy_class, config: BaseStrategyConfig, **kwargs):
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Args:
        strategy_class: –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    try:
        if not issubclass(strategy_class, BaseStrategy):
            raise ValueError(f"–ö–ª–∞—Å—Å {strategy_class.__name__} –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseStrategy")
        
        instance = strategy_class(config, **kwargs)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        if hasattr(instance, 'post_init'):
            instance.post_init()
        
        return instance
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        raise


def validate_strategy_implementation(strategy_class) -> Tuple[bool, List[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Args:
        strategy_class: –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        Tuple (is_valid, errors)
    """
    errors = []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        if not issubclass(strategy_class, BaseStrategy):
            errors.append("–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseStrategy")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            'calculate_strategy_indicators',
            'calculate_signal_strength', 
            'check_confluence_factors',
            'execute'
        ]
        
        for method_name in required_methods:
            if not hasattr(strategy_class, method_name):
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ {method_name}")
            elif method_name in strategy_class.__dict__ and getattr(strategy_class.__dict__[method_name], '__isabstractmethod__', False):
                errors.append(f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        if not hasattr(strategy_class, '__init__'):
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä __init__")
        
        return len(errors) == 0, errors
        
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False, errors


# =========================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# =========================================================================

# –í–µ—Ä—Å–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
BASE_STRATEGY_VERSION = "2.0.0"

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
MIN_DATA_REQUIREMENTS = {
    'min_bars': 50,
    'required_columns': ['open', 'high', 'low', 'close'],
    'optional_columns': ['volume']
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
PERFORMANCE_SETTINGS = {
    'cache_timeout_seconds': 60,
    'max_cache_size': 10,
    'market_analysis_interval': 10,  # –ö–∞–∂–¥—ã–µ 10 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    'max_performance_history': 1000
}
