# bot/core/secure_logger.py
"""
üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: –ó–∞—â–∏—â—ë–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
ZERO TOLERANCE –ö –£–¢–ï–ß–ö–ê–ú API –ö–õ–Æ–ß–ï–ô!
–ü–û–õ–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –í–°–ï–• –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–• –î–ê–ù–ù–´–•!
"""

import re
import logging
from typing import Dict, Any, List, Optional, Union
from datetime import datetime
import hashlib
import json

from bot.core.exceptions import APIKeyLeakError


class SecurityFilter(logging.Filter):
    """
    üõ°Ô∏è –§–ò–õ–¨–¢–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –í–°–ï —É—Ç–µ—á–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        super().__init__()
        
        # üîë –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ü–û–ò–°–ö–ê –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–• –î–ê–ù–ù–´–•
        self.sensitive_patterns = [
            # API –∫–ª—é—á–∏
            re.compile(r'["\']?api[_\-]?key["\']?\s*[:=]\s*["\']?([a-zA-Z0-9]{20,})["\']?', re.IGNORECASE),
            re.compile(r'["\']?api[_\-]?secret["\']?\s*[:=]\s*["\']?([a-zA-Z0-9]{20,})["\']?', re.IGNORECASE),
            re.compile(r'["\']?secret["\']?\s*[:=]\s*["\']?([a-zA-Z0-9]{20,})["\']?', re.IGNORECASE),
            
            # Bybit —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–∏  
            re.compile(r'BYBIT_API_KEY\s*[:=]\s*["\']?([a-zA-Z0-9]{20,})["\']?', re.IGNORECASE),
            re.compile(r'BYBIT_API_SECRET\s*[:=]\s*["\']?([a-zA-Z0-9]{20,})["\']?', re.IGNORECASE),
            
            # Telegram —Ç–æ–∫–µ–Ω—ã
            re.compile(r'[0-9]{8,10}:[a-zA-Z0-9_-]{35}'),  # Telegram Bot Token format
            re.compile(r'TELEGRAM_TOKEN\s*[:=]\s*["\']?([0-9]{8,10}:[a-zA-Z0-9_-]{35})["\']?', re.IGNORECASE),
            
            # –ü–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            re.compile(r'["\']?sign["\']?\s*[:=]\s*["\']?([a-fA-F0-9]{64})["\']?', re.IGNORECASE),
            re.compile(r'signature\s*[:=]\s*["\']?([a-fA-F0-9]{64})["\']?', re.IGNORECASE),
            
            # –ü–∞—Ä–æ–ª–∏
            re.compile(r'["\']?password["\']?\s*[:=]\s*["\']?([^\s"\']{8,})["\']?', re.IGNORECASE),
            re.compile(r'["\']?passwd["\']?\s*[:=]\s*["\']?([^\s"\']{8,})["\']?', re.IGNORECASE),
            
            # JWT —Ç–æ–∫–µ–Ω—ã
            re.compile(r'eyJ[a-zA-Z0-9_-]*\.eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*'),
            
            # Private keys
            re.compile(r'-----BEGIN (?:RSA )?PRIVATE KEY-----.*?-----END (?:RSA )?PRIVATE KEY-----', re.DOTALL),
        ]
        
        # üîç –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –ü–û–ò–°–ö–ê
        self.sensitive_keywords = [
            'api_key', 'api_secret', 'secret', 'password', 'token', 'key', 
            'signature', 'sign', 'auth', 'credential', 'private'
        ]
        
        # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• –£–¢–ï–ß–ï–ö
        self.blocked_leaks = 0
        self.leak_types = {}
        
    def filter(self, record: logging.LogRecord) -> bool:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥ –∑–∞–ø–∏—Å–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(record, 'msg') and record.msg:
                original_msg = str(record.msg)
                filtered_msg, leak_found = self._filter_sensitive_data(original_msg)
                
                if leak_found:
                    self.blocked_leaks += 1
                    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ
                    record.msg = filtered_msg
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —É—Ç–µ—á–∫–∏ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                    leak_hash = hashlib.md5(original_msg.encode()).hexdigest()[:8]
                    self._log_leak_attempt(record, leak_hash)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if hasattr(record, 'args') and record.args:
                filtered_args = []
                for arg in record.args:
                    if isinstance(arg, (str, bytes)):
                        filtered_arg, _ = self._filter_sensitive_data(str(arg))
                        filtered_args.append(filtered_arg)
                    elif isinstance(arg, dict):
                        filtered_args.append(self._filter_dict(arg))
                    else:
                        filtered_args.append(arg)
                record.args = tuple(filtered_args)
            
            return True  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é)
            
        except Exception as e:
            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
            print(f"[SECURITY ERROR] –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return False
    
    def _filter_sensitive_data(self, text: str) -> tuple[str, bool]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        filtered_text = text
        leak_found = False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        for pattern in self.sensitive_patterns:
            matches = pattern.findall(filtered_text)
            if matches:
                leak_found = True
                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
                for match in matches:
                    if isinstance(match, tuple):
                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –∑–∞—Ö–≤–∞—Ç–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
                        sensitive_value = match[0] if len(match) > 0 else str(match)
                    else:
                        sensitive_value = str(match)
                    
                    if len(sensitive_value) > 8:
                        masked_value = f"{sensitive_value[:2]}{'*' * (len(sensitive_value) - 4)}{sensitive_value[-2:]}"
                    else:
                        masked_value = '*' * len(sensitive_value)
                    
                    filtered_text = filtered_text.replace(sensitive_value, f"[MASKED:{masked_value}]")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    leak_type = self._identify_leak_type(sensitive_value)
                    self.leak_types[leak_type] = self.leak_types.get(leak_type, 0) + 1
        
        return filtered_text, leak_found
    
    def _filter_dict(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        filtered_dict = {}
        
        for key, value in data.items():
            key_lower = key.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            is_sensitive_key = any(keyword in key_lower for keyword in self.sensitive_keywords)
            
            if is_sensitive_key and isinstance(value, (str, int, float)):
                # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                str_value = str(value)
                if len(str_value) > 8:
                    filtered_dict[key] = f"{str_value[:2]}{'*' * (len(str_value) - 4)}{str_value[-2:]}"
                else:
                    filtered_dict[key] = '*' * len(str_value)
            elif isinstance(value, dict):
                filtered_dict[key] = self._filter_dict(value)
            elif isinstance(value, list):
                filtered_dict[key] = [
                    self._filter_dict(item) if isinstance(item, dict) 
                    else item for item in value
                ]
            else:
                filtered_dict[key] = value
                
        return filtered_dict
    
    def _identify_leak_type(self, sensitive_value: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Ç–µ—á–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
        if len(sensitive_value) == 64 and all(c in '0123456789abcdefABCDEF' for c in sensitive_value):
            return 'signature'
        elif ':' in sensitive_value and len(sensitive_value) > 40:
            return 'telegram_token'
        elif len(sensitive_value) > 30:
            return 'api_key_or_secret'
        else:
            return 'unknown'
    
    def _log_leak_attempt(self, record: logging.LogRecord, leak_hash: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —É—Ç–µ—á–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è security —Å–æ–±—ã—Ç–∏–π
        security_logger = logging.getLogger('security_audit')
        
        if not security_logger.hasHandlers():
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π handler –¥–ª—è security –ª–æ–≥–æ–≤
            import os
            log_dir = 'data/logs'
            os.makedirs(log_dir, exist_ok=True)
            
            handler = logging.FileHandler(os.path.join(log_dir, 'security_audit.log'))
            handler.setFormatter(logging.Formatter(
                '%(asctime)s - SECURITY LEAK BLOCKED - %(message)s'
            ))
            security_logger.addHandler(handler)
            security_logger.setLevel(logging.WARNING)
        
        security_logger.warning(
            f"BLOCKED API KEY LEAK - Logger: {record.name}, "
            f"Function: {record.funcName}, Line: {record.lineno}, "
            f"Hash: {leak_hash}, Time: {datetime.now().isoformat()}"
        )


class SecureLogger:
    """
    üõ°Ô∏è –ó–ê–©–ò–©–Å–ù–ù–´–ô –õ–û–ì–ì–ï–† –î–õ–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –≤—Å–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    
    def __init__(self, name: str):
        self.logger = logging.getLogger(name)
        self.security_filter = SecurityFilter()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ –≤—Å–µ–º handlers
        for handler in self.logger.handlers:
            handler.addFilter(self.security_filter)
        
        # –ï—Å–ª–∏ —É –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç handlers, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ root logger
        if not self.logger.handlers:
            root_logger = logging.getLogger()
            for handler in root_logger.handlers:
                if self.security_filter not in handler.filters:
                    handler.addFilter(self.security_filter)
    
    def safe_log_api_response(self, response: Optional[Dict[str, Any]], 
                             success_msg: str, error_msg: str, level: str = 'info') -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–≤–µ—Ç–æ–≤"""
        if response and response.get('retCode') == 0:
            # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è
            safe_result = {
                'retCode': response.get('retCode'),
                'success': True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è –∏–∑ result
            if 'result' in response and isinstance(response['result'], dict):
                for safe_field in ['orderId', 'symbol', 'side', 'qty', 'status', 'orderType']:
                    if safe_field in response['result']:
                        safe_result[safe_field] = response['result'][safe_field]
            
            getattr(self.logger, level)(f"{success_msg}: {safe_result}")
        else:
            # –û—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            safe_error = {
                'retCode': response.get('retCode') if response else None,
                'retMsg': response.get('retMsg') if response else 'No response'
            }
            self.logger.error(f"{error_msg}: {safe_error}")
    
    def safe_log_order_request(self, symbol: str, side: str, order_type: str, qty: float, 
                              price: Optional[float] = None) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        safe_request = {
            'symbol': symbol,
            'side': side,
            'orderType': order_type,
            'qty': qty
        }
        if price:
            safe_request['price'] = price
        
        self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {safe_request}")
    
    def safe_log_position_update(self, symbol: str, side: Optional[str], size: float, 
                                avg_price: float, unrealized_pnl: float) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        safe_position = {
            'symbol': symbol,
            'side': side,
            'size': size,
            'avgPrice': avg_price,
            'unrealizedPnl': round(unrealized_pnl, 2)
        }
        
        self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {safe_position}")
    
    def get_security_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ç–µ—á–µ–∫"""
        return {
            'blocked_leaks_total': self.security_filter.blocked_leaks,
            'leak_types': self.security_filter.leak_types.copy(),
            'filter_active': True
        }
    
    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–≥–µ—Ä–∞
    def debug(self, msg, *args, **kwargs):
        self.logger.debug(msg, *args, **kwargs)
    
    def info(self, msg, *args, **kwargs):
        self.logger.info(msg, *args, **kwargs)
    
    def warning(self, msg, *args, **kwargs):
        self.logger.warning(msg, *args, **kwargs)
    
    def error(self, msg, *args, **kwargs):
        self.logger.error(msg, *args, **kwargs)
    
    def critical(self, msg, *args, **kwargs):
        self.logger.critical(msg, *args, **kwargs)


def get_secure_logger(name: str) -> SecureLogger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
    return SecureLogger(name)


def setup_security_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π security filter
    security_filter = SecurityFilter()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º loggers
    for logger_name in logging.Logger.manager.loggerDict:
        logger = logging.getLogger(logger_name)
        for handler in logger.handlers:
            if security_filter not in handler.filters:
                handler.addFilter(security_filter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ root logger
    root_logger = logging.getLogger()
    for handler in root_logger.handlers:
        if security_filter not in handler.filters:
            handler.addFilter(security_filter)
    
    print("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    return security_filter


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
_security_filter = setup_security_logging()