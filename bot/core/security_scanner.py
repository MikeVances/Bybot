# bot/core/security_scanner.py
"""
üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: Security Scanner
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –£–¢–ï–ß–ï–ö API –ö–õ–Æ–ß–ï–ô –í –ö–û–î–ï
ZERO TOLERANCE –ö –ö–û–ú–ü–†–û–ú–ï–¢–ê–¶–ò–ò!
"""

import os
import re
import hashlib
import json
from typing import List, Dict, Any, Tuple, Optional
from datetime import datetime
from pathlib import Path
import ast

from bot.core.exceptions import APIKeyLeakError


class SecurityScanner:
    """
    üîç –°–ö–ê–ù–ï–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –£–¢–ï–ß–ï–ö
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
    - –ü–æ–∏—Å–∫ hardcoded –∫–ª—é—á–µ–π
    - –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).absolute()
        self.scan_results = {}
        self.critical_leaks = []
        self.warning_leaks = []
        self.info_notes = []
        
        # üîç –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –£–¢–ï–ß–ï–ö
        self.critical_patterns = [
            # Hardcoded API –∫–ª—é—á–∏
            {
                'name': 'Hardcoded Bybit API Key',
                'pattern': re.compile(r'["\']?(?:BYBIT_)?API_KEY["\']?\s*[:=]\s*["\']([a-zA-Z0-9]{20,})["\']', re.IGNORECASE),
                'severity': 'CRITICAL',
                'description': 'Hardcoded Bybit API key found'
            },
            {
                'name': 'Hardcoded Bybit API Secret',
                'pattern': re.compile(r'["\']?(?:BYBIT_)?API_SECRET["\']?\s*[:=]\s*["\']([a-zA-Z0-9]{20,})["\']', re.IGNORECASE),
                'severity': 'CRITICAL', 
                'description': 'Hardcoded Bybit API secret found'
            },
            {
                'name': 'Hardcoded Telegram Token',
                'pattern': re.compile(r'["\']([0-9]{8,10}:[a-zA-Z0-9_-]{35})["\']'),
                'severity': 'CRITICAL',
                'description': 'Hardcoded Telegram bot token found'
            },
            # Private keys
            {
                'name': 'Private Key',
                'pattern': re.compile(r'-----BEGIN (?:RSA )?PRIVATE KEY-----.*?-----END (?:RSA )?PRIVATE KEY-----', re.DOTALL),
                'severity': 'CRITICAL',
                'description': 'Private key found in code'
            }
        ]
        
        # ‚ö†Ô∏è –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ü–û–ò–°–ö–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô
        self.warning_patterns = [
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–±—ä–µ–∫—Ç–æ–≤
            {
                'name': 'API Response Logging',
                'pattern': re.compile(r'log(?:ger)?\.(?:info|debug|error)\([^)]*(?:response|api_response|result)[^)]*\)', re.IGNORECASE),
                'severity': 'WARNING',
                'description': 'Potentially unsafe API response logging'
            },
            {
                'name': 'Exception with API Data',
                'pattern': re.compile(r'(?:raise|except)[^:]*(?:api|key|secret|token)', re.IGNORECASE),
                'severity': 'WARNING', 
                'description': 'Exception handling with potential API data exposure'
            },
            {
                'name': 'Print API Data',
                'pattern': re.compile(r'print\([^)]*(?:api|key|secret|token|response)', re.IGNORECASE),
                'severity': 'WARNING',
                'description': 'Print statement with potential API data'
            }
        ]
        
        # üìÅ –§–ê–ô–õ–´ –ò –ü–ê–ü–ö–ò –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
        self.exclude_patterns = [
            r'__pycache__',
            r'\.git',
            r'\.venv',
            r'venv',
            r'\.pytest_cache',
            r'node_modules',
            r'\.DS_Store',
            r'security_scanner\.py',  # –ò—Å–∫–ª—é—á–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª
            r'test_.*\.py$',  # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ
        ]
        
        # üîê –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´ (–ü–†–û–í–ï–†–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
        self.sensitive_files = [
            'config.py', 'config_*.py', 'settings.py', '.env', 
            '*.key', '*.pem', '*.p12', 'secrets/*'
        ]
    
    def scan_project(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —É—Ç–µ—á–∫–∏"""
        print("üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        start_time = datetime.now()
        
        # 1. –°–∫–∞–Ω–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã
        python_files = self._find_python_files()
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
        
        for file_path in python_files:
            self._scan_file(file_path)
        
        # 2. –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        config_files = self._find_config_files()
        print(f"‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(config_files)}")
        
        for file_path in config_files:
            self._scan_config_file(file_path)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É secrets
        self._scan_secrets_directory()
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
        self._analyze_imports()
        
        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        scan_duration = (datetime.now() - start_time).total_seconds()
        
        report = {
            'scan_time': datetime.now().isoformat(),
            'scan_duration_seconds': scan_duration,
            'project_root': str(self.project_root),
            'files_scanned': len(python_files) + len(config_files),
            'critical_leaks': len(self.critical_leaks),
            'warning_leaks': len(self.warning_leaks),
            'info_notes': len(self.info_notes),
            'critical_issues': self.critical_leaks,
            'warnings': self.warning_leaks,
            'information': self.info_notes,
            'recommendations': self._generate_recommendations()
        }
        
        self._save_report(report)
        self._print_summary(report)
        
        return report
    
    def _find_python_files(self) -> List[Path]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        python_files = []
        
        for root, dirs, files in os.walk(self.project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not any(
                re.search(pattern, d) for pattern in self.exclude_patterns
            )]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    relative_path = file_path.relative_to(self.project_root)
                    if not any(re.search(pattern, str(relative_path)) for pattern in self.exclude_patterns):
                        python_files.append(file_path)
        
        return python_files
    
    def _find_config_files(self) -> List[Path]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        config_files = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern in self.sensitive_files:
            for file_path in self.project_root.rglob(pattern):
                if file_path.is_file():
                    config_files.append(file_path)
        
        return config_files
    
    def _scan_file(self, file_path: Path) -> None:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            relative_path = file_path.relative_to(self.project_root)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern_info in self.critical_patterns:
                matches = pattern_info['pattern'].findall(content)
                if matches:
                    for match in matches:
                        leak = {
                            'file': str(relative_path),
                            'type': pattern_info['name'],
                            'severity': pattern_info['severity'],
                            'description': pattern_info['description'],
                            'line': self._find_line_number(content, match if isinstance(match, str) else match[0]),
                            'leak_hash': hashlib.md5(f"{file_path}:{match}".encode()).hexdigest()[:8]
                        }
                        self.critical_leaks.append(leak)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            for pattern_info in self.warning_patterns:
                matches = pattern_info['pattern'].finditer(content)
                for match in matches:
                    leak = {
                        'file': str(relative_path),
                        'type': pattern_info['name'],
                        'severity': pattern_info['severity'],
                        'description': pattern_info['description'],
                        'line': content[:match.start()].count('\n') + 1,
                        'code_snippet': match.group().strip()
                    }
                    self.warning_leaks.append(leak)
            
            # AST –∞–Ω–∞–ª–∏–∑ –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._analyze_ast(file_path, content)
            
        except Exception as e:
            self.info_notes.append({
                'file': str(file_path.relative_to(self.project_root)),
                'type': 'Scan Error',
                'description': f'–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}'
            })
    
    def _analyze_ast(self, file_path: Path, content: str) -> None:
        """AST –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —É—Ç–µ—á–µ–∫"""
        try:
            tree = ast.parse(content)
            
            class SecurityVisitor(ast.NodeVisitor):
                def __init__(self, scanner, file_path):
                    self.scanner = scanner
                    self.file_path = file_path
                
                def visit_Assign(self, node):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
                    for target in node.targets:
                        if isinstance(target, ast.Name):
                            name = target.id.lower()
                            if any(keyword in name for keyword in ['key', 'secret', 'token', 'password']):
                                if isinstance(node.value, ast.Str):
                                    # –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                    if len(node.value.s) > 10:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                                        leak = {
                                            'file': str(self.file_path.relative_to(self.scanner.project_root)),
                                            'type': 'Suspicious Variable Assignment',
                                            'severity': 'WARNING',
                                            'description': f'Suspicious assignment to variable "{target.id}"',
                                            'line': node.lineno
                                        }
                                        self.scanner.warning_leaks.append(leak)
                    self.generic_visit(node)
                
                def visit_Call(self, node):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    if isinstance(node.func, ast.Attribute):
                        if node.func.attr in ['info', 'debug', 'error', 'warning']:
                            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ logger
                            for arg in node.args:
                                if isinstance(arg, ast.JoinedStr):  # f-string
                                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º f-string –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    for value in arg.values:
                                        if isinstance(value, ast.FormattedValue):
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ f-string
                                            pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
                    self.generic_visit(node)
            
            visitor = SecurityVisitor(self, file_path)
            visitor.visit(tree)
            
        except SyntaxError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
            pass
        except Exception as e:
            self.info_notes.append({
                'file': str(file_path.relative_to(self.project_root)),
                'type': 'AST Analysis Error',
                'description': f'–û—à–∏–±–∫–∞ AST –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'
            })
    
    def _scan_config_file(self, file_path: Path) -> None:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # –û—Å–æ–±–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for pattern_info in self.critical_patterns + self.warning_patterns:
                matches = pattern_info['pattern'].findall(content)
                if matches:
                    for match in matches:
                        leak = {
                            'file': str(file_path.relative_to(self.project_root)),
                            'type': f"Config File: {pattern_info['name']}",
                            'severity': 'CRITICAL',  # –í—Å–µ —É—Ç–µ—á–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                            'description': f"Configuration file contains: {pattern_info['description']}",
                            'line': self._find_line_number(content, match if isinstance(match, str) else match[0])
                        }
                        self.critical_leaks.append(leak)
                        
        except Exception as e:
            self.info_notes.append({
                'file': str(file_path.relative_to(self.project_root)),
                'type': 'Config Scan Error',
                'description': f'–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}'
            })
    
    def _scan_secrets_directory(self) -> None:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ secrets"""
        secrets_dir = self.project_root / 'secrets'
        
        if secrets_dir.exists():
            self.critical_leaks.append({
                'file': 'secrets/',
                'type': 'Secrets Directory Exists',
                'severity': 'CRITICAL',
                'description': 'Directory "secrets/" exists and may contain sensitive data',
                'line': 0,
                'recommendation': 'Remove secrets directory from repository and use environment variables'
            })
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ secrets
            for file_path in secrets_dir.rglob('*'):
                if file_path.is_file():
                    self.critical_leaks.append({
                        'file': str(file_path.relative_to(self.project_root)),
                        'type': 'Secrets File',
                        'severity': 'CRITICAL', 
                        'description': 'File in secrets directory - potential API keys exposure',
                        'line': 0
                    })
    
    def _analyze_imports(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ config –º–æ–¥—É–ª–µ–π –∏ —Ç.–¥.
        pass
    
    def _find_line_number(self, content: str, search_text: str) -> int:
        """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
        try:
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if search_text in line:
                    return i + 1
            return 0
        except:
            return 0
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        recommendations = []
        
        if self.critical_leaks:
            recommendations.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã!")
            recommendations.append("üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("üìÅ –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ .gitignore")
            
        if any(leak['type'] == 'Secrets Directory Exists' for leak in self.critical_leaks):
            recommendations.append("üóÇÔ∏è –£–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É secrets/ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
            recommendations.append("üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ (HashiCorp Vault, AWS Secrets Manager)")
            
        if self.warning_leaks:
            recommendations.append("‚ö†Ô∏è –í–Ω–µ–¥—Ä–∏—Ç–µ secure_logger –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("üîç –ü—Ä–æ–≤–µ–¥–∏—Ç–µ code review –≤—Å–µ—Ö –º–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö")
            
        recommendations.extend([
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ pre-commit hooks –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤",
            "üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SecureLogger –¥–ª—è –≤—Å–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ security scanner",
            "üîÑ –†–æ—Ç–∏—Ä—É–π—Ç–µ API –∫–ª—é—á–∏ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π"
        ])
        
        return recommendations
    
    def _save_report(self, report: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–∞–π–ª"""
        reports_dir = self.project_root / 'data' / 'security_reports'
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = reports_dir / f"security_scan_{timestamp}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")
    
    def _print_summary(self, report: Dict[str, Any]) -> None:
        """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        print("\n" + "="*60)
        print("üîç –û–¢–ß–Å–¢ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*60)
        
        print(f"üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {report['files_scanned']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {report['scan_duration_seconds']:.2f} —Å–µ–∫")
        
        if report['critical_leaks'] > 0:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–¢–ï–ß–ö–ò: {report['critical_leaks']}")
            for leak in report['critical_issues'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   üíÄ {leak['file']}:{leak.get('line', 0)} - {leak['type']}")
        
        if report['warning_leaks'] > 0:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {report['warning_leaks']}")
            
        if report['critical_leaks'] == 0 and report['warning_leaks'] == 0:
            print("\n‚úÖ –£–¢–ï–ß–ï–ö –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!")
        
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in report['recommendations'][:3]:
            print(f"   {rec}")
        
        print("="*60)


def scan_for_api_leaks(project_root: str = ".") -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ç–µ—á–∫–∏ API –∫–ª—é—á–µ–π"""
    scanner = SecurityScanner(project_root)
    return scanner.scan_project()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üîç –ó–∞–ø—É—Å–∫ Security Scanner...")
    result = scan_for_api_leaks()
    
    if result['critical_leaks'] > 0:
        print("\nüíÄ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–¢–ï–ß–ö–ò! –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
        exit(1)
    else:
        print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–µ—á–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        exit(0)