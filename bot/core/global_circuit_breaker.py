"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤ API
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
"""

import threading
import time
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class CircuitBreakerState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
    CLOSED = "CLOSED"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "OPEN"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    HALF_OPEN = "HALF_OPEN"  # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã


@dataclass
class APIErrorStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ API"""
    total_errors: int = 0
    consecutive_errors: int = 0
    last_error_time: Optional[datetime] = None
    error_rate_1min: float = 0.0
    error_rate_5min: float = 0.0
    recent_errors: List[datetime] = None

    def __post_init__(self):
        if self.recent_errors is None:
            self.recent_errors = []


class GlobalCircuitBreaker:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π Circuit Breaker –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
    –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
    """

    def __init__(self):
        self.state = CircuitBreakerState.CLOSED
        self.failure_threshold = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        self.recovery_timeout = 300  # 5 –º–∏–Ω—É—Ç –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.success_threshold = 3   # –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.api_stats = APIErrorStats()
        self.consecutive_successes = 0
        self.state_change_time = datetime.now()

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._lock = threading.RLock()
        self._state_lock = threading.Lock()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitoring_thread = None
        self.monitoring_active = False

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫"""
        if self.monitoring_active:
            return

        self.monitoring_active = True
        self.monitoring_thread = threading.Thread(
            target=self._monitoring_loop,
            daemon=True,
            name="CircuitBreakerMonitor"
        )
        self.monitoring_thread.start()
        logger.info("üîå Circuit Breaker –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = False
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=5)

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring_active:
            try:
                self._cleanup_old_errors()
                self._update_error_rates()
                self._check_state_transitions()

                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Circuit Breaker –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(5)

    def _cleanup_old_errors(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        with self._lock:
            cutoff_time = datetime.now() - timedelta(minutes=5)
            self.api_stats.recent_errors = [
                error_time for error_time in self.api_stats.recent_errors
                if error_time > cutoff_time
            ]

    def _update_error_rates(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫"""
        with self._lock:
            now = datetime.now()

            # –û—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            one_min_ago = now - timedelta(minutes=1)
            errors_1min = sum(1 for error_time in self.api_stats.recent_errors
                            if error_time > one_min_ago)
            self.api_stats.error_rate_1min = errors_1min

            # –û—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            five_min_ago = now - timedelta(minutes=5)
            errors_5min = sum(1 for error_time in self.api_stats.recent_errors
                            if error_time > five_min_ago)
            self.api_stats.error_rate_5min = errors_5min / 5.0  # –°—Ä–µ–¥–Ω–µ–µ –≤ –º–∏–Ω—É—Ç—É

    def _check_state_transitions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._state_lock:
            now = datetime.now()
            time_since_change = (now - self.state_change_time).total_seconds()

            if self.state == CircuitBreakerState.OPEN:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ HALF_OPEN –ø–æ—Å–ª–µ timeout
                if time_since_change >= self.recovery_timeout:
                    self._change_state(CircuitBreakerState.HALF_OPEN)
                    logger.warning("üî∂ Circuit Breaker: OPEN ‚Üí HALF_OPEN (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")

    def _change_state(self, new_state: CircuitBreakerState):
        """–°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
        old_state = self.state
        self.state = new_state
        self.state_change_time = datetime.now()

        if old_state != new_state:
            logger.critical(f"üîå Circuit Breaker: {old_state.value} ‚Üí {new_state.value}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º Emergency Stop –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if new_state == CircuitBreakerState.OPEN:
                global_emergency_stop.report_api_error()

    def can_execute_request(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å

        Returns:
            Tuple[bool, str]: (–º–æ–∂–Ω–æ_–≤—ã–ø–æ–ª–Ω–∏—Ç—å, –ø—Ä–∏—á–∏–Ω–∞_–µ—Å–ª–∏_–Ω–µ—Ç)
        """
        with self._state_lock:
            if self.state == CircuitBreakerState.CLOSED:
                return True, "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"

            elif self.state == CircuitBreakerState.OPEN:
                return False, f"üî¥ Circuit Breaker –û–¢–ö–†–´–¢: {self.api_stats.consecutive_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥"

            elif self.state == CircuitBreakerState.HALF_OPEN:
                # –í –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                return True, "üî∂ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"

            return False, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

    def record_success(self):
        """–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π API –∑–∞–ø—Ä–æ—Å"""
        with self._lock:
            self.consecutive_successes += 1
            self.api_stats.consecutive_errors = 0

            # –£–≤–µ–¥–æ–º–ª—è–µ–º Emergency Stop –æ–± —É—Å–ø–µ—Ö–µ
            global_emergency_stop.report_api_success()

            with self._state_lock:
                if self.state == CircuitBreakerState.HALF_OPEN:
                    if self.consecutive_successes >= self.success_threshold:
                        self._change_state(CircuitBreakerState.CLOSED)
                        self.consecutive_successes = 0
                        logger.info("‚úÖ Circuit Breaker: HALF_OPEN ‚Üí CLOSED (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")

    def record_failure(self, error_type: str = "API_ERROR"):
        """
        –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É API –∑–∞–ø—Ä–æ—Å–∞

        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        with self._lock:
            now = datetime.now()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.api_stats.total_errors += 1
            self.api_stats.consecutive_errors += 1
            self.api_stats.last_error_time = now
            self.api_stats.recent_errors.append(now)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—Ö–æ–≤
            self.consecutive_successes = 0

            logger.warning(f"‚ö†Ô∏è API –æ—à–∏–±–∫–∞ #{self.api_stats.consecutive_errors}: {error_type}")

            with self._state_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –æ—à–∏–±–æ–∫
                if (self.state == CircuitBreakerState.CLOSED and
                    self.api_stats.consecutive_errors >= self.failure_threshold):

                    self._change_state(CircuitBreakerState.OPEN)
                    logger.critical(f"üî¥ Circuit Breaker –û–¢–ö–†–´–¢: {self.api_stats.consecutive_errors} –æ—à–∏–±–æ–∫")

                elif self.state == CircuitBreakerState.HALF_OPEN:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ OPEN –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                    self._change_state(CircuitBreakerState.OPEN)
                    logger.warning("üî∂ Circuit Breaker: HALF_OPEN ‚Üí OPEN (–æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ)")

    def force_open(self, reason: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å Circuit Breaker

        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
        """
        with self._state_lock:
            self._change_state(CircuitBreakerState.OPEN)
            logger.critical(f"üö® Circuit Breaker –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–¢–ö–†–´–¢: {reason}")

    def reset(self, admin_confirmation: bool = False):
        """
        –°–±—Ä–æ—Å Circuit Breaker (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

        Args:
            admin_confirmation: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        if not admin_confirmation:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ Circuit Breaker –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return False

        with self._lock:
            self.api_stats = APIErrorStats()
            self.consecutive_successes = 0

            with self._state_lock:
                self._change_state(CircuitBreakerState.CLOSED)

        logger.warning("üîÑ Circuit Breaker –°–ë–†–û–®–ï–ù –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú")
        return True

    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Circuit Breaker"""
        with self._lock:
            return {
                'state': self.state.value,
                'total_errors': self.api_stats.total_errors,
                'consecutive_errors': self.api_stats.consecutive_errors,
                'consecutive_successes': self.consecutive_successes,
                'error_rate_1min': self.api_stats.error_rate_1min,
                'error_rate_5min': self.api_stats.error_rate_5min,
                'last_error_time': self.api_stats.last_error_time.isoformat() if self.api_stats.last_error_time else None,
                'state_change_time': self.state_change_time.isoformat(),
                'failure_threshold': self.failure_threshold,
                'recovery_timeout': self.recovery_timeout
            }

    def get_health_check(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã

        Returns:
            Tuple[bool, str]: (–∑–¥–æ—Ä–æ–≤–∞—è, –æ–ø–∏—Å–∞–Ω–∏–µ_—Å–æ—Å—Ç–æ—è–Ω–∏—è)
        """
        with self._lock:
            if self.state == CircuitBreakerState.CLOSED:
                if self.api_stats.error_rate_1min > 3:
                    return False, f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {self.api_stats.error_rate_1min}/–º–∏–Ω"
                return True, "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"

            elif self.state == CircuitBreakerState.HALF_OPEN:
                return False, "üî∂ –°–∏—Å—Ç–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"

            else:  # OPEN
                return False, f"üî¥ –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {self.api_stats.consecutive_errors} –æ—à–∏–±–æ–∫"


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Circuit Breaker
def with_circuit_breaker(circuit_breaker):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Circuit Breaker

    Args:
        circuit_breaker: –≠–∫–∑–µ–º–ø–ª—è—Ä GlobalCircuitBreaker
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            can_execute, reason = circuit_breaker.can_execute_request()

            if not can_execute:
                logger.warning(f"üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Circuit Breaker: {reason}")
                raise Exception(f"Circuit Breaker: {reason}")

            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = func(*args, **kwargs)
                circuit_breaker.record_success()
                return result

            except Exception as e:
                # –§–∏–∫—Å–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                circuit_breaker.record_failure(str(type(e).__name__))
                raise

        return wrapper
    return decorator


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Circuit Breaker
global_circuit_breaker = GlobalCircuitBreaker()