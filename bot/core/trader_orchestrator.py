# bot/core/trader_orchestrator.py
"""
üéº –¢–û–†–ì–û–í–´–ô –û–†–ö–ï–°–¢–†–ê–¢–û–†
–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–º–µ—Å—Ç–æ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
"""

import time
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
import threading

from bot.exchange.api_adapter import create_trading_bot_adapter
from bot.ai import NeuralIntegration
from bot.risk import RiskManager
from config import get_strategy_config, ACTIVE_STRATEGIES, USE_TESTNET

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
ENABLED_STRATEGIES = ACTIVE_STRATEGIES

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from bot.services.notification_service import get_notification_service
from bot.services.market_data_service import get_market_data_service
from bot.services.position_management_service import get_position_service
from bot.services.strategy_execution_service import get_strategy_service

# –ò–º–ø–æ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from bot.core.secure_logger import get_secure_logger
from bot.core.thread_safe_state import get_bot_state


class TradingOrchestrator:
    """
    üéº –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    
    def __init__(self, telegram_bot=None, neural_integration=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            telegram_bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
            neural_integration: –≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        self.logger = get_secure_logger('trading_orchestrator')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.notification_service = get_notification_service(telegram_bot)
        self.market_service = get_market_data_service()
        self.position_service = get_position_service()
        self.strategy_service = get_strategy_service()
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.risk_manager = RiskManager()
        self.neural_integration = neural_integration
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.strategy_apis = {}
        self.strategy_states = {}
        self.strategy_loggers = {}
        
        self.logger.info("üéº –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_strategies(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            self.logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {len(ENABLED_STRATEGIES)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            loaded_strategies = self.strategy_service.load_strategy_modules(ENABLED_STRATEGIES)
            
            if not loaded_strategies:
                self.logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π!")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for strategy_name in ENABLED_STRATEGIES:
                if not self._initialize_strategy_api(strategy_name):
                    continue
            
            if not self.strategy_apis:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏!")
                return False
            
            self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategy_apis)}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return False
    
    def _initialize_strategy_api(self, strategy_name: str) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            config = get_strategy_config(strategy_name)
            
            if not config.get('enabled', True):
                self.logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                return False
            
            # –°–æ–∑–¥–∞–µ–º API –∞–¥–∞–ø—Ç–µ—Ä
            self.strategy_apis[strategy_name] = create_trading_bot_adapter(
                symbol="BTCUSDT",
                api_key=config['api_key'],
                api_secret=config['api_secret'],
                uid=config.get('uid'),
                testnet=USE_TESTNET
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.strategy_states[strategy_name] = BotState()
            
            self.logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {strategy_name}: {e}")
            return False
    
    def run_trading_cycle(self, shutdown_event: threading.Event) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        
        Args:
            shutdown_event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        iteration_count = 0
        last_sync_time = datetime.now()
        
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        
        while not shutdown_event.is_set():
            try:
                iteration_count += 1
                current_time = datetime.now()
                
                self.logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration_count} - {current_time.strftime('%H:%M:%S')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø
                if self.risk_manager.emergency_stop:
                    self.logger.warning("‚õî –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø –∞–∫—Ç–∏–≤–µ–Ω")
                    shutdown_event.wait(60)
                    continue
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
                if self._should_sync_positions(current_time, last_sync_time):
                    self._sync_all_positions()
                    last_sync_time = current_time
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                active_strategies = self._get_active_strategies()
                if not active_strategies:
                    self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                    shutdown_event.wait(60)
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                market_data = self._get_market_data(active_strategies[0])
                if not market_data:
                    self.logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    shutdown_event.wait(30)
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_signals = self._execute_strategies(active_strategies, market_data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
                self._process_signals(strategy_signals, market_data)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
                if self.neural_integration and strategy_signals:
                    self._process_neural_recommendations(market_data, strategy_signals)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                shutdown_event.wait(10)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                shutdown_event.wait(30)
    
    def _should_sync_positions(self, current_time: datetime, last_sync: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π"""
        return (current_time - last_sync).total_seconds() > 300  # 5 –º–∏–Ω—É—Ç
    
    def _sync_all_positions(self) -> None:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π"""
        self.logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π...")
        
        for strategy_name, api in self.strategy_apis.items():
            try:
                state = self.strategy_states[strategy_name]
                self.position_service.sync_position_with_exchange(api, state)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {strategy_name}: {e}")
    
    def _get_active_strategies(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        active_strategies = []
        
        for strategy_name, api in self.strategy_apis.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                if strategy_name in self.risk_manager.blocked_strategies:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                current_balance = self._get_current_balance(api)
                if current_balance >= 10:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    active_strategies.append(strategy_name)
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
        
        return active_strategies
    
    def _get_current_balance(self, api) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance_data = api.get_wallet_balance_v5()
            if balance_data and balance_data.get('retCode') == 0:
                return float(balance_data['result']['list'][0]['totalAvailableBalance'])
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        
        return 0.0
    
    def _get_market_data(self, strategy_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            api = self.strategy_apis[strategy_name]
            market_data = self.market_service.get_all_timeframes_data(api)
            
            if self.market_service.validate_market_data(market_data):
                return market_data
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return None
    
    def _execute_strategies(self, active_strategies: List[str], 
                          market_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return self.strategy_service.execute_all_strategies(
            active_strategies=active_strategies,
            all_market_data=market_data,
            strategy_states=self.strategy_states,
            get_balance_func=lambda name: self._get_current_balance(self.strategy_apis[name])
        )
    
    def _process_signals(self, strategy_signals: Dict[str, Any], 
                        market_data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        current_price = self.market_service.get_current_price(
            list(self.strategy_apis.values())[0]
        )
        
        if not current_price:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
            return
        
        for strategy_name, signal in strategy_signals.items():
            try:
                self._process_single_signal(strategy_name, signal, current_price)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {strategy_name}: {e}")
    
    def _process_single_signal(self, strategy_name: str, signal: Dict[str, Any], 
                             current_price: float) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        signal_type = signal['signal_type']
        api = self.strategy_apis[strategy_name]
        state = self.strategy_states[strategy_name]
        
        if signal_type in ['ENTER_LONG', 'ENTER_SHORT']:
            if state.in_position:
                self.logger.info(f"üìä {strategy_name}: —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            balance = self._get_current_balance(api)
            risk_percent = signal.get('risk_percent', 0.01)
            trade_amount = balance * risk_percent
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            order_response = self.position_service.open_position(
                api, signal, strategy_name, trade_amount, current_price, state
            )
            
            if order_response:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–µ
                self.risk_manager.register_trade(strategy_name, signal, order_response)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if self.notification_service:
                    self.notification_service.send_position_opened(
                        signal_type.replace('ENTER_', ''),
                        strategy_name,
                        signal.get('entry_price', current_price),
                        signal.get('stop_loss', 0),
                        signal.get('take_profit', 0),
                        trade_amount,
                        signal.get('signal_strength'),
                        signal.get('comment', '')
                    )
        
        elif signal_type in ['EXIT_LONG', 'EXIT_SHORT']:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            close_response = self.position_service.close_position(
                api, state, strategy_name, signal_type, current_price
            )
            
            if close_response:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
                self.risk_manager.close_position(
                    strategy_name, "BTCUSDT", 
                    close_response['exit_price'], 
                    close_response['pnl']
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if self.notification_service:
                    self.notification_service.send_position_closed(
                        strategy_name,
                        state.position_side,
                        close_response['exit_price'],
                        close_response['pnl'],
                        state.entry_price,
                        close_response['duration']
                    )
    
    def _process_neural_recommendations(self, market_data: Dict[str, Any], 
                                      strategy_signals: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        try:
            neural_recommendation = self.neural_integration.make_neural_recommendation(
                market_data, strategy_signals
            )
            
            if neural_recommendation:
                self.logger.info(
                    f"üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {neural_recommendation['strategy']} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {neural_recommendation['confidence']:.1%})"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if self.notification_service:
                    self.notification_service.send_neural_recommendation(
                        neural_recommendation['strategy'],
                        neural_recommendation['confidence']
                    )
                
                # –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É
                neural_bet = self.neural_integration.place_neural_bet(market_data, strategy_signals)
                if neural_bet:
                    self.logger.info(f"üé≤ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {neural_bet['bet_id']}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
            self.neural_integration.cleanup_old_bets()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")


def run_trading_bot_orchestrator(telegram_bot=None, shutdown_event=None):
    """
    üéº –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        telegram_bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        shutdown_event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    logger = get_secure_logger('bot_orchestrator')
    
    try:
        # –°–æ–∑–¥–∞–µ–º shutdown_event –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if shutdown_event is None:
            shutdown_event = threading.Event()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        neural_integration = NeuralIntegration()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = TradingOrchestrator(
            telegram_bot=telegram_bot,
            neural_integration=neural_integration
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if not orchestrator.initialize_strategies():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        orchestrator.run_trading_cycle(shutdown_event)
        
        logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if shutdown_event:
            shutdown_event.set()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}")
        raise