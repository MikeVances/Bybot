# bot/core/blocking_alerts.py
"""
üö® –°–ò–°–¢–ï–ú–ê –û–ü–û–í–ï–©–ï–ù–ò–ô –û –ë–õ–û–ö–ò–†–û–í–ö–ï –¢–û–†–ì–û–í–õ–ò
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ö–∞–∂–¥–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ì–†–û–ú–ö–û –æ–∑–≤—É—á–µ–Ω–∞!

–§—É–Ω–∫—Ü–∏–∏:
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –ª—é–±—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
- –≠—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
"""

import threading
import time
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum
import json


class BlockType(Enum):
    """–¢–∏–ø—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    POSITION_CONFLICT = "position_conflict"
    RATE_LIMIT = "rate_limit"
    EMERGENCY_STOP = "emergency_stop"
    DUPLICATE_ORDER = "duplicate_order"
    RISK_LIMIT = "risk_limit"
    API_ERROR = "api_error"
    INSUFFICIENT_BALANCE = "insufficient_balance"
    UNKNOWN = "unknown"


class Severity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
    LOW = "low"           # –ï–¥–∏–Ω–∏—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    MEDIUM = "medium"     # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    HIGH = "high"         # –ú–∞—Å—Å–æ–≤—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    CRITICAL = "critical" # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏


@dataclass
class BlockEvent:
    """–°–æ–±—ã—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    timestamp: datetime
    block_type: BlockType
    severity: Severity
    symbol: str
    strategy: str
    reason: str
    details: Dict[str, Any]
    telegram_sent: bool = False


class BlockingAlertsManager:
    """
    üö® –ú–ï–ù–ï–î–ñ–ï–† –û–ü–û–í–ï–©–ï–ù–ò–ô –û –ë–õ–û–ö–ò–†–û–í–ö–ê–•

    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –≥—Ä–æ–º–∫–æ –æ –Ω–∏—Ö —Å–æ–æ–±—â–∞–µ—Ç!
    """

    def __init__(self, telegram_bot=None):
        self.telegram_bot = telegram_bot
        self.logger = logging.getLogger('blocking_alerts')

        # –ò—Å—Ç–æ—Ä–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.block_events: List[BlockEvent] = []
        self.last_alert_time = {}

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.block_counters = {block_type: 0 for block_type in BlockType}
        self.consecutive_blocks = 0
        self.last_successful_trade = None

        # Thread safety
        self._lock = threading.RLock()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
        self.escalation_threshold = 10  # –≠—Å–∫–∞–ª–∞—Ü–∏—è –ø–æ—Å–ª–µ 10 –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.critical_threshold = 50   # –ö—Ä–∏—Ç–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ 50 –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self._start_monitoring_thread()

        self.logger.info("üö® BlockingAlertsManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±—É–¥—É—Ç –æ–∑–≤—É—á–µ–Ω—ã!")

    def report_block(self, block_type: BlockType, symbol: str, strategy: str,
                    reason: str, details: Dict[str, Any] = None) -> None:
        """
        üö® –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–æ–±—â–∏—Ç—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ

        Args:
            block_type: –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        with self._lock:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
            severity = self._calculate_severity(block_type)

            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = BlockEvent(
                timestamp=datetime.now(timezone.utc),
                block_type=block_type,
                severity=severity,
                symbol=symbol,
                strategy=strategy,
                reason=reason,
                details=details or {}
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.block_events.append(event)
            self.block_counters[block_type] += 1
            self.consecutive_blocks += 1

            # –õ–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            self._log_block_event(event)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self._send_block_notification(event)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
            self._check_escalation()

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.block_events) > 1000:
                self.block_events = self.block_events[-500:]

    def report_successful_trade(self, symbol: str, strategy: str, order_id: str) -> None:
        """–°–æ–æ–±—â–∏—Ç—å –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–µ (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏)"""
        with self._lock:
            self.consecutive_blocks = 0
            self.last_successful_trade = datetime.now(timezone.utc)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –µ—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            if sum(self.block_counters.values()) > 5:
                self._send_recovery_notification(symbol, strategy, order_id)

    def _calculate_severity(self, block_type: BlockType) -> Severity:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""

        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–∏–ø—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        if block_type in [BlockType.EMERGENCY_STOP, BlockType.POSITION_CONFLICT]:
            if self.consecutive_blocks >= self.critical_threshold:
                return Severity.CRITICAL
            elif self.consecutive_blocks >= self.escalation_threshold:
                return Severity.HIGH
            else:
                return Severity.MEDIUM

        # –°—Ä–µ–¥–Ω–∏–µ —Ç–∏–ø—ã
        elif block_type in [BlockType.RATE_LIMIT, BlockType.RISK_LIMIT]:
            if self.consecutive_blocks >= 20:
                return Severity.HIGH
            else:
                return Severity.MEDIUM

        # –ù–∏–∑–∫–∏–µ —Ç–∏–ø—ã
        else:
            return Severity.LOW

    def _log_block_event(self, event: BlockEvent) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        level = {
            Severity.LOW: logging.WARNING,
            Severity.MEDIUM: logging.ERROR,
            Severity.HIGH: logging.CRITICAL,
            Severity.CRITICAL: logging.CRITICAL
        }[event.severity]

        emoji = {
            Severity.LOW: "‚ö†Ô∏è",
            Severity.MEDIUM: "üö´",
            Severity.HIGH: "üö®",
            Severity.CRITICAL: "üíÄ"
        }[event.severity]

        self.logger.log(level, f"{emoji} –ë–õ–û–ö–ò–†–û–í–ö–ê {event.block_type.value.upper()}: "
                             f"{event.strategy} –Ω–∞ {event.symbol} - {event.reason}")

    def _send_block_notification(self, event: BlockEvent) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_bot:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        cooldown_key = f"{event.block_type.value}_{event.symbol}"
        now = datetime.now(timezone.utc)

        if cooldown_key in self.last_alert_time:
            time_diff = (now - self.last_alert_time[cooldown_key]).total_seconds()
            if time_diff < self.alert_cooldown and event.severity != Severity.CRITICAL:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        emoji = {
            Severity.LOW: "‚ö†Ô∏è",
            Severity.MEDIUM: "üö´",
            Severity.HIGH: "üö®",
            Severity.CRITICAL: "üíÄüö®üíÄ"
        }[event.severity]

        severity_text = {
            Severity.LOW: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            Severity.MEDIUM: "–û—à–∏–±–∫–∞",
            Severity.HIGH: "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
            Severity.CRITICAL: "üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø üö®"
        }[event.severity]

        message = f"""
{emoji} {severity_text}

üö´ –¢–û–†–ì–û–í–õ–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê!

üìä –î–µ—Ç–∞–ª–∏:
‚Ä¢ –¢–∏–ø: {event.block_type.value.replace('_', ' ').title()}
‚Ä¢ –°–∏–º–≤–æ–ª: {event.symbol}
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {event.strategy}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {event.reason}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–¥—Ä—è–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {self.consecutive_blocks}
‚Ä¢ –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {sum(self.block_counters.values())}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {self._format_last_trade()}

‚è∞ –í—Ä–µ–º—è: {event.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}
"""

        if event.severity == Severity.CRITICAL:
            message += f"\nüíÄ –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!"
            message += f"\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–∑–∏—Ü–∏–∏"

        try:
            self.telegram_bot.send_admin_message(message)
            event.telegram_sent = True
            self.last_alert_time[cooldown_key] = now

            self.logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

    def _send_recovery_notification(self, symbol: str, strategy: str, order_id: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.telegram_bot:
            return

        total_blocks = sum(self.block_counters.values())

        message = f"""
‚úÖ –¢–û–†–ì–û–í–õ–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!

üéâ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞:
‚Ä¢ –°–∏–º–≤–æ–ª: {symbol}
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}
‚Ä¢ Order ID: {order_id}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:
‚Ä¢ –ë—ã–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {total_blocks}
‚Ä¢ –ü–æ–¥—Ä—è–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {self.consecutive_blocks}
‚Ä¢ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}

üéØ –°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
"""

        try:
            self.telegram_bot.send_admin_message(message)
            self.logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    def _check_escalation(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏"""
        if self.consecutive_blocks >= self.critical_threshold:
            self._send_critical_escalation()
        elif self.consecutive_blocks >= self.escalation_threshold:
            self._send_high_escalation()

    def _send_critical_escalation(self) -> None:
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è"""
        if not self.telegram_bot:
            return

        message = f"""
üíÄüö®üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –≠–°–ö–ê–õ–ê–¶–ò–Ø üíÄüö®üíÄ

üö´ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê!

‚ö†Ô∏è {self.consecutive_blocks} –ë–õ–û–ö–ò–†–û–í–û–ö –ü–û–î–†–Ø–î!

üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:
"""

        for block_type, count in self.block_counters.items():
            if count > 0:
                message += f"‚Ä¢ {block_type.value}: {count}\n"

        message += f"""
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {self._format_last_trade()}

üîß –¢–†–ï–ë–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
4. –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

üíÄ –¢–û–†–ì–û–í–õ–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê!
"""

        try:
            self.telegram_bot.send_admin_message(message)
            self.logger.critical("üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}")

    def _send_high_escalation(self) -> None:
        """–í—ã—Å–æ–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è"""
        if not self.telegram_bot:
            return

        message = f"""
üö® –í–´–°–û–ö–ê–Ø –≠–°–ö–ê–õ–ê–¶–ò–Ø

‚ö†Ô∏è {self.consecutive_blocks} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥!

–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã.

üìä –¢–æ–ø –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:
"""

        sorted_blocks = sorted(self.block_counters.items(), key=lambda x: x[1], reverse=True)
        for block_type, count in sorted_blocks[:3]:
            if count > 0:
                message += f"‚Ä¢ {block_type.value}: {count}\n"

        try:
            self.telegram_bot.send_admin_message(message)
            self.logger.error("üö® –í—ã—Å–æ–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã—Å–æ–∫–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}")

    def _format_last_trade(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏"""
        if not self.last_successful_trade:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        now = datetime.now(timezone.utc)
        diff = now - self.last_successful_trade

        if diff.days > 0:
            return f"{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            return f"{diff.seconds // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            return f"{diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        else:
            return "–ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"

    def _start_monitoring_thread(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitoring_loop():
            while True:
                try:
                    time.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                    self._periodic_health_check()
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                    time.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

        monitor_thread = threading.Thread(target=monitoring_loop, daemon=True)
        monitor_thread.start()

    def _periodic_health_check(self) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        with self._lock:
            now = datetime.now(timezone.utc)

            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if self.last_successful_trade:
                time_since_trade = now - self.last_successful_trade

                if time_since_trade > timedelta(hours=2) and self.telegram_bot:
                    total_blocks = sum(self.block_counters.values())

                    if total_blocks > 0:
                        message = f"""
‚è∞ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢

üö´ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —É–∂–µ {self._format_last_trade()}

üìä –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:
"""
                        for block_type, count in self.block_counters.items():
                            if count > 0:
                                message += f"‚Ä¢ {block_type.value}: {count}\n"

                        message += f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"

                        try:
                            self.telegram_bot.send_admin_message(message)
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        with self._lock:
            return {
                "total_blocks": sum(self.block_counters.values()),
                "consecutive_blocks": self.consecutive_blocks,
                "block_breakdown": dict(self.block_counters),
                "last_successful_trade": self.last_successful_trade.isoformat() if self.last_successful_trade else None,
                "recent_events": len([e for e in self.block_events if (datetime.now(timezone.utc) - e.timestamp).seconds < 3600])
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_blocking_alerts_manager = None
_manager_lock = threading.RLock()


def get_blocking_alerts_manager(telegram_bot=None) -> BlockingAlertsManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
    global _blocking_alerts_manager

    if _blocking_alerts_manager is None:
        with _manager_lock:
            if _blocking_alerts_manager is None:
                _blocking_alerts_manager = BlockingAlertsManager(telegram_bot)

    return _blocking_alerts_manager


def report_order_block(block_type: str, symbol: str, strategy: str, reason: str, details: Dict[str, Any] = None):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ä–¥–µ—Ä–∞"""
    try:
        block_enum = BlockType(block_type)
    except ValueError:
        block_enum = BlockType.UNKNOWN

    manager = get_blocking_alerts_manager()
    manager.report_block(block_enum, symbol, strategy, reason, details)


def report_successful_order(symbol: str, strategy: str, order_id: str):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
    manager = get_blocking_alerts_manager()
    manager.report_successful_trade(symbol, strategy, order_id)