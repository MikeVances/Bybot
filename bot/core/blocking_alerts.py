"""
üö® –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ë–õ–û–ö–ò–†–û–í–ö–ê–• –¢–û–†–ì–û–í–õ–ò
–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–∞–∂–¥–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ä–¥–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

class BlockingReason(Enum):
    """–ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    EMERGENCY_STOP = "emergency_stop"
    RISK_LIMIT = "risk_limit"
    RATE_LIMIT = "rate_limit"
    API_ERROR = "api_error"
    STRATEGY_FILTER = "strategy_filter"
    ORDER_CONFLICT = "order_conflict"
    POSITION_LIMIT = "position_limit"
    BALANCE_INSUFFICIENT = "balance_insufficient"
    API_PERFORMANCE = "api_performance"

@dataclass
class BlockingAlert:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    timestamp: datetime
    reason: BlockingReason
    symbol: str
    strategy: str
    message: str
    severity: str
    details: Dict[str, Any]
    resolved: bool = False

class BlockingAlertsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"""

    def __init__(self, telegram_bot=None):
        self.logger = logging.getLogger('blocking_alerts')
        self.telegram_bot = telegram_bot
        self.active_blocks = {}  # {key: BlockingAlert}
        self.block_history = []
        self.notification_cooldown = {}  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞

    def report_order_block(self, reason: str, symbol: str, strategy: str,
                          message: str, details: Dict[str, Any] = None) -> None:
        """
        –°–æ–æ–±—â–∏—Ç—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ä–¥–µ—Ä–∞

        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            strategy: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            message: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
            severity = self._get_severity(reason)

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert = BlockingAlert(
                timestamp=datetime.now(),
                reason=BlockingReason(reason),
                symbol=symbol,
                strategy=strategy,
                message=message,
                severity=severity,
                details=details or {}
            )

            # –ö–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            alert_key = f"{reason}_{symbol}_{strategy}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            if self._should_notify(alert_key, severity):
                self._send_notification(alert)
                self.notification_cooldown[alert_key] = datetime.now()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.active_blocks[alert_key] = alert
            self.block_history.append(alert)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
            if len(self.block_history) > 1000:
                self.block_history = self.block_history[-1000:]

            # –õ–æ–≥–∏—Ä—É–µ–º
            self.logger.warning(
                f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: {strategy} ({symbol}) - {message}"
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")

    def _get_severity(self, reason: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        severity_map = {
            "emergency_stop": "CRITICAL",
            "risk_limit": "HIGH",
            "api_error": "HIGH",
            "api_performance": "HIGH",
            "rate_limit": "MEDIUM",
            "position_limit": "MEDIUM",
            "balance_insufficient": "MEDIUM",
            "strategy_filter": "LOW",
            "order_conflict": "MEDIUM"
        }
        return severity_map.get(reason, "MEDIUM")

    def _should_notify(self, alert_key: str, severity: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        last_notification = self.notification_cooldown.get(alert_key)

        if not last_notification:
            return True

        # Cooldown –ø–µ—Ä–∏–æ–¥—ã –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        cooldown_minutes = {
            "CRITICAL": 0,    # –í—Å–µ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å
            "HIGH": 5,       # 5 –º–∏–Ω—É—Ç
            "MEDIUM": 15,    # 15 –º–∏–Ω—É—Ç
            "LOW": 60        # 1 —á–∞—Å
        }

        cooldown = cooldown_minutes.get(severity, 15)
        return datetime.now() - last_notification > timedelta(minutes=cooldown)

    def _send_notification(self, alert: BlockingAlert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        severity_emoji = {
            "CRITICAL": "üö®",
            "HIGH": "üî¥",
            "MEDIUM": "üü°",
            "LOW": "üü¢"
        }

        emoji = severity_emoji.get(alert.severity, "‚ö†Ô∏è")

        notification_text = f"""{emoji} –ë–õ–û–ö–ò–†–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò

üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {alert.strategy}
üí∞ –°–∏–º–≤–æ–ª: {alert.symbol}
‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {alert.message}
üîí –£—Ä–æ–≤–µ–Ω—å: {alert.severity}
‚è∞ –í—Ä–µ–º—è: {alert.timestamp.strftime('%H:%M:%S')}

üìã –î–µ—Ç–∞–ª–∏: {self._format_details(alert.details)}

üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å: {self._get_recommendation(alert.reason.value)}"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.telegram_bot:
            try:
                self.telegram_bot.send_admin_message(notification_text)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")

        # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if alert.severity == "CRITICAL":
            self.logger.critical(notification_text)

    def _format_details(self, details: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not details:
            return "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

        formatted = []
        for key, value in details.items():
            if key == 'current_balance':
                formatted.append(f"–ë–∞–ª–∞–Ω—Å: ${value:.2f}")
            elif key == 'limit_value':
                formatted.append(f"–õ–∏–º–∏—Ç: {value}")
            elif key == 'actual_value':
                formatted.append(f"–¢–µ–∫—É—â–µ–µ: {value}")
            elif key == 'response_time':
                formatted.append(f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {value:.2f}s")
            elif key == 'failure_rate':
                formatted.append(f"–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {value*100:.1f}%")
            else:
                formatted.append(f"{key}: {value}")

        return ", ".join(formatted)

    def _get_recommendation(self, reason: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã"""
        recommendations = {
            "emergency_stop": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É",
            "risk_limit": "–£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤",
            "rate_limit": "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É",
            "api_error": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ —Å—Ç–∞—Ç—É—Å Bybit API",
            "api_performance": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è",
            "strategy_filter": "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∞ —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª",
            "order_conflict": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞",
            "position_limit": "–£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã",
            "balance_insufficient": "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–æ–∫"
        }
        return recommendations.get(reason, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –ª–æ–≥–∞–º —Å–∏—Å—Ç–µ–º—ã")

    def get_active_blocks(self) -> List[BlockingAlert]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        return [alert for alert in self.active_blocks.values() if not alert.resolved]

    def resolve_block(self, alert_key: str) -> bool:
        """–ü–æ–º–µ—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é"""
        if alert_key in self.active_blocks:
            self.active_blocks[alert_key].resolved = True
            del self.active_blocks[alert_key]
            self.logger.info(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—à–µ–Ω–∞: {alert_key}")
            return True
        return False

    def auto_resolve_expired_blocks(self) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        resolved_count = 0
        current_time = datetime.now()

        # –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        auto_resolve_times = {
            "rate_limit": timedelta(minutes=10),
            "api_error": timedelta(minutes=15),
            "api_performance": timedelta(minutes=20),
            "strategy_filter": timedelta(minutes=5),
        }

        keys_to_resolve = []
        for key, alert in self.active_blocks.items():
            if alert.resolved:
                continue

            auto_resolve_time = auto_resolve_times.get(alert.reason.value)
            if auto_resolve_time and (current_time - alert.timestamp) > auto_resolve_time:
                keys_to_resolve.append(key)

        for key in keys_to_resolve:
            self.resolve_block(key)
            resolved_count += 1

        return resolved_count

    def get_blocking_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        total_blocks = len(self.block_history)

        if total_blocks == 0:
            return {"total_blocks": 0, "message": "–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –±—ã–ª–æ"}

        # –°—á–∏—Ç–∞–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º
        by_reason = {}
        by_severity = {}

        for alert in self.block_history:
            reason = alert.reason.value
            severity = alert.severity

            by_reason[reason] = by_reason.get(reason, 0) + 1
            by_severity[severity] = by_severity.get(severity, 0) + 1

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        active_blocks = self.get_active_blocks()

        return {
            "total_blocks": total_blocks,
            "active_blocks": len(active_blocks),
            "by_reason": by_reason,
            "by_severity": by_severity,
            "last_24h": len([a for a in self.block_history
                           if datetime.now() - a.timestamp < timedelta(hours=24)]),
            "last_1h": len([a for a in self.block_history
                          if datetime.now() - a.timestamp < timedelta(hours=1)]),
            "most_common_reason": max(by_reason.items(), key=lambda x: x[1])[0] if by_reason else "none",
            "recent_blocks": [
                {
                    "strategy": alert.strategy,
                    "symbol": alert.symbol,
                    "reason": alert.reason.value,
                    "message": alert.message,
                    "timestamp": alert.timestamp.strftime('%H:%M:%S'),
                    "severity": alert.severity
                }
                for alert in self.block_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            ]
        }

    def clear_old_history(self, hours: int = 24) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        initial_count = len(self.block_history)

        self.block_history = [
            alert for alert in self.block_history
            if alert.timestamp > cutoff_time
        ]

        cleared_count = initial_count - len(self.block_history)
        if cleared_count > 0:
            self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleared_count} —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")

        return cleared_count

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_blocking_manager = None

def get_blocking_alerts_manager(telegram_bot=None) -> BlockingAlertsManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    global _blocking_manager
    if _blocking_manager is None:
        _blocking_manager = BlockingAlertsManager(telegram_bot)
    return _blocking_manager

def report_order_block(reason: str, symbol: str, strategy: str,
                      message: str, details: Dict[str, Any] = None) -> None:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    manager = get_blocking_alerts_manager()
    manager.report_order_block(reason, symbol, strategy, message, details)