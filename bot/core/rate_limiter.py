# bot/core/rate_limiter.py
"""
üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: –ñ–µ—Å—Ç–æ—á–∞–π—à–∏–π Rate Limiter
–ü–û–õ–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ü–†–ï–í–´–®–ï–ù–ò–Ø –õ–ò–ú–ò–¢–û–í –ë–ò–†–ñ–ò
EMERGENCY SHUTDOWN –ü–†–ò –ú–ê–õ–ï–ô–®–ï–ô –£–ì–†–û–ó–ï!
"""

import time
import threading
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from collections import deque, defaultdict
from dataclasses import dataclass
import logging

from bot.core.exceptions import RateLimitError, EmergencyStopError


@dataclass
class RateLimitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    requests_per_minute: int = 10
    requests_per_second: int = 2
    burst_limit: int = 5
    cooldown_seconds: int = 60
    emergency_threshold: float = 0.8  # –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –ª–∏–º–∏—Ç–∞ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ


class RateLimitViolation:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
    def __init__(self, limit_type: str, current_count: int, limit_value: int, 
                 timestamp: datetime, client_id: str = "default"):
        self.limit_type = limit_type
        self.current_count = current_count
        self.limit_value = limit_value
        self.timestamp = timestamp
        self.client_id = client_id
        self.severity = self._calculate_severity()
    
    def _calculate_severity(self) -> str:
        """–†–∞—Å—á—ë—Ç —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
        ratio = self.current_count / self.limit_value
        if ratio >= 1.0:
            return "CRITICAL"
        elif ratio >= 0.9:
            return "HIGH"
        elif ratio >= 0.7:
            return "MEDIUM"
        else:
            return "LOW"


class AggressiveRateLimiter:
    """
    üíÄ –ê–ì–†–ï–°–°–ò–í–ù–´–ô RATE LIMITER –° EMERGENCY SHUTDOWN
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ñ–µ—Å—Ç–æ—á–∞–π—à–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π emergency shutdown –ø—Ä–∏ —É–≥—Ä–æ–∑–µ
    - –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤-–Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
    - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏ –ø–µ—Ä-—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    """
    
    def __init__(self):
        # üîí –û–°–ù–û–í–ù–´–ï –ë–õ–û–ö–ò–†–û–í–ö–ò
        self._lock = threading.RLock()
        self._client_locks = defaultdict(lambda: threading.RLock())
        
        # üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–û–í
        self._request_timestamps: Dict[str, Dict[str, deque]] = defaultdict(lambda: defaultdict(deque))
        self._violation_history: List[RateLimitViolation] = []
        
        # ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–ò–ú–ò–¢–û–í
        self._limits: Dict[str, RateLimitConfig] = {
            'order_create': RateLimitConfig(
                requests_per_minute=20,
                requests_per_second=1,
                burst_limit=3,
                cooldown_seconds=30,
                emergency_threshold=0.7
            ),
            'order_cancel': RateLimitConfig(
                requests_per_minute=30,
                requests_per_second=2,
                burst_limit=5,
                cooldown_seconds=15,
                emergency_threshold=0.8
            ),
            'position_query': RateLimitConfig(
                requests_per_minute=60,
                requests_per_second=5,
                burst_limit=10,
                cooldown_seconds=10,
                emergency_threshold=0.9
            ),
            'balance_query': RateLimitConfig(
                requests_per_minute=30,
                requests_per_second=3,
                burst_limit=5,
                cooldown_seconds=20,
                emergency_threshold=0.8
            ),
            'market_data': RateLimitConfig(
                requests_per_minute=120,
                requests_per_second=10,
                burst_limit=20,
                cooldown_seconds=5,
                emergency_threshold=0.95
            )
        }
        
        # üö® –°–ò–°–¢–ï–ú–ê EMERGENCY SHUTDOWN
        self._emergency_stop = False
        self._emergency_reason = ""
        self._emergency_timestamp = None
        
        # üî¥ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–´
        self._banned_clients: Dict[str, datetime] = {}
        self._client_violation_counts = defaultdict(int)
        
        # üìä –ì–õ–û–ë–ê–õ–¨–ù–´–ï –õ–ò–ú–ò–¢–´
        self._global_requests_per_minute = 200
        self._global_requests_per_second = 20

        # üîÑ –ê–î–ê–ü–¢–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
        self.adaptive_delays = {}
        self.success_streak = {}
        self.failure_streak = {}

        # üìù –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        self._stats = {
            'total_requests': 0,
            'blocked_requests': 0,
            'violations': 0,
            'emergency_activations': 0,
            'banned_clients': 0
        }
        
        # üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        self.logger = logging.getLogger('rate_limiter')
        self.logger.setLevel(logging.INFO)
        
        # üßπ –§–û–ù–û–í–´–ô –ü–û–¢–û–ö –î–õ–Ø –û–ß–ò–°–¢–ö–ò
        self._cleanup_thread = threading.Thread(target=self._cleanup_loop, daemon=True)
        self._cleanup_thread.start()
        
        self.logger.info("üíÄ AggressiveRateLimiter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –ñ–ï–°–¢–û–ß–ê–ô–®–ò–ú–ò –ª–∏–º–∏—Ç–∞–º–∏")
    
    def acquire(self, request_type: str, client_id: str = "default", 
               symbol: str = None, metadata: Dict[str, Any] = None) -> bool:
        """
        üõ°Ô∏è –ü–û–õ–£–ß–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ù–ê –ó–ê–ü–†–û–°
        
        Args:
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (order_create, position_query, etc.)
            client_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à—ë–Ω, –∏–Ω–∞—á–µ RateLimitError
            
        Raises:
            RateLimitError: –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
            EmergencyStopError: –ü—Ä–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º emergency stop
        """
        with self._lock:
            try:
                self._stats['total_requests'] += 1
                
                # 1. üö® –ü–†–û–í–ï–†–ö–ê EMERGENCY STOP
                if self._emergency_stop:
                    raise EmergencyStopError(
                        f"üö® EMERGENCY STOP –ê–ö–¢–ò–í–ï–ù: {self._emergency_reason} "
                        f"(—Å {self._emergency_timestamp})"
                    )
                
                # 2. üî¥ –ü–†–û–í–ï–†–ö–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–û–í
                if client_id in self._banned_clients:
                    ban_time = self._banned_clients[client_id]
                    if datetime.now() < ban_time:
                        remaining = (ban_time - datetime.now()).total_seconds()
                        raise RateLimitError(
                            f"üö´ –ö–ª–∏–µ–Ω—Ç {client_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {remaining:.0f} —Å–µ–∫—É–Ω–¥ "
                            f"–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤"
                        )
                    else:
                        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                        del self._banned_clients[client_id]
                        self._client_violation_counts[client_id] = 0
                        self.logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                # 3. üìä –ü–†–û–í–ï–†–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –õ–ò–ú–ò–¢–û–í
                self._check_global_limits()
                
                # 4. üéØ –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–§–ò–ß–ù–´–• –õ–ò–ú–ò–¢–û–í
                self._check_specific_limits(request_type, client_id, symbol)
                
                # 5. ‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û–ì–û –ó–ê–ü–†–û–°–ê
                now = datetime.now()
                self._register_request(request_type, client_id, symbol, now)
                
                # 6. ‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–Ø –ö –õ–ò–ú–ò–¢–ê–ú
                self._check_approaching_limits(request_type, client_id)
                
                self.logger.debug(
                    f"‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à—ë–Ω: {request_type} –¥–ª—è {client_id}"
                    + (f" ({symbol})" if symbol else "")
                )
                
                return True
                
            except (RateLimitError, EmergencyStopError):
                self._stats['blocked_requests'] += 1
                raise
                
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency stop
                self._activate_emergency_stop(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ rate limiter: {str(e)}")
                raise EmergencyStopError(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
    
    def _check_global_limits(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        minute_ago = now - timedelta(minutes=1)
        second_ago = now - timedelta(seconds=1)
        
        total_minute_requests = 0
        total_second_requests = 0
        
        for client_data in self._request_timestamps.values():
            for symbol_data in client_data.values():
                for request_time in symbol_data:
                    if request_time > minute_ago:
                        total_minute_requests += 1
                    if request_time > second_ago:
                        total_second_requests += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if total_minute_requests >= self._global_requests_per_minute:
            self._activate_emergency_stop(
                f"–ü—Ä–µ–≤—ã—à–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {total_minute_requests}/{self._global_requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É"
            )
            raise RateLimitError(
                f"üö® –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω: {total_minute_requests}/{self._global_requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω"
            )
        
        if total_second_requests >= self._global_requests_per_second:
            raise RateLimitError(
                f"üö® –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω: {total_second_requests}/{self._global_requests_per_second} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫"
            )
    
    def _check_specific_limits(self, request_type: str, client_id: str, symbol: str = None) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        if request_type not in self._limits:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –∂–µ—Å—Ç–∫–∏–µ –ª–∏–º–∏—Ç—ã
            config = RateLimitConfig(
                requests_per_minute=10,
                requests_per_second=1,
                burst_limit=2,
                cooldown_seconds=60,
                emergency_threshold=0.5
            )
        else:
            config = self._limits[request_type]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–∏–º–≤–æ–ª–∞
        cache_key = f"{client_id}:{symbol}" if symbol else client_id
        
        if cache_key not in self._request_timestamps:
            self._request_timestamps[cache_key] = defaultdict(deque)
        
        timestamps = self._request_timestamps[cache_key][request_type]
        now = datetime.now()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        minute_ago = now - timedelta(minutes=1)
        second_ago = now - timedelta(seconds=1)
        
        while timestamps and timestamps[0] < minute_ago:
            timestamps.popleft()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        minute_requests = len(timestamps)
        second_requests = sum(1 for ts in timestamps if ts > second_ago)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if minute_requests >= config.requests_per_minute:
            violation = RateLimitViolation(
                f"{request_type}_per_minute", 
                minute_requests, 
                config.requests_per_minute,
                now, 
                client_id
            )
            self._handle_violation(violation)
            
            raise RateLimitError(
                f"üö´ –õ–∏–º–∏—Ç {request_type}: {minute_requests}/{config.requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω "
                f"–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}"
            )
        
        if second_requests >= config.requests_per_second:
            raise RateLimitError(
                f"üö´ –õ–∏–º–∏—Ç {request_type}: {second_requests}/{config.requests_per_second} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ "
                f"–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º burst –ª–∏–º–∏—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥)
        burst_ago = now - timedelta(seconds=10)
        burst_requests = sum(1 for ts in timestamps if ts > burst_ago)
        
        if burst_requests >= config.burst_limit:
            raise RateLimitError(
                f"üö´ Burst –ª–∏–º–∏—Ç {request_type}: {burst_requests}/{config.burst_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 —Å–µ–∫ "
                f"–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}"
            )
    
    def _register_request(self, request_type: str, client_id: str, symbol: str, timestamp: datetime) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        cache_key = f"{client_id}:{symbol}" if symbol else client_id
        self._request_timestamps[cache_key][request_type].append(timestamp)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä deque
        if len(self._request_timestamps[cache_key][request_type]) > 1000:
            self._request_timestamps[cache_key][request_type].popleft()
    
    def _check_approaching_limits(self, request_type: str, client_id: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –ª–∏–º–∏—Ç–∞–º"""
        if request_type not in self._limits:
            return
        
        config = self._limits[request_type]
        cache_key = client_id
        
        if cache_key in self._request_timestamps:
            timestamps = self._request_timestamps[cache_key][request_type]
            now = datetime.now()
            minute_ago = now - timedelta(minutes=1)
            
            minute_requests = sum(1 for ts in timestamps if ts > minute_ago)
            threshold = int(config.requests_per_minute * config.emergency_threshold)
            
            if minute_requests >= threshold:
                self.logger.warning(
                    f"‚ö†Ô∏è –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï –ö –õ–ò–ú–ò–¢–£: {request_type} –¥–ª—è {client_id}: "
                    f"{minute_requests}/{config.requests_per_minute} "
                    f"(–ø–æ—Ä–æ–≥ {config.emergency_threshold:.0%})"
                )
    
    def _handle_violation(self, violation: RateLimitViolation) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        self._violation_history.append(violation)
        self._stats['violations'] += 1
        self._client_violation_counts[violation.client_id] += 1
        
        client_violations = self._client_violation_counts[violation.client_id]
        
        self.logger.error(
            f"üö´ –ù–ê–†–£–®–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê: {violation.limit_type} "
            f"({violation.current_count}/{violation.limit_value}) "
            f"–∫–ª–∏–µ–Ω—Ç {violation.client_id} (–Ω–∞—Ä—É—à–µ–Ω–∏–π: {client_violations})"
        )
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        if client_violations >= 3:
            ban_duration = min(300, 60 * client_violations)  # –î–æ 5 –º–∏–Ω—É—Ç
            ban_until = datetime.now() + timedelta(seconds=ban_duration)
            
            self._banned_clients[violation.client_id] = ban_until
            self._stats['banned_clients'] += 1
            
            self.logger.critical(
                f"üö´ –ö–õ–ò–ï–ù–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: {violation.client_id} –Ω–∞ {ban_duration} —Å–µ–∫—É–Ω–¥ "
                f"–∑–∞ {client_violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π"
            )
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency stop –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        if violation.severity == "CRITICAL" or client_violations >= 5:
            self._activate_emergency_stop(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤: {violation.limit_type} "
                f"–∫–ª–∏–µ–Ω—Ç–æ–º {violation.client_id}"
            )
    
    def _activate_emergency_stop(self, reason: str) -> None:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è emergency stop"""
        if not self._emergency_stop:
            self._emergency_stop = True
            self._emergency_reason = reason
            self._emergency_timestamp = datetime.now()
            self._stats['emergency_activations'] += 1
            
            self.logger.critical(
                f"üö® EMERGENCY STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù: {reason}"
            )
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Telegram, email, etc.)
    
    def can_make_request(self, request_type: str, client_id: str = "default",
                        symbol: str = None) -> bool:
        """
        üîç –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–ü–†–û–°–ê —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π

        Args:
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            symbol: –°–∏–º–≤–æ–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º acquire –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            with self._lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º emergency stop
                if self._emergency_stop:
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                if client_id in self._banned_clients:
                    ban_time = self._banned_clients[client_id]
                    if datetime.now() < ban_time:
                        return False

                # üîÑ –ê–î–ê–ü–¢–ò–í–ù–´–ï –ó–ê–î–ï–†–ñ–ö–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
                self._apply_adaptive_delays(request_type)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –±–µ–∑ –∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è
                return self._can_make_request_internal(request_type, client_id, symbol)

        except Exception:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
            return False
    
    def _can_make_request_internal(self, request_type: str, client_id: str, symbol: str) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–∏–º–∏—Ç–æ–≤
            config = self._limits.get(request_type, self._limits['market_data'])
            now = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            key = f"{client_id}:{request_type}"
            if symbol:
                key += f":{symbol}"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            timestamps = self._request_timestamps[key][request_type]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            minute_ago = now - timedelta(minutes=1)
            second_ago = now - timedelta(seconds=1)
            
            while timestamps and timestamps[0] < minute_ago:
                timestamps.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            recent_requests_minute = len(timestamps)
            recent_requests_second = sum(1 for ts in timestamps if ts > second_ago)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã
            if recent_requests_minute >= config.requests_per_minute:
                return False
            if recent_requests_second >= config.requests_per_second:
                return False
            
            return True
            
        except Exception:
            return False

    def _apply_adaptive_delays(self, endpoint: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            from bot.core.enhanced_api_connection import get_enhanced_connection_manager
            connection_manager = get_enhanced_connection_manager()

            if connection_manager:
                health = connection_manager.get_connection_health()

                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è API
                if health['state'] == 'degraded':
                    self.adaptive_delays[endpoint] = 2.0  # –£–¥–≤–∞–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                elif health['state'] == 'unstable':
                    self.adaptive_delays[endpoint] = 3.0  # –£—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                elif health['state'] == 'healthy':
                    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
                    current_delay = self.adaptive_delays.get(endpoint, 1.0)
                    self.adaptive_delays[endpoint] = max(0.5, current_delay * 0.9)
        except ImportError:
            # Enhanced connection manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            pass

    def record_api_success(self, endpoint: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π API –≤—ã–∑–æ–≤"""
        self.success_streak[endpoint] = self.success_streak.get(endpoint, 0) + 1
        self.failure_streak[endpoint] = 0

        # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        if self.success_streak[endpoint] >= 5:
            current_delay = self.adaptive_delays.get(endpoint, 1.0)
            self.adaptive_delays[endpoint] = max(0.1, current_delay * 0.8)

    def record_api_failure(self, endpoint: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–π API –≤—ã–∑–æ–≤"""
        self.failure_streak[endpoint] = self.failure_streak.get(endpoint, 0) + 1
        self.success_streak[endpoint] = 0

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö
        current_delay = self.adaptive_delays.get(endpoint, 1.0)
        self.adaptive_delays[endpoint] = min(10.0, current_delay * 1.5)

    def deactivate_emergency_stop(self, admin_override: bool = False) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è emergency stop (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)"""
        if not admin_override:
            return False
        
        with self._lock:
            if self._emergency_stop:
                self._emergency_stop = False
                self._emergency_reason = ""
                self._emergency_timestamp = None
                
                self.logger.info("‚úÖ EMERGENCY STOP –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                return True
            
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiter
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–≤
        """
        with self._lock:
            return {
                'total_requests': self._stats['total_requests'],
                'blocked_requests': self._stats['blocked_requests'],
                'violations': self._stats['violations'],
                'emergency_activations': self._stats['emergency_activations'],
                'banned_clients': self._stats['banned_clients'],
                'emergency_stop_active': self._emergency_stop,
                'emergency_reason': self._emergency_reason,
                'active_bans': len(self._banned_clients),
                'total_violations': len(self._violation_history)
            }
    
    def get_client_status(self, client_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        with self._lock:
            now = datetime.now()
            
            status = {
                'client_id': client_id,
                'is_banned': client_id in self._banned_clients,
                'ban_expires': None,
                'violation_count': self._client_violation_counts.get(client_id, 0),
                'current_requests': {}
            }
            
            if status['is_banned']:
                status['ban_expires'] = self._banned_clients[client_id].isoformat()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            cache_key = client_id
            if cache_key in self._request_timestamps:
                minute_ago = now - timedelta(minutes=1)
                
                for request_type, timestamps in self._request_timestamps[cache_key].items():
                    minute_requests = sum(1 for ts in timestamps if ts > minute_ago)
                    limit = self._limits.get(request_type, RateLimitConfig()).requests_per_minute
                    
                    status['current_requests'][request_type] = {
                        'current': minute_requests,
                        'limit': limit,
                        'percentage': (minute_requests / limit) * 100 if limit > 0 else 0
                    }
            
            return status
    
    def get_global_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ rate limiter'–∞"""
        with self._lock:
            return {
                'emergency_stop_active': self._emergency_stop,
                'emergency_reason': self._emergency_reason,
                'emergency_since': self._emergency_timestamp.isoformat() if self._emergency_timestamp else None,
                'banned_clients_count': len(self._banned_clients),
                'total_violations': len(self._violation_history),
                'stats': self._stats.copy(),
                'recent_violations': [
                    {
                        'type': v.limit_type,
                        'client': v.client_id,
                        'severity': v.severity,
                        'timestamp': v.timestamp.isoformat(),
                        'current': v.current_count,
                        'limit': v.limit_value
                    }
                    for v in self._violation_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                ]
            }
    
    def _cleanup_loop(self) -> None:
        """–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while True:
            try:
                time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                with self._lock:
                    now = datetime.now()
                    hour_ago = now - timedelta(hours=1)
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    for client_data in self._request_timestamps.values():
                        for request_type, timestamps in client_data.items():
                            while timestamps and timestamps[0] < hour_ago:
                                timestamps.popleft()
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                    day_ago = now - timedelta(days=1)
                    self._violation_history = [
                        v for v in self._violation_history 
                        if v.timestamp > day_ago
                    ]
                    
                    # –û—á–∏—â–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    expired_bans = [
                        client_id for client_id, ban_time in self._banned_clients.items()
                        if now >= ban_time
                    ]
                    
                    for client_id in expired_bans:
                        del self._banned_clients[client_id]
                        self._client_violation_counts[client_id] = 0
                        self.logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç: {client_id}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cleanup loop: {e}")
                time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º –º–∏–Ω—É—Ç—É


# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† RATE LIMITER
_rate_limiter_instance = None
_rate_limiter_lock = threading.RLock()


def get_rate_limiter() -> AggressiveRateLimiter:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ rate limiter"""
    global _rate_limiter_instance
    
    if _rate_limiter_instance is None:
        with _rate_limiter_lock:
            if _rate_limiter_instance is None:
                _rate_limiter_instance = AggressiveRateLimiter()
    
    return _rate_limiter_instance


def reset_rate_limiter():
    """–°–±—Ä–æ—Å rate limiter (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    global _rate_limiter_instance
    with _rate_limiter_lock:
        _rate_limiter_instance = None