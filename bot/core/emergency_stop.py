"""
–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ —É–≥—Ä–æ–∑–µ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
"""

import threading
import time
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class EmergencyCondition:
    """–£—Å–ª–æ–≤–∏–µ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    name: str
    threshold: float
    current_value: float
    triggered: bool
    trigger_time: Optional[datetime] = None


class EmergencyStopManager:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ —É–≥—Ä–æ–∑–µ
    """

    def __init__(self):
        self.is_emergency_stop_active = threading.Event()
        self.stop_conditions: Dict[str, EmergencyCondition] = {}
        self.monitoring_thread = None
        self.monitoring_active = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
        self.critical_loss_threshold = 0.08  # 8% –ø–æ—Ç–µ—Ä—è –∫–∞–ø–∏—Ç–∞–ª–∞
        self.margin_call_threshold = 0.95    # 95% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ä–∂–∏–Ω–∞
        self.consecutive_losses_limit = 7    # 7 —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥
        self.api_error_limit = 10           # 10 –æ—à–∏–±–æ–∫ API –ø–æ–¥—Ä—è–¥

        # –°—á–µ—Ç—á–∏–∫–∏
        self.consecutive_losses = 0
        self.consecutive_api_errors = 0
        self.initial_balance = None

        self._initialize_conditions()

    def _initialize_conditions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.stop_conditions = {
            'critical_loss': EmergencyCondition('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç–µ—Ä—è –∫–∞–ø–∏—Ç–∞–ª–∞', self.critical_loss_threshold, 0.0, False),
            'margin_call': EmergencyCondition('–£–≥—Ä–æ–∑–∞ Margin Call', self.margin_call_threshold, 0.0, False),
            'consecutive_losses': EmergencyCondition('–°–µ—Ä–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', self.consecutive_losses_limit, 0, False),
            'api_errors': EmergencyCondition('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ API', self.api_error_limit, 0, False)
        }

    def start_monitoring(self, api_clients: Dict):
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π

        Args:
            api_clients: –°–ª–æ–≤–∞—Ä—å API –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        if self.monitoring_active:
            return

        self.monitoring_active = True
        self.api_clients = api_clients

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self._update_initial_balance()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_thread = threading.Thread(
            target=self._monitoring_loop,
            daemon=True,
            name="EmergencyStopMonitor"
        )
        self.monitoring_thread.start()
        logger.info("üö® –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = False
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=5)
        logger.info("‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring_active:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                for _ in range(30):
                    if not self.monitoring_active:
                        break
                    time.sleep(1)

                if not self.monitoring_active:
                    break

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
                self._check_all_conditions()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ emergency stop: {e}")
                time.sleep(5)

    def _check_all_conditions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
            self._check_capital_loss()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º margin level
            self._check_margin_level()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
            self._check_consecutive_losses()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –æ—à–∏–±–∫–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
            self._check_api_errors()

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency stop –µ—Å–ª–∏ –ª—é–±–æ–µ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            emergency_triggered = any(condition.triggered for condition in self.stop_conditions.values())

            if emergency_triggered and not self.is_emergency_stop_active.is_set():
                self._trigger_emergency_stop()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ emergency —É—Å–ª–æ–≤–∏–π: {e}")

    def _check_capital_loss(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ—Ä—å –∫–∞–ø–∏—Ç–∞–ª–∞"""
        if not self.initial_balance or not self.api_clients:
            return

        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
            api = next(iter(self.api_clients.values()))

            from bot.core.balance_validator import global_balance_validator
            balance_info = global_balance_validator._get_wallet_balance(api)

            if balance_info:
                current_balance = balance_info.get('total_equity', 0)
                loss_percentage = (self.initial_balance - current_balance) / self.initial_balance

                condition = self.stop_conditions['critical_loss']
                condition.current_value = loss_percentage

                if loss_percentage >= self.critical_loss_threshold:
                    condition.triggered = True
                    condition.trigger_time = datetime.now()
                    logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–¢–ï–†–Ø –ö–ê–ü–ò–¢–ê–õ–ê: {loss_percentage*100:.2f}%")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–µ—Ä—å –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")

    def _check_margin_level(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –º–∞—Ä–∂–∏–Ω–∞"""
        try:
            # –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É margin –¥–ª—è –¥–µ–º–æ/—Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É margin –¥–ª—è testnet
            condition = self.stop_conditions['margin_call']
            condition.current_value = 0.0  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            condition.triggered = False
            return

            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞):
            # api = next(iter(self.api_clients.values()))
            # from bot.core.balance_validator import global_balance_validator
            # balance_info = global_balance_validator._get_wallet_balance(api)
            # if balance_info:
            #     available = balance_info.get('available_balance', 0)
            #     total = balance_info.get('total_equity', 1)
            #     margin_usage = 1 - (available / total) if total > 0 else 0
            #     condition = self.stop_conditions['margin_call']
            #     condition.current_value = margin_usage
            #     if margin_usage >= self.margin_call_threshold:
            #         condition.triggered = True
            #         condition.trigger_time = datetime.now()
            #         logger.critical(f"üö® –£–ì–†–û–ó–ê MARGIN CALL: {margin_usage*100:.2f}%")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ margin level: {e}")

    def _check_consecutive_losses(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        condition = self.stop_conditions['consecutive_losses']
        condition.current_value = self.consecutive_losses

        if self.consecutive_losses >= self.consecutive_losses_limit:
            condition.triggered = True
            condition.trigger_time = datetime.now()
            logger.critical(f"üö® –°–ï–†–ò–Ø –£–ë–´–¢–û–ß–ù–´–• –°–î–ï–õ–û–ö: {self.consecutive_losses}")

    def _check_api_errors(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ API"""
        condition = self.stop_conditions['api_errors']
        condition.current_value = self.consecutive_api_errors

        if self.consecutive_api_errors >= self.api_error_limit:
            condition.triggered = True
            condition.trigger_time = datetime.now()
            logger.critical(f"üö® –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò API: {self.consecutive_api_errors}")

    def _trigger_emergency_stop(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.is_emergency_stop_active.set()

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        triggered_conditions = [
            f"{cond.name}: {cond.current_value}"
            for cond in self.stop_conditions.values()
            if cond.triggered
        ]

        logger.critical("üö®üö®üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò! üö®üö®üö®")
        logger.critical(f"–ü—Ä–∏—á–∏–Ω—ã: {'; '.join(triggered_conditions)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        self._send_emergency_notification(triggered_conditions)

    def _send_emergency_notification(self, reasons: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò!\n\n–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join(f"‚Ä¢ {reason}" for reason in reasons)
            logger.critical(f"EMERGENCY NOTIFICATION: {message}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ emergency —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _update_initial_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if self.api_clients:
                api = next(iter(self.api_clients.values()))
                from bot.core.balance_validator import global_balance_validator
                balance_info = global_balance_validator._get_wallet_balance(api)

                if balance_info:
                    self.initial_balance = balance_info.get('total_equity', 0)
                    logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {self.initial_balance:.4f} USDT")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")

    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤

    def report_trade_result(self, is_profitable: bool):
        """–°–æ–æ–±—â–∏—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–¥–µ–ª–∫–∏"""
        if is_profitable:
            self.consecutive_losses = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–µ
        else:
            self.consecutive_losses += 1

    def report_api_error(self):
        """–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ API"""
        self.consecutive_api_errors += 1

    def report_api_success(self):
        """–°–æ–æ–±—â–∏—Ç—å –æ–± —É—Å–ø–µ—à–Ω–æ–º API –∑–∞–ø—Ä–æ—Å–µ"""
        self.consecutive_api_errors = max(0, self.consecutive_api_errors - 1)

    def is_trading_allowed(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è

        Returns:
            Tuple[bool, str]: (—Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –ø—Ä–∏—á–∏–Ω–∞_–µ—Å–ª–∏_–∑–∞–ø—Ä–µ—â–µ–Ω–∞)
        """
        if self.is_emergency_stop_active.is_set():
            active_conditions = [
                cond.name for cond in self.stop_conditions.values()
                if cond.triggered
            ]
            return False, f"üö® EMERGENCY STOP –ê–ö–¢–ò–í–ï–ù: {'; '.join(active_conditions)}"

        return True, "‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"

    def reset_emergency_stop(self, admin_confirmation: bool = False):
        """
        –°–±—Ä–æ—Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!)

        Args:
            admin_confirmation: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        if not admin_confirmation:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ emergency stop –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
        self._initialize_conditions()
        self.consecutive_losses = 0
        self.consecutive_api_errors = 0
        self.is_emergency_stop_active.clear()

        logger.warning("üîÑ EMERGENCY STOP –°–ë–†–û–®–ï–ù –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú")
        return True

    def get_status_report(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'emergency_active': self.is_emergency_stop_active.is_set(),
            'monitoring_active': self.monitoring_active,
            'initial_balance': self.initial_balance,
            'consecutive_losses': self.consecutive_losses,
            'consecutive_api_errors': self.consecutive_api_errors,
            'conditions': {
                name: {
                    'threshold': cond.threshold,
                    'current': cond.current_value,
                    'triggered': cond.triggered,
                    'trigger_time': cond.trigger_time.isoformat() if cond.trigger_time else None
                }
                for name, cond in self.stop_conditions.items()
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä emergency stop –º–µ–Ω–µ–¥–∂–µ—Ä–∞
global_emergency_stop = EmergencyStopManager()