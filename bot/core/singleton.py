"""
Singleton utility for ensuring only one instance of components
"""
import os
import fcntl
import atexit
from typing import Dict, Optional


class SingletonManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä singleton'–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""

    def __init__(self):
        self._locks: Dict[str, int] = {}
        self._lock_dir = "/tmp/bybot_locks"
        os.makedirs(self._lock_dir, exist_ok=True)
        atexit.register(self.cleanup)

    def acquire_lock(self, name: str) -> bool:
        """
        –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç stale locks –æ—Ç –∫—Ä–∞—à–Ω—É—Ç—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        """
        lock_file = os.path.join(self._lock_dir, f"{name}.lock")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π lock —Ñ–∞–π–ª
        if os.path.exists(lock_file):
            try:
                with open(lock_file, 'r') as f:
                    old_pid = f.read().strip()

                if old_pid.isdigit():
                    old_pid_int = int(old_pid)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    if not self._is_process_alive(old_pid_int):
                        # –ü—Ä–æ—Ü–µ—Å—Å –º–µ—Ä—Ç–≤ - —É–¥–∞–ª—è–µ–º stale lock
                        os.unlink(lock_file)
                        print(f"üßπ –£–¥–∞–ª–µ–Ω stale lock –æ—Ç –∫—Ä–∞—à–Ω—É—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {old_pid_int}")
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å - –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å
                try:
                    os.unlink(lock_file)
                except:
                    pass

        try:
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lock
            fd = os.open(lock_file, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
            fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)

            # 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os.write(fd, str(os.getpid()).encode())
            os.fsync(fd)

            self._locks[name] = fd
            return True

        except (OSError, BlockingIOError):
            # Lock –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç –∂–∏–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
            return False

    def _is_process_alive(self, pid: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç kill(pid, 0) - –Ω–µ —É–±–∏–≤–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        """
        try:
            os.kill(pid, 0)  # –°–∏–≥–Ω–∞–ª 0 = –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —É–±–∏–π—Å—Ç–≤–∞
            return True
        except OSError:
            return False

    def release_lock(self, name: str):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        if name in self._locks:
            try:
                fd = self._locks[name]
                fcntl.flock(fd, fcntl.LOCK_UN)
                os.close(fd)
                del self._locks[name]

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                lock_file = os.path.join(self._lock_dir, f"{name}.lock")
                if os.path.exists(lock_file):
                    os.unlink(lock_file)
            except:
                pass

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        for name in list(self._locks.keys()):
            self.release_lock(name)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä singleton'–æ–≤
_singleton_manager = SingletonManager()


def get_singleton_manager() -> SingletonManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä singleton'–æ–≤"""
    return _singleton_manager


def ensure_singleton(component_name: str) -> bool:
    """
    –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

    Returns:
        True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)
        False –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    """
    return _singleton_manager.acquire_lock(component_name)


def ensure_single_instance(component_name: str) -> bool:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –¥–ª—è ensure_singleton –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    Returns:
        True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)
        False –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    """
    return ensure_singleton(component_name)