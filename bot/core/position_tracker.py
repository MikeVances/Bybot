# bot/core/position_tracker.py
"""
üéØ –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–†–û–ò–°–•–û–ñ–î–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ô
–û—Ç–ª–∏—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∏—Å—Ç–µ–º–æ–π, –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö (—Ä—É—á–Ω—ã—Ö) –ø–æ–∑–∏—Ü–∏–π
"""

import json
import os
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from enum import Enum
import threading


class PositionOrigin(Enum):
    """–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    SYSTEM = "system"           # –û—Ç–∫—Ä—ã—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    EXTERNAL = "external"       # –û—Ç–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é/–≤–Ω–µ—à–Ω–∏–º —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
    INHERITED = "inherited"     # –°—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    UNKNOWN = "unknown"         # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ


@dataclass
class TrackedPosition:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    symbol: str
    side: str
    size: float
    entry_price: float
    origin: PositionOrigin
    strategy: Optional[str] = None
    created_time: Optional[datetime] = None
    bybit_created_time: Optional[datetime] = None
    system_order_id: Optional[str] = None
    comment: str = ""

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        data = asdict(self)
        data['origin'] = self.origin.value
        if self.created_time:
            data['created_time'] = self.created_time.isoformat()
        if self.bybit_created_time:
            data['bybit_created_time'] = self.bybit_created_time.isoformat()
        return data

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TrackedPosition':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        if 'created_time' in data and data['created_time']:
            data['created_time'] = datetime.fromisoformat(data['created_time'])
        if 'bybit_created_time' in data and data['bybit_created_time']:
            data['bybit_created_time'] = datetime.fromisoformat(data['bybit_created_time'])
        data['origin'] = PositionOrigin(data['origin'])
        return cls(**data)


class PositionTracker:
    """
    üîç –¢–†–ï–ö–ï–† –ü–û–ó–ò–¶–ò–ô

    –§—É–Ω–∫—Ü–∏–∏:
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (—Å–∏—Å—Ç–µ–º–∞ vs –≤–Ω–µ—à–Ω—è—è)
    - –í–µ–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∑–∏—Ü–∏–π
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–∫–∏
    """

    def __init__(self, data_dir: str = "data"):
        self.data_dir = data_dir
        self.positions_file = os.path.join(data_dir, "tracked_positions.json")
        self.history_file = os.path.join(data_dir, "position_history.json")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(data_dir, exist_ok=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.tracked_positions: Dict[str, TrackedPosition] = {}
        self.position_history: List[Dict[str, Any]] = []
        self._load_data()

        # –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
        self.system_startup_time = datetime.now(timezone.utc)

        # Thread safety
        self._lock = threading.RLock()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger('position_tracker')
        self.logger.info(f"üéØ PositionTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (startup: {self.system_startup_time})")

    def _load_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            if os.path.exists(self.positions_file):
                with open(self.positions_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for key, pos_data in data.items():
                        self.tracked_positions[key] = TrackedPosition.from_dict(pos_data)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    self.position_history = json.load(f)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–∞: {e}")

    def _save_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            with open(self.positions_file, 'w', encoding='utf-8') as f:
                data = {key: pos.to_dict() for key, pos in self.tracked_positions.items()}
                json.dump(data, f, indent=2, ensure_ascii=False)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(self.position_history[-1000:], f, indent=2, ensure_ascii=False)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–∞: {e}")

    def track_system_position(self, symbol: str, side: str, size: float,
                            entry_price: float, strategy: str,
                            order_id: Optional[str] = None) -> str:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π

        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–∑–∏—Ü–∏–∏
        """
        with self._lock:
            position_key = f"{symbol}_{side}_{int(entry_price)}_{int(size*1000000)}"

            tracked_pos = TrackedPosition(
                symbol=symbol,
                side=side,
                size=size,
                entry_price=entry_price,
                origin=PositionOrigin.SYSTEM,
                strategy=strategy,
                created_time=datetime.now(timezone.utc),
                system_order_id=order_id,
                comment=f"Opened by {strategy} strategy"
            )

            self.tracked_positions[position_key] = tracked_pos

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.position_history.append({
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "action": "position_opened",
                "position_key": position_key,
                "data": tracked_pos.to_dict()
            })

            self._save_data()

            self.logger.info(f"‚úÖ System position tracked: {symbol} {side} {size} @ {entry_price} ({strategy})")
            return position_key

    def scan_and_classify_positions(self, current_positions: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Ö –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è

        Args:
            current_positions: –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –æ—Ç API Bybit

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        """
        with self._lock:
            classified = {}

            for pos in current_positions:
                if float(pos.get('size', 0)) == 0:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏

                symbol = pos.get('symbol')
                side = pos.get('side')
                size = float(pos.get('size', 0))
                entry_price = float(pos.get('avgPrice', 0))
                created_time_ms = pos.get('createdTime')

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                bybit_created_time = None
                if created_time_ms:
                    bybit_created_time = datetime.fromtimestamp(
                        int(created_time_ms) / 1000, timezone.utc
                    )

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á
                position_key = f"{symbol}_{side}_{int(entry_price)}_{int(size*1000000)}"

                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
                origin = self._classify_position(pos, bybit_created_time)

                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                if position_key not in self.tracked_positions:
                    tracked_pos = TrackedPosition(
                        symbol=symbol,
                        side=side,
                        size=size,
                        entry_price=entry_price,
                        origin=origin,
                        created_time=datetime.now(timezone.utc),
                        bybit_created_time=bybit_created_time,
                        comment=self._get_origin_comment(origin, bybit_created_time)
                    )

                    self.tracked_positions[position_key] = tracked_pos

                    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
                    self.logger.info(f"üîç Discovered position: {symbol} {side} {size} @ {entry_price} ({origin.value})")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                classified[position_key] = {
                    'position_data': pos,
                    'tracked_data': self.tracked_positions[position_key].to_dict(),
                    'classification': {
                        'origin': self.tracked_positions[position_key].origin.value,
                        'is_system': self.tracked_positions[position_key].origin == PositionOrigin.SYSTEM,
                        'strategy': self.tracked_positions[position_key].strategy,
                        'age_days': self._calculate_position_age(bybit_created_time),
                        'comment': self.tracked_positions[position_key].comment
                    }
                }

            self._save_data()
            return classified

    def _classify_position(self, pos: Dict[str, Any], created_time: Optional[datetime]) -> PositionOrigin:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""

        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if created_time and created_time < self.system_startup_time - timedelta(minutes=5):
            return PositionOrigin.INHERITED

        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è (–±–æ–ª–µ–µ 7 –¥–Ω–µ–π)
        if created_time and (datetime.now(timezone.utc) - created_time).days > 7:
            return PositionOrigin.EXTERNAL

        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª
        symbol = pos.get('symbol')
        side = pos.get('side')
        entry_price = float(pos.get('avgPrice', 0))

        if self._check_in_trade_journal(symbol, side, entry_price, created_time):
            return PositionOrigin.SYSTEM

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤–Ω–µ—à–Ω–µ–π
        return PositionOrigin.EXTERNAL

    def _check_in_trade_journal(self, symbol: str, side: str, entry_price: float,
                              created_time: Optional[datetime]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∂—É—Ä–Ω–∞–ª–µ"""
        try:
            journal_file = os.path.join(self.data_dir, "trade_journal.csv")
            if not os.path.exists(journal_file):
                return False

            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫ (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            with open(journal_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            price_tolerance = 10.0  # $10 tolerance
            time_tolerance = timedelta(minutes=10)  # 10 –º–∏–Ω—É—Ç tolerance

            for line in lines[-1000:]:
                try:
                    fields = line.strip().split(',')
                    if len(fields) >= 4:
                        log_price = float(fields[3])  # entry_price
                        log_signal = fields[2].upper()  # signal

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        if (abs(log_price - entry_price) < price_tolerance and
                            side.upper() in log_signal):
                            return True

                except (ValueError, IndexError):
                    continue

            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞: {e}")
            return False

    def _calculate_position_age(self, created_time: Optional[datetime]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–Ω—è—Ö"""
        if not created_time:
            return 0.0

        age = datetime.now(timezone.utc) - created_time
        return age.total_seconds() / (24 * 3600)  # –í –¥–Ω—è—Ö

    def _get_origin_comment(self, origin: PositionOrigin, created_time: Optional[datetime]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏"""
        if origin == PositionOrigin.SYSTEM:
            return "Opened by trading system"
        elif origin == PositionOrigin.EXTERNAL:
            return "Opened externally (manual trading)"
        elif origin == PositionOrigin.INHERITED:
            age_days = self._calculate_position_age(created_time)
            return f"Inherited from before system startup ({age_days:.1f} days old)"
        else:
            return "Unknown origin"

    def get_neural_data(self) -> Dict[str, Any]:
        """
        üß† –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏

        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è ML
        """
        with self._lock:
            neural_data = {
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "system_startup": self.system_startup_time.isoformat(),
                "positions_summary": {
                    "total": len(self.tracked_positions),
                    "system": len([p for p in self.tracked_positions.values() if p.origin == PositionOrigin.SYSTEM]),
                    "external": len([p for p in self.tracked_positions.values() if p.origin == PositionOrigin.EXTERNAL]),
                    "inherited": len([p for p in self.tracked_positions.values() if p.origin == PositionOrigin.INHERITED])
                },
                "positions": [],
                "insights": self._generate_insights()
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            for key, pos in self.tracked_positions.items():
                neural_data["positions"].append({
                    "key": key,
                    "symbol": pos.symbol,
                    "side": pos.side,
                    "size": pos.size,
                    "entry_price": pos.entry_price,
                    "origin": pos.origin.value,
                    "strategy": pos.strategy,
                    "age_hours": self._calculate_position_age(pos.bybit_created_time) * 24,
                    "is_profitable": None,  # –ù—É–∂–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                    "risk_level": self._assess_position_risk(pos)
                })

            return neural_data

    def _generate_insights(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–∫–∏"""
        insights = {
            "external_position_ratio": 0.0,
            "avg_position_age_days": 0.0,
            "most_common_origin": "unknown",
            "risk_indicators": []
        }

        if not self.tracked_positions:
            return insights

        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        external_count = len([p for p in self.tracked_positions.values() if p.origin == PositionOrigin.EXTERNAL])
        insights["external_position_ratio"] = external_count / len(self.tracked_positions)

        # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∑–∏—Ü–∏–π
        ages = [self._calculate_position_age(p.bybit_created_time) for p in self.tracked_positions.values()]
        insights["avg_position_age_days"] = sum(ages) / len(ages) if ages else 0.0

        # –°–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        origins = [p.origin.value for p in self.tracked_positions.values()]
        if origins:
            insights["most_common_origin"] = max(set(origins), key=origins.count)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        if external_count > 0:
            insights["risk_indicators"].append("external_positions_detected")
        if insights["avg_position_age_days"] > 7:
            insights["risk_indicators"].append("old_positions_present")

        return insights

    def _assess_position_risk(self, pos: TrackedPosition) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        age_days = self._calculate_position_age(pos.bybit_created_time)

        if pos.origin == PositionOrigin.EXTERNAL:
            return "high"  # –í–Ω–µ—à–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        elif age_days > 7:
            return "medium"  # –°—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ = —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        else:
            return "low"  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫

    def close_position(self, position_key: str, exit_price: float, reason: str = "") -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        with self._lock:
            if position_key in self.tracked_positions:
                pos = self.tracked_positions[position_key]

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.position_history.append({
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "action": "position_closed",
                    "position_key": position_key,
                    "exit_price": exit_price,
                    "reason": reason,
                    "data": pos.to_dict()
                })

                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del self.tracked_positions[position_key]
                self._save_data()

                self.logger.info(f"‚ùå Position closed: {pos.symbol} {pos.side} @ {exit_price} ({reason})")

    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞"""
        with self._lock:
            return {
                "active_positions": len(self.tracked_positions),
                "total_history": len(self.position_history),
                "origins_breakdown": {
                    origin.value: len([p for p in self.tracked_positions.values() if p.origin == origin])
                    for origin in PositionOrigin
                },
                "system_startup": self.system_startup_time.isoformat(),
                "last_scan": datetime.now(timezone.utc).isoformat()
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_position_tracker = None
_tracker_lock = threading.RLock()


def get_position_tracker() -> PositionTracker:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    global _position_tracker

    if _position_tracker is None:
        with _tracker_lock:
            if _position_tracker is None:
                _position_tracker = PositionTracker()

    return _position_tracker