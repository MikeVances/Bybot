# bot/core/thread_safe_state.py
"""
üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: Thread-Safe State Management
–ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –°–û–°–¢–û–Ø–ù–ò–ô –ë–û–¢–ê
ZERO TOLERANCE –ö RACE CONDITIONS!
"""

import threading
import time
from datetime import datetime, timezone
from typing import Optional, Dict, Any, List, Tuple
from dataclasses import dataclass, field
import logging
from enum import Enum

from bot.core.exceptions import ThreadSafetyViolationError


class PositionSide(Enum):
    """–°—Ç–æ—Ä–æ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏"""
    BUY = "Buy"
    SELL = "Sell"


@dataclass
class PositionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    side: Optional[PositionSide] = None
    size: float = 0.0
    entry_price: float = 0.0
    unrealized_pnl: float = 0.0
    realized_pnl: float = 0.0
    last_update: datetime = field(default_factory=datetime.now)
    avg_price: float = 0.0
    leverage: float = 1.0
    margin: float = 0.0
    strategy_name: Optional[str] = None  # –°—Ç—Ä–∞—Ç–µ–≥–∏—è-–≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–∑–∏—Ü–∏–∏
    
    @property
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.size > 0.0
    
    @property
    def is_long(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.side == PositionSide.BUY
    
    @property
    def is_short(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏"""  
        return self.side == PositionSide.SELL


class ThreadSafeBotState:
    """
    üõ°Ô∏è THREAD-SAFE –°–û–°–¢–û–Ø–ù–ò–ï –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–æ—Ç–∞ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤:
    - –ü–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    - P&L —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ (emergency_stop, etc.)
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    def __init__(self):
        # üîí –û–°–ù–û–í–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê
        self._lock = threading.RLock()
        
        # üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–ó–ò–¶–ò–ô
        self._positions: Dict[str, PositionInfo] = {}
        
        # üìà –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        self._global_stats = {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_pnl': 0.0,
            'daily_pnl': 0.0,
            'max_drawdown': 0.0,
            'start_time': datetime.now(),
            'last_trade_time': None
        }
        
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–õ–ê–ì–ò
        self._emergency_stop = False
        self._trading_enabled = True
        self._risk_limits_exceeded = False
        
        # üìù –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú
        self._strategy_stats: Dict[str, Dict[str, Any]] = {}
        
        # ‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
        self._last_sync_time = {}
        self._sync_counts = {}
        
        # üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        self.logger = logging.getLogger('bot_state')
        self.logger.info("üõ°Ô∏è ThreadSafeBotState –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π")
    
    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ====================
    
    def get_position(self, symbol: str) -> Optional[PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
        with self._lock:
            return self._positions.get(symbol)
    
    def set_position(self, symbol: str, side: Optional[str], size: float,
                    entry_price: float = 0.0, avg_price: float = 0.0,
                    unrealized_pnl: float = 0.0, leverage: float = 1.0,
                    strategy_name: Optional[str] = None) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
        with self._lock:
            if symbol not in self._positions:
                self._positions[symbol] = PositionInfo(symbol=symbol)

            pos = self._positions[symbol]
            pos.side = PositionSide(side) if side else None
            pos.size = size
            pos.entry_price = entry_price
            pos.avg_price = avg_price or entry_price
            pos.unrealized_pnl = unrealized_pnl
            pos.leverage = leverage
            pos.strategy_name = strategy_name
            pos.last_update = datetime.now()
            
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
            if size == 0.0:
                pos.side = None
                pos.entry_price = 0.0
                pos.avg_price = 0.0
                pos.unrealized_pnl = 0.0
            
            self.logger.debug(f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {symbol}: {side} {size} @ {entry_price}")
    
    def update_position_pnl(self, symbol: str, current_price: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ P&L –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ"""
        with self._lock:
            if symbol not in self._positions:
                return
                
            pos = self._positions[symbol]
            if not pos.is_active or pos.entry_price == 0:
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º unrealized P&L
            if pos.is_long:
                pos.unrealized_pnl = (current_price - pos.entry_price) * pos.size
            elif pos.is_short:
                pos.unrealized_pnl = (pos.entry_price - current_price) * pos.size
            
            pos.last_update = datetime.now()
    
    def close_position(self, symbol: str, exit_price: float, realized_pnl: float = None) -> Optional[PositionInfo]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º realized P&L"""
        with self._lock:
            if symbol not in self._positions:
                return None
            
            pos = self._positions[symbol]
            if not pos.is_active:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º realized P&L –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if realized_pnl is None:
                if pos.is_long:
                    realized_pnl = (exit_price - pos.entry_price) * pos.size
                elif pos.is_short:
                    realized_pnl = (pos.entry_price - exit_price) * pos.size
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._global_stats['total_trades'] += 1
            self._global_stats['total_pnl'] += realized_pnl
            self._global_stats['daily_pnl'] += realized_pnl
            self._global_stats['last_trade_time'] = datetime.now()
            
            if realized_pnl > 0:
                self._global_stats['winning_trades'] += 1
            else:
                self._global_stats['losing_trades'] += 1
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            closed_position = PositionInfo(
                symbol=pos.symbol,
                side=pos.side,
                size=pos.size,
                entry_price=pos.entry_price,
                unrealized_pnl=pos.unrealized_pnl,
                realized_pnl=realized_pnl,
                last_update=datetime.now()
            )
            
            # –û—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            pos.size = 0.0
            pos.side = None
            pos.entry_price = 0.0
            pos.avg_price = 0.0
            pos.unrealized_pnl = 0.0
            pos.realized_pnl = realized_pnl
            pos.strategy_name = None  # –û—á–∏—â–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            
            self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ {symbol}: P&L={realized_pnl:.2f}")
            return closed_position
    
    def clear_position(self, symbol: str) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —Ä–∞—Å—á–µ—Ç–∞ P&L
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞
        """
        with self._lock:
            if symbol not in self._positions:
                return False
            
            pos = self._positions[symbol]
            if not pos.is_active:
                return False
            
            # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            pos.size = 0.0
            pos.side = None
            pos.entry_price = 0.0
            pos.avg_price = 0.0
            pos.unrealized_pnl = 0.0
            pos.realized_pnl = 0.0
            pos.strategy_name = None  # –û—á–∏—â–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            pos.last_update = datetime.now()
            
            self.logger.info(f"üßπ –ü–æ–∑–∏—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–∞: {symbol}")
            return True
    
    def get_all_positions(self) -> Dict[str, PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        with self._lock:
            return self._positions.copy()
    
    def get_active_positions(self) -> Dict[str, PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        with self._lock:
            return {
                symbol: pos for symbol, pos in self._positions.items() 
                if pos.is_active
            }
    
    # ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–õ–ê–ì–ò ====================
    
    @property
    def emergency_stop(self) -> bool:
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        with self._lock:
            return self._emergency_stop
    
    @emergency_stop.setter
    def emergency_stop(self, value: bool) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        with self._lock:
            if value != self._emergency_stop:
                self._emergency_stop = value
                if value:
                    self.logger.critical("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
                else:
                    self.logger.info("‚úÖ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    @property
    def trading_enabled(self) -> bool:
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        with self._lock:
            return self._trading_enabled and not self._emergency_stop
    
    @trading_enabled.setter
    def trading_enabled(self, value: bool) -> None:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        with self._lock:
            self._trading_enabled = value
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if value else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
            self.logger.info(f"üìä –¢–æ—Ä–≥–æ–≤–ª—è {status}")
    
    @property
    def risk_limits_exceeded(self) -> bool:
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞"""
        with self._lock:
            return self._risk_limits_exceeded
    
    @risk_limits_exceeded.setter  
    def risk_limits_exceeded(self, value: bool) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        with self._lock:
            self._risk_limits_exceeded = value
            if value:
                self.logger.warning("‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–´ –õ–ò–ú–ò–¢–´ –†–ò–°–ö–ê!")
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_global_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            stats = self._global_stats.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_trades = stats['total_trades']
            if total_trades > 0:
                stats['win_rate'] = (stats['winning_trades'] / total_trades) * 100
                stats['avg_pnl'] = stats['total_pnl'] / total_trades
            else:
                stats['win_rate'] = 0.0
                stats['avg_pnl'] = 0.0
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π unrealized P&L
            total_unrealized = sum(
                pos.unrealized_pnl for pos in self._positions.values() 
                if pos.is_active
            )
            stats['unrealized_pnl'] = total_unrealized
            stats['total_equity'] = stats['total_pnl'] + total_unrealized
            
            return stats
    
    def update_strategy_stats(self, strategy_name: str, trade_pnl: float, 
                            signal_strength: float = None) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        with self._lock:
            if strategy_name not in self._strategy_stats:
                self._strategy_stats[strategy_name] = {
                    'total_trades': 0,
                    'winning_trades': 0,
                    'losing_trades': 0,
                    'total_pnl': 0.0,
                    'avg_pnl': 0.0,
                    'win_rate': 0.0,
                    'last_trade_time': None,
                    'signal_strengths': []
                }
            
            stats = self._strategy_stats[strategy_name]
            stats['total_trades'] += 1
            stats['total_pnl'] += trade_pnl
            stats['last_trade_time'] = datetime.now()
            
            if trade_pnl > 0:
                stats['winning_trades'] += 1
            else:
                stats['losing_trades'] += 1
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            stats['win_rate'] = (stats['winning_trades'] / stats['total_trades']) * 100
            stats['avg_pnl'] = stats['total_pnl'] / stats['total_trades']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            if signal_strength is not None:
                stats['signal_strengths'].append(signal_strength)
                # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–Ω–∞—á–µ–Ω–∏–π
                if len(stats['signal_strengths']) > 100:
                    stats['signal_strengths'] = stats['signal_strengths'][-100:]
    
    def get_strategy_stats(self, strategy_name: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        with self._lock:
            if strategy_name:
                return self._strategy_stats.get(strategy_name, {})
            return self._strategy_stats.copy()
    
    # ==================== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ====================
    
    def sync_with_exchange(self, symbol: str, exchange_position: Dict[str, Any]) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏—Ä–∂–∏"""
        with self._lock:
            try:
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                now = datetime.now()
                if symbol not in self._sync_counts:
                    self._sync_counts[symbol] = 0
                    self._last_sync_time[symbol] = now
                
                self._sync_counts[symbol] += 1
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                time_since_last = (now - self._last_sync_time[symbol]).total_seconds()
                if time_since_last > 30:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    self.logger.debug(f"üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {symbol}: {self._sync_counts[symbol]} —Ä–∞–∑ –∑–∞ {time_since_last:.1f}s")
                    self._last_sync_time[symbol] = now
                    self._sync_counts[symbol] = 0
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–∏—Ä–∂–∏
                size = float(exchange_position.get('size', 0))
                side = exchange_position.get('side') if size > 0 else None
                avg_price = float(exchange_position.get('avgPrice', 0))
                unrealized_pnl = float(exchange_position.get('unrealisedPnl', 0))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.set_position(
                    symbol=symbol,
                    side=side,
                    size=size,
                    entry_price=avg_price,
                    avg_price=avg_price,
                    unrealized_pnl=unrealized_pnl
                )
                
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {symbol}: {e}")
                return False
    
    # ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ====================
    
    def get_diagnostic_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        with self._lock:
            return {
                'positions_count': len(self._positions),
                'active_positions_count': len(self.get_active_positions()),
                'strategies_count': len(self._strategy_stats),
                'emergency_stop': self._emergency_stop,
                'trading_enabled': self._trading_enabled,
                'risk_limits_exceeded': self._risk_limits_exceeded,
                'total_sync_operations': sum(self._sync_counts.values()),
                'uptime_seconds': (datetime.now() - self._global_stats['start_time']).total_seconds()
            }
    
    def validate_state_consistency(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._lock:
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            for symbol, pos in self._positions.items():
                if pos.size < 0:
                    issues.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {pos.size}")
                
                if pos.is_active and pos.entry_price <= 0:
                    issues.append(f"–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol} —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π –≤—Ö–æ–¥–∞")
                
                if pos.side and not pos.is_active:
                    issues.append(f"–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol} –∏–º–µ–µ—Ç —Å—Ç–æ—Ä–æ–Ω—É {pos.side}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self._global_stats
            if stats['winning_trades'] + stats['losing_trades'] != stats['total_trades']:
                issues.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–æ–≤")
            
            return issues


# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –°–û–°–¢–û–Ø–ù–ò–Ø –ë–û–¢–ê
_bot_state_instance = None
_bot_state_lock = threading.RLock()


def get_bot_state() -> ThreadSafeBotState:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    global _bot_state_instance
    
    if _bot_state_instance is None:
        with _bot_state_lock:
            if _bot_state_instance is None:
                _bot_state_instance = ThreadSafeBotState()
    
    return _bot_state_instance


def reset_bot_state():
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    global _bot_state_instance
    with _bot_state_lock:
        _bot_state_instance = None