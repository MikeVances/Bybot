# bot/core/error_handler.py
"""
üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Error Handler
–ï–î–ò–ù–ê–Ø –¢–û–ß–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –û–®–ò–ë–û–ö –í –°–ò–°–¢–ï–ú–ï
–¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ò RECOVERY STRATEGIES
"""

import logging
import traceback
import threading
from typing import Dict, Any, Optional, Callable, List, Type, Union
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, field
import json

from bot.core.exceptions import (
    TradingBotException, OrderRejectionError, RateLimitError, 
    PositionConflictError, EmergencyStopError, APIKeyLeakError,
    RiskLimitExceededError, ThreadSafetyViolationError
)
from bot.core.secure_logger import get_secure_logger
from bot.core.emergency_stop import global_emergency_stop


class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    CRITICAL = "CRITICAL"      # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é —Ç–æ—Ä–≥–æ–≤–ª—é
    HIGH = "HIGH"              # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é  
    MEDIUM = "MEDIUM"          # –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é
    LOW = "LOW"                # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç
    INFO = "INFO"              # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


class RecoveryStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    EMERGENCY_STOP = "emergency_stop"       # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    STRATEGY_RESTART = "strategy_restart"   # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    RETRY_WITH_BACKOFF = "retry_backoff"    # –ü–æ–≤—Ç–æ—Ä —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    SKIP_ITERATION = "skip_iteration"       # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    IGNORE = "ignore"                       # –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    CUSTOM_HANDLER = "custom_handler"       # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫


@dataclass
class ErrorContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    timestamp: datetime = field(default_factory=datetime.now)
    strategy_name: str = "unknown"
    symbol: str = "unknown" 
    operation: str = "unknown"
    user_data: Dict[str, Any] = field(default_factory=dict)
    stack_trace: str = ""
    correlation_id: str = ""


@dataclass 
class ErrorRule:
    """–ü—Ä–∞–≤–∏–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏"""
    exception_type: Type[Exception]
    severity: ErrorSeverity
    recovery_strategy: RecoveryStrategy
    max_retries: int = 3
    backoff_seconds: int = 1
    custom_handler: Optional[Callable] = None
    description: str = ""


class TradingErrorHandler:
    """
    üíÄ –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º –∏ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏  
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    - Integration —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –∞–ª–µ—Ä—Ç–∞–º–∏
    - Thread-safe –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    """
    
    def __init__(self):
        # üîí THREAD-SAFETY
        self._lock = threading.RLock()
        
        # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö
        self._error_counts: Dict[str, int] = {}
        self._error_history: List[Dict[str, Any]] = []
        self._recovery_stats: Dict[str, int] = {}
        
        # ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ –û–ë–†–ê–ë–û–¢–ö–ò
        self._error_rules: Dict[Type[Exception], ErrorRule] = {}
        self._setup_default_rules()
        
        # üîÑ RETRY –ú–ï–•–ê–ù–ò–ó–ú–´
        self._retry_attempts: Dict[str, Dict[str, Any]] = {}
        
        # üö® CIRCUIT BREAKER
        self._circuit_breaker_state: Dict[str, Dict[str, Any]] = {}
        
        # üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï  
        self.logger = get_secure_logger('error_handler')
        
        # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì
        self._monitoring_callbacks: List[Callable] = []
        
        self.logger.info("üíÄ TradingErrorHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
    
    def _setup_default_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò - EMERGENCY STOP
        critical_errors = [
            EmergencyStopError,
            APIKeyLeakError, 
            ThreadSafetyViolationError,
        ]
        
        for error_type in critical_errors:
            self._error_rules[error_type] = ErrorRule(
                exception_type=error_type,
                severity=ErrorSeverity.CRITICAL,
                recovery_strategy=RecoveryStrategy.EMERGENCY_STOP,
                description=f"Critical system error: {error_type.__name__}"
            )
        
        # üî¥ –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –û–°–¢–ê–ù–û–í–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò
        high_priority_errors = [
            RiskLimitExceededError,
            PositionConflictError,
        ]
        
        for error_type in high_priority_errors:
            self._error_rules[error_type] = ErrorRule(
                exception_type=error_type,
                severity=ErrorSeverity.HIGH,
                recovery_strategy=RecoveryStrategy.STRATEGY_RESTART,
                max_retries=2,
                backoff_seconds=30,
                description=f"High priority error: {error_type.__name__}"
            )
        
        # üü† –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - RETRY –° BACKOFF
        medium_priority_errors = [
            OrderRejectionError,
            RateLimitError,
        ]
        
        for error_type in medium_priority_errors:
            self._error_rules[error_type] = ErrorRule(
                exception_type=error_type,
                severity=ErrorSeverity.MEDIUM, 
                recovery_strategy=RecoveryStrategy.RETRY_WITH_BACKOFF,
                max_retries=3,
                backoff_seconds=5,
                description=f"Recoverable error: {error_type.__name__}"
            )
        
        # üü° –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
        self._error_rules[ValueError] = ErrorRule(
            exception_type=ValueError,
            severity=ErrorSeverity.MEDIUM,
            recovery_strategy=RecoveryStrategy.SKIP_ITERATION,
            description="Invalid parameter value"
        )
        
        self._error_rules[ConnectionError] = ErrorRule(
            exception_type=ConnectionError,
            severity=ErrorSeverity.MEDIUM,
            recovery_strategy=RecoveryStrategy.RETRY_WITH_BACKOFF,
            max_retries=5,
            backoff_seconds=10,
            description="Network connection error"
        )
        
        # üîµ –û–ë–©–ò–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
        self._error_rules[Exception] = ErrorRule(
            exception_type=Exception,
            severity=ErrorSeverity.HIGH,
            recovery_strategy=RecoveryStrategy.STRATEGY_RESTART,
            max_retries=1,
            description="Unhandled exception"
        )
    
    def handle_error(self, exception: Exception, context: ErrorContext = None, 
                    custom_recovery: RecoveryStrategy = None) -> Any:
        """
        üõ°Ô∏è –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö
        
        Args:
            exception: –í–æ–∑–Ω–∏–∫—à–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 
            custom_recovery: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None
        """
        with self._lock:
            try:
                # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if context is None:
                    context = ErrorContext()
                
                context.stack_trace = traceback.format_exc()
                
                # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                error_rule = self._get_error_rule(exception)
                if custom_recovery:
                    error_rule.recovery_strategy = custom_recovery
                
                # 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                self._log_error(exception, context, error_rule)
                
                # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_error_stats(exception, context, error_rule)
                
                # 5. Circuit Breaker –ø—Ä–æ–≤–µ—Ä–∫–∞
                if self._check_circuit_breaker(context, error_rule):
                    return self._execute_circuit_breaker(context)
                
                # 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                return self._execute_recovery_strategy(exception, context, error_rule)
                
            except Exception as handler_error:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ!
                self.logger.critical(
                    f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í ERROR HANDLER: {handler_error}"
                )
                # Fallback - –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                self._emergency_fallback()
                raise handler_error
    
    def _get_error_rule(self, exception: Exception) -> ErrorRule:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        exception_type = type(exception)
        
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if exception_type in self._error_rules:
            return self._error_rules[exception_type]
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        for rule_type, rule in self._error_rules.items():
            if isinstance(exception, rule_type):
                return rule
        
        # Fallback –Ω–∞ –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return self._error_rules[Exception]
    
    def _log_error(self, exception: Exception, context: ErrorContext, rule: ErrorRule):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        error_data = {
            'exception_type': type(exception).__name__,
            'message': str(exception),
            'severity': rule.severity.value,
            'strategy': context.strategy_name,
            'symbol': context.symbol,
            'operation': context.operation,
            'recovery_strategy': rule.recovery_strategy.value,
            'timestamp': context.timestamp.isoformat()
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏
        if rule.severity == ErrorSeverity.CRITICAL:
            self.logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_data}")
        elif rule.severity == ErrorSeverity.HIGH:
            self.logger.error(f"‚ùå –°–ï–†–¨–Å–ó–ù–ê–Ø –û–®–ò–ë–ö–ê: {error_data}")
        elif rule.severity == ErrorSeverity.MEDIUM:
            self.logger.warning(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê: {error_data}")
        else:
            self.logger.info(f"‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: {error_data}")
    
    def _update_error_stats(self, exception: Exception, context: ErrorContext, rule: ErrorRule):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        error_key = f"{type(exception).__name__}:{context.strategy_name}"
        
        self._error_counts[error_key] = self._error_counts.get(error_key, 0) + 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
        error_record = {
            'timestamp': context.timestamp.isoformat(),
            'exception': type(exception).__name__,
            'message': str(exception),
            'strategy': context.strategy_name,
            'symbol': context.symbol,
            'operation': context.operation,
            'severity': rule.severity.value,
            'recovery': rule.recovery_strategy.value
        }
        
        self._error_history.append(error_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self._error_history) > 1000:
            self._error_history = self._error_history[-1000:]
    
    def _check_circuit_breaker(self, context: ErrorContext, rule: ErrorRule) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ circuit breaker –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤"""
        if rule.severity not in [ErrorSeverity.CRITICAL, ErrorSeverity.HIGH]:
            return False
        
        circuit_key = f"{context.strategy_name}:{context.operation}"
        
        if circuit_key not in self._circuit_breaker_state:
            self._circuit_breaker_state[circuit_key] = {
                'failure_count': 0,
                'last_failure': None,
                'state': 'closed'  # closed, open, half_open
            }
        
        circuit = self._circuit_breaker_state[circuit_key]
        circuit['failure_count'] += 1
        circuit['last_failure'] = datetime.now()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º circuit –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        if circuit['failure_count'] >= 5 and circuit['state'] == 'closed':
            circuit['state'] = 'open'
            self.logger.critical(
                f"üö® CIRCUIT BREAKER –û–¢–ö–†–´–¢ –¥–ª—è {circuit_key}: {circuit['failure_count']} –æ—à–∏–±–æ–∫"
            )
            return True
        
        return circuit['state'] == 'open'
    
    def _execute_circuit_breaker(self, context: ErrorContext) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º circuit breaker"""
        self.logger.critical(
            f"‚ö° CIRCUIT BREAKER: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {context.strategy_name}:{context.operation}"
        )
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ç.–¥.
        raise EmergencyStopError(
            f"Circuit breaker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {context.strategy_name}:{context.operation}"
        )
    
    def _execute_recovery_strategy(self, exception: Exception, context: ErrorContext, 
                                 rule: ErrorRule) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        recovery_key = f"{rule.recovery_strategy.value}:{context.strategy_name}"
        self._recovery_stats[recovery_key] = self._recovery_stats.get(recovery_key, 0) + 1
        
        if rule.recovery_strategy == RecoveryStrategy.EMERGENCY_STOP:
            return self._handle_emergency_stop(exception, context)
            
        elif rule.recovery_strategy == RecoveryStrategy.STRATEGY_RESTART:
            return self._handle_strategy_restart(exception, context)
            
        elif rule.recovery_strategy == RecoveryStrategy.RETRY_WITH_BACKOFF:
            return self._handle_retry_with_backoff(exception, context, rule)
            
        elif rule.recovery_strategy == RecoveryStrategy.SKIP_ITERATION:
            return self._handle_skip_iteration(exception, context)
            
        elif rule.recovery_strategy == RecoveryStrategy.IGNORE:
            return self._handle_ignore(exception, context)
            
        elif rule.recovery_strategy == RecoveryStrategy.CUSTOM_HANDLER:
            return self._handle_custom(exception, context, rule)
        
        else:
            self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {rule.recovery_strategy}")
            return None
    
    def _handle_emergency_stop(self, exception: Exception, context: ErrorContext) -> None:
        """–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.critical("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for callback in self._monitoring_callbacks:
            try:
                callback('emergency_stop', {
                    'exception': str(exception),
                    'context': context.__dict__
                })
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ callback: {e}")
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        raise EmergencyStopError(f"Emergency stop triggered by {type(exception).__name__}: {exception}")
    
    def _handle_strategy_restart(self, exception: Exception, context: ErrorContext) -> None:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.logger.warning(f"üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–¢–†–ê–¢–ï–ì–ò–ò: {context.strategy_name}")
        
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ callback)
        return {'action': 'restart_strategy', 'strategy': context.strategy_name}
    
    def _handle_retry_with_backoff(self, exception: Exception, context: ErrorContext, 
                                 rule: ErrorRule) -> Any:
        """–ü–æ–≤—Ç–æ—Ä —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        retry_key = f"{context.strategy_name}:{context.operation}:{context.symbol}"
        
        if retry_key not in self._retry_attempts:
            self._retry_attempts[retry_key] = {
                'count': 0,
                'last_attempt': None
            }
        
        retry_info = self._retry_attempts[retry_key]
        retry_info['count'] += 1
        retry_info['last_attempt'] = datetime.now()
        
        if retry_info['count'] <= rule.max_retries:
            backoff_time = rule.backoff_seconds * (2 ** (retry_info['count'] - 1))
            
            self.logger.info(
                f"üîÑ RETRY {retry_info['count']}/{rule.max_retries} —á–µ—Ä–µ–∑ {backoff_time}s "
                f"–¥–ª—è {context.strategy_name}:{context.operation}"
            )
            
            import time
            time.sleep(backoff_time)
            
            return {'action': 'retry', 'attempt': retry_info['count'], 'backoff': backoff_time}
        else:
            # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω
            self.logger.error(
                f"‚ùå –ú–ê–ö–°–ò–ú–£–ú –ü–û–ü–´–¢–û–ö –ò–°–ß–ï–†–ü–ê–ù –¥–ª—è {retry_key}: {retry_info['count']} –ø–æ–ø—ã—Ç–æ–∫"
            )
            
            # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
            del self._retry_attempts[retry_key]
            
            # –≠—Å–∫–∞–ª–∏—Ä—É–µ–º –¥–æ –±–æ–ª–µ–µ —Å–µ—Ä—å—ë–∑–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            return self._handle_strategy_restart(exception, context)
    
    def _handle_skip_iteration(self, exception: Exception, context: ErrorContext) -> None:
        """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏"""
        self.logger.info(f"‚è≠Ô∏è –ü–†–û–ü–£–°–ö –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {context.strategy_name}: {exception}")
        return {'action': 'skip', 'reason': str(exception)}
    
    def _handle_ignore(self, exception: Exception, context: ErrorContext) -> None:
        """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.logger.debug(f"ü§´ –ò–ì–ù–û–†–ò–†–£–ï–ú –æ—à–∏–±–∫—É –¥–ª—è {context.strategy_name}: {exception}")
        return {'action': 'ignore'}
    
    def _handle_custom(self, exception: Exception, context: ErrorContext, rule: ErrorRule) -> Any:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        if rule.custom_handler:
            try:
                return rule.custom_handler(exception, context)
            except Exception as handler_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ custom handler: {handler_error}")
                return self._handle_skip_iteration(exception, context)
        else:
            return self._handle_skip_iteration(exception, context)
    
    def _emergency_fallback(self):
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π fallback –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ"""
        try:
            # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
            with open('emergency_error.log', 'a') as f:
                f.write(f"{datetime.now().isoformat()} - CRITICAL ERROR HANDLER FAILURE\n")
                f.write(traceback.format_exc())
                f.write("\n" + "="*50 + "\n")
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ —Ñ–∞–π–ª –Ω–µ –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å - print –≤ stderr
            print("EMERGENCY: Critical error in error handler!")
    
    def add_monitoring_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._monitoring_callbacks.append(callback)
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        with self._lock:
            return {
                'total_errors': len(self._error_history),
                'error_counts': self._error_counts.copy(),
                'recovery_stats': self._recovery_stats.copy(),
                'circuit_breaker_states': {
                    k: {**v, 'last_failure': v['last_failure'].isoformat() if v['last_failure'] else None}
                    for k, v in self._circuit_breaker_state.items()
                },
                'recent_errors': self._error_history[-10:] if self._error_history else []
            }
    
    def reset_circuit_breaker(self, circuit_key: str) -> bool:
        """–°–±—Ä–æ—Å circuit breaker (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)"""
        with self._lock:
            if circuit_key in self._circuit_breaker_state:
                self._circuit_breaker_state[circuit_key] = {
                    'failure_count': 0,
                    'last_failure': None,
                    'state': 'closed'
                }
                self.logger.info(f"‚úÖ Circuit breaker —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {circuit_key}")
                return True
            return False


# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ERROR HANDLER
_error_handler_instance = None
_error_handler_lock = threading.RLock()


def get_error_handler() -> TradingErrorHandler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ error handler"""
    global _error_handler_instance
    
    if _error_handler_instance is None:
        with _error_handler_lock:
            if _error_handler_instance is None:
                _error_handler_instance = TradingErrorHandler()
    
    return _error_handler_instance


def handle_trading_error(exception: Exception, context: ErrorContext = None, 
                        custom_recovery: RecoveryStrategy = None) -> Any:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    error_handler = get_error_handler()
    return error_handler.handle_error(exception, context, custom_recovery)


def safe_execute(func: Callable, context: ErrorContext = None, 
                custom_recovery: RecoveryStrategy = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return func()
    except Exception as e:
        return handle_trading_error(e, context, custom_recovery)


def classify_trading_error(exception: Exception) -> str:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
    Returns:
        str: –¢–∏–ø –æ—à–∏–±–∫–∏
    """
    error_message = str(exception).lower()
    
    # –û—à–∏–±–∫–∏ API –ª–∏–º–∏—Ç–æ–≤
    if any(keyword in error_message for keyword in ['rate limit', 'too many requests', '429']):
        return 'rate_limit_error'
    
    # –û—à–∏–±–∫–∏ API –∫–ª—é—á–µ–π
    if any(keyword in error_message for keyword in ['api key', 'authentication', 'unauthorized', '401']):
        return 'authentication_error'
    
    # –û—à–∏–±–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
    if any(keyword in error_message for keyword in ['order', 'insufficient', 'balance', 'position']):
        return 'order_error'
    
    # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    if any(keyword in error_message for keyword in ['connection', 'timeout', 'network', 'dns']):
        return 'network_error'
    
    # –û—à–∏–±–∫–∏ –±–∏—Ä–∂–∏
    if any(keyword in error_message for keyword in ['bybit', 'exchange', 'market closed']):
        return 'exchange_error'
    
    # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if any(keyword in error_message for keyword in ['validation', 'invalid', 'format']):
        return 'validation_error'
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
    if isinstance(exception, (EmergencyStopError, ThreadSafetyViolationError)):
        return 'critical_system_error'
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    if isinstance(exception, (OrderRejectionError, PositionConflictError)):
        return 'trading_logic_error'
    
    # –û—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if isinstance(exception, APIKeyLeakError):
        return 'security_error'
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return 'unknown_error'


# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô ERROR HANDLER
_error_handler_instance = None
_error_handler_lock = threading.RLock()


def get_error_handler() -> TradingErrorHandler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ error handler"""
    global _error_handler_instance
    
    if _error_handler_instance is None:
        with _error_handler_lock:
            if _error_handler_instance is None:
                _error_handler_instance = TradingErrorHandler()
    
    return _error_handler_instance


def handle_trading_error(exception: Exception, context: ErrorContext = None, 
                        custom_recovery: RecoveryStrategy = None) -> Any:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    error_handler = get_error_handler()
    return error_handler.handle_error(exception, context, custom_recovery)