# bot/core/order_manager.py
"""
üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: Thread-Safe Order Manager
–ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –¢–û–†–ì–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô
ZERO TOLERANCE –ö –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ú –û–†–î–ï–†–ê–ú!
"""

import threading
import time
import queue
import logging
from typing import Dict, Optional, Tuple, Any, List
from datetime import datetime, timedelta
from collections import defaultdict
from dataclasses import dataclass
from concurrent.futures import Future, TimeoutError as FutureTimeoutError

from bot.core.exceptions import OrderRejectionError, RateLimitError, PositionConflictError


@dataclass
class OrderRequest:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
    symbol: str
    side: str
    order_type: str
    qty: float
    price: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    reduce_only: bool = False
    position_idx: Optional[int] = None
    strategy_name: str = "unknown"
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()


@dataclass
class _OrderJob:
    api: Any
    request: OrderRequest
    order_key: str
    future: Future
    submitted_at: datetime


class ThreadSafeOrderManager:
    """
    üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –û–†–î–ï–†–û–í –° –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    - Rate limiting –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏–º–≤–æ–ª–∞
    - –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    - –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    - –ü–æ–ª–Ω–∞—è thread-safety
    """
    
    def __init__(self, max_orders_per_minute: int = 10, *, worker_count: int = 2,
                 queue_capacity: int = 128, order_timeout_seconds: float = 10.0,
                 max_worker_retries: int = 3):
        # üîí –û–°–ù–û–í–ù–´–ï –ë–õ–û–ö–ò–†–û–í–ö–ò
        self._global_lock = threading.RLock()
        self._symbol_locks: Dict[str, threading.RLock] = {}
        self._lock_creation_lock = threading.RLock()
        
        # üìä –°–û–°–¢–û–Ø–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê
        self._emergency_stop = False
        self._max_orders_per_minute = max_orders_per_minute
        
        # üìà –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ü–û–ó–ò–¶–ò–ô –ü–û –°–ò–ú–í–û–õ–ê–ú
        self._active_positions: Dict[str, Dict[str, Any]] = {}
        self._pending_orders: Dict[str, Dict[str, Any]] = {}
        
        # ‚è∞ RATE LIMITING
        self._order_timestamps: Dict[str, list] = defaultdict(list)
        self._last_order_time: Dict[str, datetime] = {}
        
        # üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        self.logger = logging.getLogger('order_manager')
        self.logger.setLevel(logging.INFO)
        
        # üî¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        self._stats = {
            'total_orders': 0,
            'rejected_orders': 0,
            'duplicate_blocks': 0,
            'rate_limit_blocks': 0
        }

        self.logger.info("üõ°Ô∏è ThreadSafeOrderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π")

        # ‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –û–ß–ï–†–ï–î–ò –ò –í–û–†–ö–ï–†–û–í
        self._order_timeout_seconds = order_timeout_seconds
        self._max_worker_retries = max(1, max_worker_retries)
        self._worker_retry_base_delay = 0.5
        self._worker_retry_backoff_cap = 5.0

        self._order_queue: "queue.Queue[_OrderJob]" = queue.Queue(maxsize=queue_capacity)
        self._worker_stop_event = threading.Event()
        self._workers: List[threading.Thread] = []

        worker_count = max(1, worker_count)
        for idx in range(worker_count):
            worker = threading.Thread(
                target=self._order_worker,
                name=f"order-worker-{idx+1}",
                daemon=True
            )
            worker.start()
            self._workers.append(worker)
        self.logger.info(f"üßµ –ó–∞–ø—É—â–µ–Ω–æ {len(self._workers)} order worker(–æ–≤)")

    def shutdown(self, timeout: float = 1.0) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self._worker_stop_event.is_set():
            return

        self._worker_stop_event.set()
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for _ in self._workers:
            try:
                self._order_queue.put_nowait(None)  # type: ignore[arg-type]
            except queue.Full:
                self._order_queue.put(None)  # type: ignore[arg-type]

        for worker in self._workers:
            worker.join(timeout=timeout)

        self._workers.clear()
        self.logger.info("üõë OrderManager –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def get_symbol_lock(self, symbol: str) -> threading.RLock:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        with self._lock_creation_lock:
            if symbol not in self._symbol_locks:
                self._symbol_locks[symbol] = threading.RLock()
                self.logger.debug(f"üîí –°–æ–∑–¥–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è {symbol}")
            return self._symbol_locks[symbol]
    
    def set_emergency_stop(self, stop: bool = True):
        """üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –û–†–î–ï–†–û–í"""
        with self._global_lock:
            self._emergency_stop = stop
            if stop:
                self.logger.critical("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê! –í–°–ï –û–†–î–ï–†–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´!")
            else:
                self.logger.info("‚úÖ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    def _check_rate_limit(self, symbol: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –æ—Ä–¥–µ—Ä–æ–≤"""
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._order_timestamps[symbol] = [
            ts for ts in self._order_timestamps[symbol] 
            if ts > minute_ago
        ]
        
        if len(self._order_timestamps[symbol]) >= self._max_orders_per_minute:
            self._stats['rate_limit_blocks'] += 1
            return False, f"Rate limit exceeded: {len(self._order_timestamps[symbol])}/{self._max_orders_per_minute} orders per minute"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        if symbol in self._last_order_time:
            time_since_last = (now - self._last_order_time[symbol]).total_seconds()
            if time_since_last < 2.0:
                return False, f"Too frequent orders: {time_since_last:.2f}s since last order (min 2.0s)"
        
        return True, "OK"
    
    def _check_position_conflict(self, symbol: str, request: OrderRequest, api) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions_response = api.get_positions(symbol)
            if not positions_response or positions_response.get('retCode') != 0:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö"
            
            position_list = positions_response['result']['list']
            active_position = None
            
            for pos in position_list:
                if float(pos.get('size', 0)) > 0:
                    active_position = pos
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if active_position:
                self._active_positions[symbol] = {
                    'side': active_position['side'],
                    'size': float(active_position['size']),
                    'avg_price': float(active_position['avgPrice']),
                    'updated_at': datetime.now()
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                current_side = active_position['side']
                if not request.reduce_only and current_side != request.side:
                    return False, f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è {current_side}, –∑–∞–ø—Ä–æ—Å {request.side}"
                    
            else:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if symbol in self._active_positions:
                    del self._active_positions[symbol]
                
                if request.reduce_only:
                    return False, "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å reduce_only –æ—Ä–¥–µ—Ä –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
            
            return True, "OK"
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}"
    
    def _check_duplicate_order(self, symbol: str, request: OrderRequest) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        if symbol not in self._pending_orders:
            self._pending_orders[symbol] = {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
        order_key = f"{request.side}_{request.order_type}_{request.qty}_{request.price}_{request.strategy_name}"
        
        if order_key in self._pending_orders[symbol]:
            pending = self._pending_orders[symbol][order_key]
            time_diff = (datetime.now() - pending['created_at']).total_seconds()
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            if time_diff < 10:
                self._stats['duplicate_blocks'] += 1
                return False, f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Å–æ–∑–¥–∞–Ω {time_diff:.1f}s –Ω–∞–∑–∞–¥)"
        
        return True, "OK"
    
    def create_order_safe(self, api, request: OrderRequest) -> Optional[Dict[str, Any]]:
        """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–º —Å–µ—Ç–µ–≤—ã–º –≤—ã–∑–æ–≤–æ–º."""

        symbol = request.symbol
        order_key = f"{request.side}_{request.order_type}_{request.qty}_{request.price}_{request.strategy_name}"

        # üîí –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º pending –æ—Ä–¥–µ—Ä
        with self.get_symbol_lock(symbol):
            self.logger.info(
                f"üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ {request.strategy_name}: {request.side} {request.qty} {symbol}"
            )

            if self._emergency_stop:
                raise OrderRejectionError("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")

            rate_ok, rate_msg = self._check_rate_limit(symbol)
            if not rate_ok:
                raise RateLimitError(f"Rate limit –¥–ª—è {symbol}: {rate_msg}")

            dup_ok, dup_msg = self._check_duplicate_order(symbol, request)
            if not dup_ok:
                raise OrderRejectionError(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}: {dup_msg}")

            pos_ok, pos_msg = self._check_position_conflict(symbol, request, api)
            if not pos_ok:
                raise PositionConflictError(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {pos_msg}")

            self._pending_orders[symbol][order_key] = {
                'request': request,
                'created_at': datetime.now()
            }

            try:
                future = self._submit_order_job(api, request, order_key)
            except Exception:
                # –û—á–∏—Å—Ç–∫–∞ pending –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                self._remove_pending_order(symbol, order_key)
                raise

        # ‚è±Ô∏è –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ –≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞
        try:
            order_response = future.result(timeout=self._order_timeout_seconds)
        except FutureTimeoutError:
            self._stats['rejected_orders'] += 1
            self._remove_pending_order(symbol, order_key)
            self.logger.error(
                f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {request.side} {request.qty}"
            )
            raise OrderRejectionError(f"–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ {symbol}")
        except (OrderRejectionError, RateLimitError, PositionConflictError) as e:
            self._stats['rejected_orders'] += 1
            self._remove_pending_order(symbol, order_key)
            raise e
        except Exception as e:
            self._stats['rejected_orders'] += 1
            self._remove_pending_order(symbol, order_key)
            self.logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")
            raise OrderRejectionError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {str(e)}") from e

        if not order_response:
            self._stats['rejected_orders'] += 1
            self._remove_pending_order(symbol, order_key)
            raise OrderRejectionError(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API –¥–ª—è {symbol}")

        if order_response.get('retCode') != 0:
            self._stats['rejected_orders'] += 1
            error_msg = order_response.get('retMsg', 'Unknown error')
            self._remove_pending_order(symbol, order_key)
            raise OrderRejectionError(f"API –æ—Ç–∫–ª–æ–Ω–∏–ª –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}: {error_msg}")

        # ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ä–¥–µ—Ä
        now = datetime.now()
        self._order_timestamps[symbol].append(now)
        self._last_order_time[symbol] = now
        self._stats['total_orders'] += 1
        self._remove_pending_order(symbol, order_key)

        self.logger.info(
            f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è {symbol}: "
            f"{order_response.get('result', {}).get('orderId', 'N/A')}"
        )
        return order_response
    
    def get_position_state(self, symbol: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        with self.get_symbol_lock(symbol):
            return self._active_positions.get(symbol, None)

    def _submit_order_job(self, api, request: OrderRequest, order_key: str) -> Future:
        future: Future = Future()
        job = _OrderJob(
            api=api,
            request=request,
            order_key=order_key,
            future=future,
            submitted_at=datetime.now()
        )

        try:
            self._order_queue.put(job, timeout=1.0)
            self.logger.debug(
                f"üßµ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {request.strategy_name} {request.side} {request.qty} {request.symbol}"
            )
        except queue.Full:
            future.set_exception(OrderRejectionError("–û—á–µ—Ä–µ–¥—å –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞"))
            self.logger.error("üö´ –û—á–µ—Ä–µ–¥—å –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω")
            raise OrderRejectionError("–û—á–µ—Ä–µ–¥—å –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")

        return future

    def _remove_pending_order(self, symbol: str, order_key: str) -> None:
        with self._global_lock:
            if symbol in self._pending_orders and order_key in self._pending_orders[symbol]:
                del self._pending_orders[symbol][order_key]
                if not self._pending_orders[symbol]:
                    del self._pending_orders[symbol]

    def _order_worker(self) -> None:
        while not self._worker_stop_event.is_set():
            try:
                job = self._order_queue.get(timeout=0.5)
            except queue.Empty:
                continue

            if job is None:  # type: ignore[truthy-function]
                self._order_queue.task_done()
                break

            try:
                self._process_order_job(job)
            finally:
                self._order_queue.task_done()

    def _process_order_job(self, job: _OrderJob) -> None:
        request = job.request
        symbol = request.symbol

        for attempt in range(self._max_worker_retries):
            try:
                response = job.api.create_order(
                    symbol=request.symbol,
                    side=request.side,
                    order_type=request.order_type,
                    qty=request.qty,
                    price=request.price,
                    stop_loss=request.stop_loss,
                    take_profit=request.take_profit,
                    reduce_only=request.reduce_only,
                    position_idx=request.position_idx
                )

                if response and response.get('retCode') == 0:
                    if not job.future.done():
                        job.future.set_result(response)
                    return

                error_msg = response.get('retMsg', 'Unknown error') if response else 'No response'
                self.logger.warning(
                    f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ {symbol}: {error_msg} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})"
                )

                should_retry = self._should_retry_response(response)
                if should_retry and attempt < self._max_worker_retries - 1:
                    delay = self._compute_retry_delay(attempt)
                    self.logger.debug(
                        f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ä–¥–µ—Ä–∞ {symbol} —á–µ—Ä–µ–∑ {delay:.2f}s"
                    )
                    time.sleep(delay)
                    continue

                if not job.future.done():
                    job.future.set_exception(OrderRejectionError(f"API –æ—Ç–∫–ª–æ–Ω–∏–ª –æ—Ä–¥–µ—Ä: {error_msg}"))
                return

            except Exception as exc:
                self.logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ {symbol}: {exc} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})"
                )
                if attempt < self._max_worker_retries - 1:
                    delay = self._compute_retry_delay(attempt)
                    self.logger.debug(
                        f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥–ª—è {symbol} —á–µ—Ä–µ–∑ {delay:.2f}s"
                    )
                    time.sleep(delay)
                    continue

                if not job.future.done():
                    job.future.set_exception(exc)
                return

        if not job.future.done():
            job.future.set_exception(OrderRejectionError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä: –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏"))

    def _compute_retry_delay(self, attempt: int) -> float:
        delay = self._worker_retry_base_delay * (2 ** attempt)
        return min(delay, self._worker_retry_backoff_cap)

    @staticmethod
    def _should_retry_response(response: Optional[Dict[str, Any]]) -> bool:
        if not response:
            return True
        ret_code = response.get('retCode')
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö (rate limit, network)
        return ret_code in {-1001, -1002, -1020}
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        with self._global_lock:
            return {
                **self._stats,
                'emergency_stop': self._emergency_stop,
                'active_positions': len(self._active_positions),
                'pending_orders': sum(len(orders) for orders in self._pending_orders.values()),
                'symbol_locks': len(self._symbol_locks)
            }
    
    def cleanup_old_pending(self, max_age_seconds: int = 60):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö pending –æ—Ä–¥–µ—Ä–æ–≤"""
        with self._global_lock:
            cutoff_time = datetime.now() - timedelta(seconds=max_age_seconds)
            
            for symbol in list(self._pending_orders.keys()):
                orders_to_remove = []
                for order_key, order_info in self._pending_orders[symbol].items():
                    if order_info['created_at'] < cutoff_time:
                        orders_to_remove.append(order_key)
                
                for order_key in orders_to_remove:
                    del self._pending_orders[symbol][order_key]
                    self.logger.warning(f"üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π pending –æ—Ä–¥–µ—Ä: {order_key}")
                
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
                if not self._pending_orders[symbol]:
                    del self._pending_orders[symbol]


# üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ú–ï–ù–ï–î–ñ–ï–†–ê –û–†–î–ï–†–û–í
_order_manager_instance = None
_order_manager_lock = threading.RLock()


def get_order_manager() -> ThreadSafeOrderManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    global _order_manager_instance
    
    if _order_manager_instance is None:
        with _order_manager_lock:
            if _order_manager_instance is None:
                _order_manager_instance = ThreadSafeOrderManager()
    
    return _order_manager_instance


def reset_order_manager():
    """–°–±—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    global _order_manager_instance
    with _order_manager_lock:
        if _order_manager_instance is not None:
            try:
                _order_manager_instance.shutdown()
            except Exception:
                pass
        _order_manager_instance = None


def validate_order_parameters(symbol: str, side: str, order_type: str, qty: float, 
                             price: Optional[float] = None, 
                             stop_loss: Optional[float] = None,
                             take_profit: Optional[float] = None) -> Tuple[bool, List[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        side: –°—Ç–æ—Ä–æ–Ω–∞ (Buy/Sell)
        order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market/Limit)
        qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
        stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
        take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        
    Returns:
        Tuple[bool, List[str]]: (–≤–∞–ª–∏–¥–µ–Ω, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
    """
    errors = []
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
    if not symbol or not symbol.strip():
        errors.append("–°–∏–º–≤–æ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    elif not isinstance(symbol, str):
        errors.append("–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    elif len(symbol) < 3:
        errors.append("–°–∏–º–≤–æ–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω—ã
    valid_sides = ['Buy', 'Sell', 'BUY', 'SELL', 'buy', 'sell']
    if side not in valid_sides:
        errors.append(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: {side}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_sides}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
    valid_order_types = ['Market', 'Limit', 'MARKET', 'LIMIT', 'market', 'limit']
    if order_type not in valid_order_types:
        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_order_types}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if not isinstance(qty, (int, float)):
        errors.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    elif qty <= 0:
        errors.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
    elif qty > 1000:  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
        errors.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>1000)")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    if order_type.lower() == 'limit':
        if price is None:
            errors.append("–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        elif not isinstance(price, (int, float)):
            errors.append("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        elif price <= 0:
            errors.append("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å
    if stop_loss is not None:
        if not isinstance(stop_loss, (int, float)):
            errors.append("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        elif stop_loss <= 0:
            errors.append("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    if take_profit is not None:
        if not isinstance(take_profit, (int, float)):
            errors.append("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        elif take_profit <= 0:
            errors.append("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
    
    # –õ–æ–≥–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ø–æ–≤
    if price and stop_loss and take_profit:
        if side.lower() in ['buy', 'long']:
            if stop_loss >= price:
                errors.append("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
            if take_profit <= price:
                errors.append("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
        elif side.lower() in ['sell', 'short']:
            if stop_loss <= price:
                errors.append("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
            if take_profit >= price:
                errors.append("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
    
    is_valid = len(errors) == 0
    return is_valid, errors
