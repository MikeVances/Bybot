"""
üîÑ –£–õ–£–ß–®–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú –ö API
Heartbeat –ø—Ä–æ–≤–µ—Ä–∫–∏, backup endpoints, fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
import threading
import logging
from dataclasses import dataclass
from enum import Enum

class ConnectionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    HEALTHY = "healthy"           # –ó–¥–æ—Ä–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    DEGRADED = "degraded"        # –£—Ö—É–¥—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    UNSTABLE = "unstable"        # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    FAILED = "failed"            # –û—Ç–∫–∞–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    MAINTENANCE = "maintenance"   # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

@dataclass
class APIEndpoint:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API endpoint"""
    url: str
    priority: int  # 1 = primary, 2 = secondary, etc.
    last_success: Optional[datetime] = None
    consecutive_failures: int = 0
    avg_response_time: float = 0.0
    is_available: bool = True

class EnhancedAPIConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""

    def __init__(self, primary_session, backup_endpoints: List[str] = None):
        self.primary_session = primary_session
        self.logger = logging.getLogger('api_connection')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ endpoints
        self.endpoints = [
            APIEndpoint("https://api.bybit.com", 1),  # Primary
        ]

        if backup_endpoints:
            for i, url in enumerate(backup_endpoints, 2):
                self.endpoints.append(APIEndpoint(url, i))

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_state = ConnectionState.HEALTHY
        self.current_endpoint_index = 0

        # Heartbeat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.heartbeat_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.heartbeat_thread = None
        self.heartbeat_running = False

        # –ö—ç—à –¥–ª—è fallback –¥–∞–Ω–Ω—ã—Ö
        self.cached_data = {}
        self.cache_ttl = timedelta(minutes=5)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.connection_stats = {
            'total_requests': 0,
            'failed_requests': 0,
            'endpoint_switches': 0,
            'cache_hits': 0,
            'heartbeat_failures': 0
        }

        self.start_heartbeat_monitoring()

    def start_heartbeat_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ heartbeat"""
        if not self.heartbeat_running:
            self.heartbeat_running = True
            self.heartbeat_thread = threading.Thread(
                target=self._heartbeat_worker,
                daemon=True
            )
            self.heartbeat_thread.start()
            self.logger.info("üíì Heartbeat –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    def _heartbeat_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ heartbeat –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        while self.heartbeat_running:
            try:
                self._perform_heartbeat_check()
                time.sleep(self.heartbeat_interval)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ heartbeat: {e}")
                time.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _perform_heartbeat_check(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ heartbeat –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            start_time = time.time()

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            response = self.primary_session.get_server_time()

            response_time = time.time() - start_time

            if response and response.get('retCode') == 0:
                # –£—Å–ø–µ—à–Ω—ã–π heartbeat
                current_endpoint = self.endpoints[self.current_endpoint_index]
                current_endpoint.last_success = datetime.now()
                current_endpoint.consecutive_failures = 0
                current_endpoint.avg_response_time = (
                    current_endpoint.avg_response_time * 0.7 + response_time * 0.3
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if response_time < 0.5:
                    self._update_connection_state(ConnectionState.HEALTHY)
                elif response_time < 2.0:
                    self._update_connection_state(ConnectionState.DEGRADED)
                else:
                    self._update_connection_state(ConnectionState.UNSTABLE)

                self.logger.debug(f"üíì Heartbeat OK: {response_time:.2f}s")

            else:
                # –ù–µ—É–¥–∞—á–Ω—ã–π heartbeat
                self._handle_heartbeat_failure(response)

        except Exception as e:
            self._handle_heartbeat_failure(f"Exception: {e}")

    def _handle_heartbeat_failure(self, error_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ heartbeat"""
        self.connection_stats['heartbeat_failures'] += 1
        current_endpoint = self.endpoints[self.current_endpoint_index]
        current_endpoint.consecutive_failures += 1

        self.logger.warning(f"üíî Heartbeat failed: {error_info}")

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ backup endpoint –µ—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á
        if current_endpoint.consecutive_failures >= 3:
            self._switch_to_backup_endpoint()
        else:
            self._update_connection_state(ConnectionState.UNSTABLE)

    def _switch_to_backup_endpoint(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π endpoint"""
        if len(self.endpoints) > 1:
            old_index = self.current_endpoint_index

            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π endpoint
            for i in range(len(self.endpoints)):
                if i != self.current_endpoint_index:
                    endpoint = self.endpoints[i]
                    if endpoint.consecutive_failures < 3:
                        self.current_endpoint_index = i
                        self.connection_stats['endpoint_switches'] += 1

                        self.logger.warning(
                            f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ backup endpoint: "
                            f"{self.endpoints[old_index].url} ‚Üí {endpoint.url}"
                        )

                        self._update_connection_state(ConnectionState.DEGRADED)
                        return

            # –í—Å–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            self._update_connection_state(ConnectionState.FAILED)
        else:
            self._update_connection_state(ConnectionState.FAILED)

    def _update_connection_state(self, new_state: ConnectionState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connection_state != new_state:
            old_state = self.connection_state
            self.connection_state = new_state

            self.logger.info(f"üîå Connection state: {old_state.value} ‚Üí {new_state.value}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if new_state == ConnectionState.FAILED:
                self._handle_connection_failure()
            elif old_state == ConnectionState.FAILED and new_state != ConnectionState.FAILED:
                self._handle_connection_recovery()

    def _handle_connection_failure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.logger.critical("üö® –í–°–ï API ENDPOINTS –ù–ï–î–û–°–¢–£–ü–ù–´!")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ blocking alerts (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            from bot.core.blocking_alerts import report_order_block
            report_order_block(
                reason="api_error",
                symbol="ALL",
                strategy="SYSTEM",
                message="–í—Å–µ API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                details={
                    "failed_endpoints": len(self.endpoints),
                    "heartbeat_failures": self.connection_stats['heartbeat_failures']
                }
            )
        except ImportError:
            self.logger.warning("Blocking alerts —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency stop (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            from bot.core.emergency_stop import global_emergency_stop
            global_emergency_stop.activate("API connection completely failed")
        except ImportError:
            self.logger.warning("Emergency stop —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    def _handle_connection_recovery(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.logger.info("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º emergency stop –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        try:
            from bot.core.emergency_stop import global_emergency_stop
            global_emergency_stop.deactivate("API connection recovered")
        except ImportError:
            pass

    def execute_with_fallback(self, operation: Callable, operation_name: str,
                            cache_key: str = None, **kwargs) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å fallback –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Args:
            operation: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            cache_key: –ö–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        self.connection_stats['total_requests'] += 1

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if self.connection_state == ConnectionState.FAILED:
                if cache_key and cache_key in self.cached_data:
                    self.logger.warning(f"üóÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {operation_name}")
                    self.connection_stats['cache_hits'] += 1
                    return self.cached_data[cache_key]['data']
                else:
                    raise Exception("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            result = operation(**kwargs)

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if cache_key and result:
                self.cached_data[cache_key] = {
                    'data': result,
                    'timestamp': datetime.now()
                }

            return result

        except Exception as e:
            self.connection_stats['failed_requests'] += 1
            self.logger.error(f"API –æ–ø–µ—Ä–∞—Ü–∏—è {operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

            # –ü—Ä–æ–±—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if cache_key and cache_key in self.cached_data:
                cached_item = self.cached_data[cache_key]
                data_age = datetime.now() - cached_item['timestamp']

                if data_age < self.cache_ttl:
                    self.logger.warning(
                        f"üóÇÔ∏è Fallback –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {operation_name} "
                        f"(–≤–æ–∑—Ä–∞—Å—Ç: {data_age.total_seconds():.0f}s)"
                    )
                    self.connection_stats['cache_hits'] += 1
                    return cached_item['data']

            # –ù–µ—Ç fallback –¥–∞–Ω–Ω—ã—Ö
            raise e

    def cleanup_expired_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
        now = datetime.now()
        expired_keys = [
            key for key, item in self.cached_data.items()
            if now - item['timestamp'] > self.cache_ttl
        ]

        for key in expired_keys:
            del self.cached_data[key]

        if expired_keys:
            self.logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à –∑–∞–ø–∏—Å–µ–π")

    def get_connection_health(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        current_endpoint = self.endpoints[self.current_endpoint_index]

        return {
            'state': self.connection_state.value,
            'current_endpoint': current_endpoint.url,
            'endpoint_response_time': current_endpoint.avg_response_time,
            'consecutive_failures': current_endpoint.consecutive_failures,
            'last_success': current_endpoint.last_success.isoformat() if current_endpoint.last_success else None,
            'cached_items': len(self.cached_data),
            'stats': self.connection_stats.copy()
        }

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.heartbeat_running = False
        if self.heartbeat_thread and self.heartbeat_thread.is_alive():
            self.heartbeat_thread.join(timeout=5)
        self.logger.info("üõë API connection manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
_connection_manager = None

def get_enhanced_connection_manager() -> Optional[EnhancedAPIConnectionManager]:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    global _connection_manager
    return _connection_manager

def setup_enhanced_connection_manager(primary_session, backup_endpoints=None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    global _connection_manager
    _connection_manager = EnhancedAPIConnectionManager(primary_session, backup_endpoints)
    return _connection_manager