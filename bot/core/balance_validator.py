"""
–ú–æ–¥—É–ª—å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
"""

import logging
from typing import Dict, Optional, Tuple
from decimal import Decimal, ROUND_DOWN

logger = logging.getLogger(__name__)


class BalanceValidator:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç margin call –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–∫–≤–∏–¥–∞—Ü–∏—é
    """

    def __init__(self):
        self.min_balance_reserve = 0.05  # 5% —Ä–µ–∑–µ—Ä–≤ –±–∞–ª–∞–Ω—Å–∞ (–±—ã–ª–æ 10% - —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–æ)
        self.max_leverage_multiplier = 0.8  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 80% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞
        self.emergency_balance_threshold = 0.02  # 2% - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–∞–ª–∞–Ω—Å–∞

    def validate_trade_balance(
        self,
        api,
        trade_amount: float,
        symbol: str = "BTCUSDT",
        leverage: float = 1.0
    ) -> Tuple[bool, str, Dict]:
        """
        –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π

        Args:
            api: API –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
            trade_amount: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            leverage: –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–ª–µ—á–æ

        Returns:
            Tuple[bool, str, Dict]: (–º–æ–∂–Ω–æ_—Ç–æ—Ä–≥–æ–≤–∞—Ç—å, –ø—Ä–∏—á–∏–Ω–∞, –¥–µ—Ç–∞–ª–∏_–±–∞–ª–∞–Ω—Å–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            balance_info = self._get_wallet_balance(api)
            if not balance_info:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞", {}

            available_balance = balance_info.get('available_balance', 0)
            used_margin = balance_info.get('used_margin', 0)
            total_equity = balance_info.get('total_equity', 0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ä–∂–∏–Ω –¥–ª—è —Å–¥–µ–ª–∫–∏
            required_margin = self._calculate_required_margin(
                trade_amount, leverage, symbol
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            balance_after_trade = available_balance - required_margin

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∑–µ—Ä–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç available_balance, –∞ –Ω–µ –æ—Ç usdt_balance
            # usdt_balance –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å—å equity –≤–∫–ª—é—á–∞—è BTC, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–º—É —Ä–µ–∑–µ—Ä–≤—É
            min_required_balance = available_balance * self.min_balance_reserve

            logger.debug(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è={required_margin:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ={available_balance:.2f}, –ø–æ—Å–ª–µ_—Å–¥–µ–ª–∫–∏={balance_after_trade:.2f}, –º–∏–Ω_—Ä–µ–∑–µ—Ä–≤={min_required_balance:.2f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
            if balance_after_trade < min_required_balance:
                return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_margin:.4f} + —Ä–µ–∑–µ—Ä–≤ {min_required_balance:.4f}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.4f}", balance_info

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –º–∞—Ä–∂–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
            if available_balance < required_margin:
                return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–∞—Ä–∂–∏–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_margin:.4f}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.4f}", balance_info

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–∞–ª–∞–Ω—Å–∞
            if total_equity < (balance_info.get('initial_equity', total_equity) * self.emergency_balance_threshold):
                return False, "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨ –ë–ê–õ–ê–ù–°–ê! –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", balance_info

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            total_margin_after = used_margin + required_margin
            max_allowed_margin = total_equity * self.max_leverage_multiplier

            if total_margin_after > max_allowed_margin:
                return False, f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–ª–µ—á–∞. –û–±—â–∏–π –º–∞—Ä–∂–∏–Ω: {total_margin_after:.4f}, –ª–∏–º–∏—Ç: {max_allowed_margin:.4f}", balance_info

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑—É–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            position_value = trade_amount * self._get_current_price(api, symbol)
            max_position_value = total_equity * 0.2  # –ú–∞–∫—Å–∏–º—É–º 20% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é

            if position_value > max_position_value:
                return False, f"‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –ø–æ–∑–∏—Ü–∏—è. –†–∞–∑–º–µ—Ä: {position_value:.2f}, –ª–∏–º–∏—Ç: {max_position_value:.2f}", balance_info

            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.4f}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_margin:.4f}")

            return True, "‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", balance_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}", {}

    def _get_wallet_balance(self, api) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –î–ª—è Bybit API v5
            response = api.get_wallet_balance_v5()

            if response['retCode'] != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {response['retMsg']}")
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ USDT –±–∞–ª–∞–Ω—Å–∞
            account_data = response['result']['list'][0] if response['result']['list'] else {}
            usdt_coin = next((coin for coin in account_data.get('coin', []) if coin['coin'] == 'USDT'), {})

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –≤ float
            def safe_float(value, default=0.0):
                try:
                    if value == '' or value is None:
                        return default
                    return float(value)
                except (ValueError, TypeError):
                    return default

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ USDT-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö
            total_available_balance = safe_float(account_data.get('totalAvailableBalance', 0))
            total_margin_balance = safe_float(account_data.get('totalMarginBalance', 0))
            total_equity = safe_float(account_data.get('totalEquity', 0))
            wallet_balance = safe_float(usdt_coin.get('walletBalance', 0))

            return {
                'available_balance': total_available_balance,  # –û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
                'used_margin': total_margin_balance - wallet_balance,
                'total_equity': total_equity,  # –û–±—â–∏–π —ç–∫–≤–∏—Ç–∏ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –≤–∞–ª—é—Ç—ã –≤ USD)
                'initial_equity': total_equity,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
                'usdt_balance': wallet_balance  # USDT –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞
            }

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

    def _calculate_required_margin(self, trade_amount: float, leverage: float, symbol: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ä–∂–∏–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏

        Args:
            trade_amount: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä 100 = $100 –ø–æ–∑–∏—Ü–∏—è)
            leverage: –ü–ª–µ—á–æ (1.0 = –±–µ–∑ –ø–ª–µ—á–∞)
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            –¢—Ä–µ–±—É–µ–º—ã–π –º–∞—Ä–∂–∏–Ω –≤ USDT —Å –±—É—Ñ–µ—Ä–æ–º –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
        """
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: trade_amount —Ç–µ–ø–µ—Ä—å –í–°–ï–ì–î–ê –≤ USDT!
            # –ü—Ä–∏–º–µ—Ä—ã: 100 = –ø–æ–∑–∏—Ü–∏—è –Ω–∞ $100, 500 = –ø–æ–∑–∏—Ü–∏—è –Ω–∞ $500

            position_value_usd = trade_amount  # –£–∂–µ –≤ USD

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ä–∂–∏–Ω —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
            required_margin = position_value_usd / max(leverage, 1.0)

            # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä 10% –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            final_margin = required_margin * 1.1

            logger.debug(f"üí∞ –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞: pos_value=${position_value_usd:.2f} USDT, leverage={leverage}x, –º–∞—Ä–∂–∏–Ω=${required_margin:.2f}, –∏—Ç–æ–≥–æ=${final_margin:.2f}")
            return final_margin

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞: {e}")
            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º trade_amount –∫–∞–∫ –µ—Å—Ç—å + –±—É—Ñ–µ—Ä
            return trade_amount * 1.1

    def _get_current_price(self, api, symbol: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–π OHLCV —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        try:
            ohlcv = api.get_ohlcv(symbol=symbol, interval="1", limit=1)
            if ohlcv is None or getattr(ohlcv, 'empty', False):
                return 50000.0
            # DataFrame –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–π –æ–±—ä–µ–∫—Ç: –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π close
            last_row = ohlcv.iloc[-1]
            if 'close' in last_row:
                return float(last_row['close'])
        except Exception as exc:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ OHLCV: {exc}")
        return 50000.0

    def check_emergency_stop_conditions(self, api) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏

        Returns:
            Tuple[bool, str]: (–Ω—É–∂–Ω–∞_–æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø—Ä–∏—á–∏–Ω–∞)
        """
        try:
            balance_info = self._get_wallet_balance(api)
            if not balance_info:
                return True, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞"

            total_equity = balance_info.get('total_equity', 0)
            initial_equity = balance_info.get('initial_equity', total_equity)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–æ—Ç–µ—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
            if total_equity < initial_equity * self.emergency_balance_threshold:
                return True, f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–¢–ï–†–Ø –ö–ê–ü–ò–¢–ê–õ–ê! –¢–µ–∫—É—â–∏–π: {total_equity:.2f}, –±—ã–ª–æ: {initial_equity:.2f}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ margin level
            available_balance = balance_info.get('available_balance', 0)
            if available_balance <= 0:
                return True, "üö® –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ô –î–û–°–¢–£–ü–ù–´–ô –ë–ê–õ–ê–ù–°!"

            return False, "‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤ –Ω–æ—Ä–º–µ"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ emergency stop: {e}")
            return True, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
global_balance_validator = BalanceValidator()


def validate_trade_balance(api, trade_amount: float, symbol: str = "BTCUSDT", leverage: float = 1.0) -> Tuple[bool, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞

    Returns:
        Tuple[bool, str]: (–º–æ–∂–Ω–æ_—Ç–æ—Ä–≥–æ–≤–∞—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
    """
    is_valid, reason, _ = global_balance_validator.validate_trade_balance(api, trade_amount, symbol, leverage)
    return is_valid, reason


def check_emergency_stop(api) -> Tuple[bool, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

    Returns:
        Tuple[bool, str]: (–Ω—É–∂–Ω–∞_–æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø—Ä–∏—á–∏–Ω–∞)
    """
    return global_balance_validator.check_emergency_stop_conditions(api)
