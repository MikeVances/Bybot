# bot/ai/neural_integration.py
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —Å —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
# –§—É–Ω–∫—Ü–∏–∏: –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging
import json
import os
from .neural_trader import NeuralTrader

class NeuralIntegration:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —Å —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
    
    –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    
    def __init__(self, risk_manager=None):
        # üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ (152 –≤—Ö–æ–¥–∞)
        self.neural_trader = NeuralTrader(
            input_size=152,  # üìà –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: 3x –±–æ–ª—å—à–µ features!
            hidden_size=64,  # üìà –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–æ
            dropout_rate=0.15  # üìà –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π —Å–µ—Ç–∏
        )
        self.risk_manager = risk_manager
        self.logger = logging.getLogger('neural_integration')
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –∏ —Å–¥–µ–ª–æ–∫
        self.active_bets = {}  # {bet_id: bet_info}
        self.completed_trades = []  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        self.strategy_performance_cache = {}  # –ö–µ—à –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        self.profit_threshold = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏ (%)
        self.timeout_hours = 24  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏
        self.cache_ttl_minutes = 15  # TTL –∫–µ—à–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        self.risk_integration_enabled = risk_manager is not None
        self.max_neural_exposure_pct = 10.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        self.neural_position_limit = 3  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        self.prediction_accuracy_history = []
        self.confidence_calibration_history = []
        self.last_performance_check = datetime.now()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        self.auto_learning_enabled = True
        self.learning_frequency_hours = 6  # –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        self.min_samples_for_learning = 20
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_mapping = {}
        self.reverse_strategy_mapping = {}
        self.active_strategies_file = "bot/strategy/active_strategies.txt"
        self.max_neural_strategies = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self._load_active_strategies()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.last_file_check = datetime.now()
        self.file_check_interval = 300  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.last_file_mtime = 0
    
    def _check_strategies_file_changes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (current_time - self.last_file_check).total_seconds() < self.file_check_interval:
                return False
            
            if not os.path.exists(self.active_strategies_file):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            current_mtime = os.path.getmtime(self.active_strategies_file)
            
            if current_mtime > self.last_file_mtime:
                self.logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                self.last_file_mtime = current_mtime
                self.last_file_check = current_time
                return True
            
            self.last_file_check = current_time
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return False
    
    def _load_active_strategies(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.active_strategies_file):
                self.logger.warning(f"–§–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.active_strategies_file}")
                return
            
            with open(self.active_strategies_file, 'r') as f:
                lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            
            if not lines:
                self.logger.warning("–§–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—É—Å—Ç")
                return
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
            self.strategy_mapping.clear()
            self.reverse_strategy_mapping.clear()
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            for i, strategy_name in enumerate(lines[:self.max_neural_strategies], 1):
                neural_name = f'strategy_{i:02d}'
                self.strategy_mapping[strategy_name] = neural_name
                self.reverse_strategy_mapping[neural_name] = strategy_name
            
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.strategy_mapping)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è")
            self.logger.debug(f"–ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {self.strategy_mapping}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
    
    def reload_active_strategies(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
        self._load_active_strategies()
        self.logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    def get_active_strategies_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
        return {
            'total_strategies': len(self.strategy_mapping),
            'active_strategies': list(self.strategy_mapping.keys()),
            'neural_mapping': self.strategy_mapping,
            'max_strategies': self.max_neural_strategies
        }
    
    def get_dynamic_strategies_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
            file_changed = self._check_strategies_file_changes()
            
            stats = {
                'total_strategies': len(self.strategy_mapping),
                'active_strategies': list(self.strategy_mapping.keys()),
                'neural_mapping': self.strategy_mapping,
                'max_strategies': self.max_neural_strategies,
                'file_last_modified': None,
                'file_changed': file_changed,
                'last_check': self.last_file_check.isoformat(),
                'check_interval_seconds': self.file_check_interval
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            if os.path.exists(self.active_strategies_file):
                stats['file_last_modified'] = datetime.fromtimestamp(
                    os.path.getmtime(self.active_strategies_file)
                ).isoformat()
                stats['file_exists'] = True
            else:
                stats['file_exists'] = False
            
            return stats
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return {
                'error': str(e),
                'total_strategies': 0,
                'active_strategies': [],
                'neural_mapping': {}
            }
    
    def adapt_strategy_signals_for_neural(self, strategy_signals: Dict) -> Dict:
        """
        –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è
        
        Args:
            strategy_signals: –°–∏–≥–Ω–∞–ª—ã –æ—Ç –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            
        Returns:
            –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è
        """
        adapted_signals = {}
        
        for strategy_name, signal_data in strategy_signals.items():
            if strategy_name in self.strategy_mapping:
                neural_strategy_name = self.strategy_mapping[strategy_name]
                adapted_signals[neural_strategy_name] = signal_data
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
                self.logger.warning(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                adapted_signals[strategy_name] = signal_data
        
        return adapted_signals
    
    def adapt_neural_recommendation(self, neural_recommendation: Dict) -> Dict:
        """
        –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        
        Args:
            neural_recommendation: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è
            
        Returns:
            –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        """
        if not neural_recommendation:
            return None
            
        strategy_name = neural_recommendation.get('strategy', '')
        
        if strategy_name in self.reverse_strategy_mapping:
            adapted_recommendation = neural_recommendation.copy()
            adapted_recommendation['strategy'] = self.reverse_strategy_mapping[strategy_name]
            return adapted_recommendation
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –º–∞–ø–ø–∏–Ω–≥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return neural_recommendation
    
    def analyze_strategy_results(self, trade_journal_path: str = "data/trade_journal.csv") -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            current_time = datetime.now()
            cache_key = f"strategy_analysis_{trade_journal_path}"
            
            if (cache_key in self.strategy_performance_cache and 
                (current_time - self.strategy_performance_cache[cache_key]['timestamp']).total_seconds() < self.cache_ttl_minutes * 60):
                return self.strategy_performance_cache[cache_key]['data']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(trade_journal_path):
                self.logger.warning(f"–§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {trade_journal_path}")
                return {}
            
            df = pd.read_csv(trade_journal_path)
            if df.empty:
                self.logger.info("–ñ—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç")
                return {}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            if 'timestamp' in df.columns:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã timestamp
                    if df['timestamp'].dtype == 'object':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ datetime
                        sample_timestamp = df['timestamp'].iloc[0]
                        if isinstance(sample_timestamp, str) and len(sample_timestamp) < 10:
                            # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                            self.logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç timestamp –≤ –∂—É—Ä–Ω–∞–ª–µ —Å–¥–µ–ª–æ–∫: {sample_timestamp}")
                            return {}
                    
                    df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                    df = df.dropna(subset=['timestamp'])
                    
                    if df.empty:
                        self.logger.warning("–í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ —Å–¥–µ–ª–æ–∫ –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞—Ç—ã")
                        return {}
                        
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ timestamp: {e}")
                    return {}
                
                df = df.sort_values('timestamp')
            
            strategy_results = {}
            
            for strategy_name in df['strategy'].unique():
                if pd.isna(strategy_name):
                    continue
                    
                strategy_df = df[df['strategy'] == strategy_name].copy()
                
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_signals = len(strategy_df)
                buy_signals = len(strategy_df[strategy_df['signal'] == 'BUY'])
                sell_signals = len(strategy_df[strategy_df['signal'] == 'SELL'])
                
                # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                time_analysis = self._analyze_time_patterns(strategy_df)
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ü–µ–Ω–∞–º
                price_analysis = self._analyze_price_performance_advanced(strategy_df)
                
                # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                signal_quality = self._analyze_signal_quality(strategy_df)
                
                # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ä—ã–Ω–∫–æ–º
                market_correlation = self._analyze_market_correlation(strategy_df)
                
                # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
                risk_metrics = self._calculate_strategy_risk_metrics(strategy_df)
                
                strategy_results[strategy_name] = {
                    'basic_stats': {
                        'total_signals': total_signals,
                        'buy_signals': buy_signals,
                        'sell_signals': sell_signals
                    },
                    'time_analysis': time_analysis,
                    'price_analysis': price_analysis,
                    'signal_quality': signal_quality,
                    'market_correlation': market_correlation,
                    'risk_metrics': risk_metrics,
                    'signal_frequency': self._calculate_signal_frequency(strategy_df)
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
                if not strategy_df.empty:
                    strategy_results[strategy_name]['last_signal'] = strategy_df.iloc[-1].to_dict()
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.strategy_performance_cache[cache_key] = {
                'data': strategy_results,
                'timestamp': current_time
            }
            
            return strategy_results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return {}
    
    def _analyze_time_patterns(self, strategy_df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if 'timestamp' not in strategy_df.columns or strategy_df.empty:
                return {}
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º –¥–Ω—è
            strategy_df['hour'] = strategy_df['timestamp'].dt.hour
            hourly_stats = strategy_df.groupby('hour').size().to_dict()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            strategy_df['weekday'] = strategy_df['timestamp'].dt.weekday
            weekday_stats = strategy_df.groupby('weekday').size().to_dict()
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            recent_days = 7
            cutoff_date = datetime.now() - timedelta(days=recent_days)
            recent_activity = len(strategy_df[strategy_df['timestamp'] > cutoff_date])
            
            return {
                'hourly_distribution': hourly_stats,
                'weekday_distribution': weekday_stats,
                'recent_activity': recent_activity,
                'most_active_hour': max(hourly_stats.items(), key=lambda x: x[1])[0] if hourly_stats else None,
                'least_active_hour': min(hourly_stats.items(), key=lambda x: x[1])[0] if hourly_stats else None
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return {}
    
    def _analyze_price_performance_advanced(self, strategy_df: pd.DataFrame) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ü–µ–Ω–∞–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_window = min(200, len(strategy_df))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞
            recent_df = strategy_df.tail(analysis_window).copy()
            
            if recent_df.empty:
                return {'success_rate': 0.5, 'avg_profit': 0, 'total_trades': 0}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            price_columns = ['entry_price', 'close', 'stop_loss', 'take_profit']
            for col in price_columns:
                if col in recent_df.columns:
                    recent_df[col] = pd.to_numeric(recent_df[col], errors='coerce')
            
            success_count = 0
            total_profit = 0
            profitable_trades = []
            losing_trades = []
            
            for _, row in recent_df.iterrows():
                entry_price = row.get('entry_price', 0)
                close_price = row.get('close', 0)
                
                if entry_price > 0 and close_price > 0:
                    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
                    if row['signal'] == 'BUY':
                        profit_pct = (close_price - entry_price) / entry_price * 100
                    elif row['signal'] == 'SELL':
                        profit_pct = (entry_price - close_price) / entry_price * 100
                    else:
                        continue
                    
                    total_profit += profit_pct
                    
                    if profit_pct > self.profit_threshold:
                        success_count += 1
                        profitable_trades.append(profit_pct)
                    else:
                        losing_trades.append(profit_pct)
            
            total_analyzed = len([row for _, row in recent_df.iterrows() 
                                if row.get('entry_price', 0) > 0 and row.get('close', 0) > 0])
            
            if total_analyzed == 0:
                return {'success_rate': 0.5, 'avg_profit': 0, 'total_trades': 0}
            
            success_rate = success_count / total_analyzed
            avg_profit = total_profit / total_analyzed
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            max_profit = max(profitable_trades) if profitable_trades else 0
            max_loss = min(losing_trades) if losing_trades else 0
            avg_winning_trade = np.mean(profitable_trades) if profitable_trades else 0
            avg_losing_trade = np.mean(losing_trades) if losing_trades else 0
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            profit_factor = (abs(avg_winning_trade) * len(profitable_trades) / 
                           (abs(avg_losing_trade) * len(losing_trades))) if losing_trades else float('inf')
            
            return {
                'success_rate': success_rate,
                'avg_profit': avg_profit,
                'total_trades': total_analyzed,
                'profitable_trades': len(profitable_trades),
                'losing_trades': len(losing_trades),
                'max_profit': max_profit,
                'max_loss': max_loss,
                'avg_winning_trade': avg_winning_trade,
                'avg_losing_trade': avg_losing_trade,
                'profit_factor': min(profit_factor, 10.0),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                'win_rate': success_rate * 100,
                'expectancy': avg_profit
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'success_rate': 0.5, 'avg_profit': 0, 'total_trades': 0}
    
    def _analyze_signal_quality(self, strategy_df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy_df.empty:
                return {}
            
            # –ê–Ω–∞–ª–∏–∑ R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
            rr_ratios = []
            signal_strengths = []
            
            for _, row in strategy_df.iterrows():
                if 'risk_reward_ratio' in row and pd.notna(row['risk_reward_ratio']):
                    rr_ratios.append(float(row['risk_reward_ratio']))
                
                if 'signal_strength' in row and pd.notna(row['signal_strength']):
                    signal_strengths.append(float(row['signal_strength']))
            
            quality_metrics = {
                'avg_rr_ratio': np.mean(rr_ratios) if rr_ratios else 1.0,
                'min_rr_ratio': min(rr_ratios) if rr_ratios else 0,
                'max_rr_ratio': max(rr_ratios) if rr_ratios else 0,
                'avg_signal_strength': np.mean(signal_strengths) if signal_strengths else 0.5,
                'signal_consistency': 1 - np.std(signal_strengths) if len(signal_strengths) > 1 else 0.5,
                'quality_score': 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            }
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            if rr_ratios and signal_strengths:
                rr_score = min(np.mean(rr_ratios) / 2.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 1.0
                strength_score = np.mean(signal_strengths)
                consistency_score = quality_metrics['signal_consistency']
                
                quality_metrics['quality_score'] = (rr_score * 0.4 + strength_score * 0.4 + consistency_score * 0.2)
            
            return quality_metrics
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'quality_score': 0.5}
    
    def _analyze_market_correlation(self, strategy_df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        try:
            if strategy_df.empty or 'close' not in strategy_df.columns:
                return {}
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
            strategy_df['price_change'] = strategy_df['close'].pct_change()
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            bullish_threshold = 0.01  # 1% —Ä–æ—Å—Ç
            bearish_threshold = -0.01  # 1% –ø–∞–¥–µ–Ω–∏–µ
            
            bullish_signals = strategy_df[strategy_df['price_change'] > bullish_threshold]
            bearish_signals = strategy_df[strategy_df['price_change'] < bearish_threshold]
            sideways_signals = strategy_df[
                (strategy_df['price_change'] >= bearish_threshold) & 
                (strategy_df['price_change'] <= bullish_threshold)
            ]
            
            return {
                'bullish_performance': {
                    'signal_count': len(bullish_signals),
                    'buy_ratio': len(bullish_signals[bullish_signals['signal'] == 'BUY']) / len(bullish_signals) if len(bullish_signals) > 0 else 0
                },
                'bearish_performance': {
                    'signal_count': len(bearish_signals),
                    'sell_ratio': len(bearish_signals[bearish_signals['signal'] == 'SELL']) / len(bearish_signals) if len(bearish_signals) > 0 else 0
                },
                'sideways_performance': {
                    'signal_count': len(sideways_signals),
                    'signal_distribution': len(sideways_signals) / len(strategy_df) if len(strategy_df) > 0 else 0
                },
                'market_adaptability': self._calculate_market_adaptability(strategy_df)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ä—ã–Ω–∫–æ–º: {e}")
            return {}
    
    def _calculate_market_adaptability(self, strategy_df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º"""
        try:
            if len(strategy_df) < 10:
                return 0.5
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö
            signal_changes = 0
            prev_signal = None
            
            for _, row in strategy_df.iterrows():
                current_signal = row['signal']
                if prev_signal and current_signal != prev_signal:
                    signal_changes += 1
                prev_signal = current_signal
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1
            adaptability = min(signal_changes / len(strategy_df), 1.0)
            return adaptability
            
        except:
            return 0.5
    
    def _calculate_strategy_risk_metrics(self, strategy_df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy_df.empty:
                return {}
            
            # –ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_frequency = self._calculate_signal_frequency(strategy_df)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_concentration = self._calculate_time_concentration(strategy_df)
            
            # –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            stability_score = self._calculate_stability_score(strategy_df)
            
            return {
                'signal_frequency': signal_frequency,
                'time_concentration': time_concentration,
                'stability_score': stability_score,
                'risk_level': self._assess_risk_level(signal_frequency, time_concentration, stability_score)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def _calculate_signal_frequency(self, strategy_df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å)"""
        try:
            if 'timestamp' not in strategy_df.columns or strategy_df.empty:
                return 0.0
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
            time_span = (strategy_df['timestamp'].max() - strategy_df['timestamp'].min()).total_seconds()
            days = max(time_span / (24 * 3600), 1)  # –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
            
            return len(strategy_df) / days
            
        except:
            return 0.0
    
    def _calculate_time_concentration(self, strategy_df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if 'timestamp' not in strategy_df.columns or len(strategy_df) < 2:
                return 0.5
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            time_diffs = strategy_df['timestamp'].diff().dt.total_seconds().dropna()
            
            if len(time_diffs) == 0:
                return 0.5
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            cv = np.std(time_diffs) / np.mean(time_diffs) if np.mean(time_diffs) > 0 else 0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1 (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
            return min(cv / 2.0, 1.0)
            
        except:
            return 0.5
    
    def _calculate_stability_score(self, strategy_df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy_df.empty:
                return 0.5
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            recent_window = min(50, len(strategy_df))
            recent_data = strategy_df.tail(recent_window)
            
            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            success_periods = 0
            window_size = 10
            
            for i in range(0, len(recent_data) - window_size + 1, window_size):
                window_data = recent_data.iloc[i:i+window_size]
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: –µ—Å–ª–∏ –±–æ–ª—å—à–µ BUY —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–∞—Å—Ç—É—â–µ–º —Ä—ã–Ω–∫–µ
                buy_signals = len(window_data[window_data['signal'] == 'BUY'])
                if buy_signals >= window_size // 2:
                    success_periods += 1
            
            total_periods = max((len(recent_data) // window_size), 1)
            stability = success_periods / total_periods
            
            return stability
            
        except:
            return 0.5
    
    def _assess_risk_level(self, frequency: float, concentration: float, stability: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
            risk_score = (frequency * 0.3 + concentration * 0.4 + (1 - stability) * 0.3)
            
            if risk_score < 0.3:
                return "low"
            elif risk_score < 0.6:
                return "medium"
            else:
                return "high"
                
        except:
            return "medium"
    
    def make_neural_recommendation(self, market_data: Dict, strategy_signals: Dict) -> Optional[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            if self.risk_integration_enabled and self.risk_manager:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                neural_positions = len([bet for bet in self.active_bets.values() 
                                      if bet.get('type') == 'neural_position'])
                
                if neural_positions >= self.neural_position_limit:
                    self.logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
                total_exposure = sum([bet.get('bet_amount', 0) for bet in self.active_bets.values()])
                risk_report = self.risk_manager.get_risk_report()
                current_balance = risk_report.get('total_exposure', 1000)
                
                if total_exposure / current_balance > self.max_neural_exposure_pct / 100:
                    self.logger.info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏: {total_exposure/current_balance*100:.1f}%")
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            if self._check_strategies_file_changes():
                self.logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ")
                self._load_active_strategies()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not self.strategy_mapping:
                self.logger.info("–ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—É—Å—Ç, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                self._load_active_strategies()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            strategy_results = self.analyze_strategy_results()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è
            adapted_signals = self.adapt_strategy_signals_for_neural(strategy_signals)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            predictions = self.neural_trader.predict_strategy_performance(market_data, adapted_signals)
            
            if not predictions:
                return None
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            combined_recommendations = {}
            
            for strategy_name, neural_score in predictions.items():
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                original_strategy_name = self.reverse_strategy_mapping.get(strategy_name, strategy_name)
                strategy_stats = strategy_results.get(original_strategy_name, {})
                historical_data = strategy_stats.get('performance', {})
                
                historical_score = historical_data.get('success_rate', 0.5)
                quality_score = strategy_stats.get('signal_quality', {}).get('quality_score', 0.5)
                risk_level = strategy_stats.get('risk_metrics', {}).get('risk_level', 'medium')
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                neural_weight = 0.7
                historical_weight = 0.2
                quality_weight = 0.1
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                total_trades = historical_data.get('total_trades', 0)
                if total_trades < 10:
                    neural_weight = 0.8
                    historical_weight = 0.1
                    quality_weight = 0.1
                elif total_trades > 100:
                    neural_weight = 0.6
                    historical_weight = 0.3
                    quality_weight = 0.1
                
                # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                combined_score = (neural_weight * neural_score + 
                                historical_weight * historical_score + 
                                quality_weight * quality_score)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
                risk_multiplier = {'low': 1.0, 'medium': 0.95, 'high': 0.85}.get(risk_level, 0.9)
                combined_score *= risk_multiplier
                
                combined_recommendations[strategy_name] = {
                    'neural_score': neural_score,
                    'historical_score': historical_score,
                    'quality_score': quality_score,
                    'combined_score': combined_score,
                    'risk_level': risk_level,
                    'total_signals': strategy_stats.get('basic_stats', {}).get('total_signals', 0),
                    'success_rate': historical_score,
                    'profit_factor': historical_data.get('profit_factor', 1.0),
                    'weights_used': {
                        'neural': neural_weight,
                        'historical': historical_weight,
                        'quality': quality_weight
                    }
                }
            
            if not combined_recommendations:
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            best_strategy = max(combined_recommendations.items(), key=lambda x: x[1]['combined_score'])
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            dynamic_threshold = self._calculate_adaptive_threshold(combined_recommendations)
            
            if best_strategy[1]['combined_score'] > dynamic_threshold:
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                original_strategy_name = self.reverse_strategy_mapping.get(best_strategy[0], best_strategy[0])
                recommendation = {
                    'strategy': original_strategy_name,
                    'confidence': best_strategy[1]['combined_score'],
                    'neural_score': best_strategy[1]['neural_score'],
                    'historical_score': best_strategy[1]['historical_score'],
                    'quality_score': best_strategy[1]['quality_score'],
                    'risk_level': best_strategy[1]['risk_level'],
                    'total_signals': best_strategy[1]['total_signals'],
                    'success_rate': best_strategy[1]['success_rate'],
                    'profit_factor': best_strategy[1]['profit_factor'],
                    'threshold_used': dynamic_threshold,
                    'timestamp': datetime.now().isoformat(),
                    'all_recommendations': combined_recommendations,
                    'market_conditions': self._assess_current_market_conditions(market_data)
                }
                
                self.logger.info(f"–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {best_strategy[0]} "
                               f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_strategy[1]['combined_score']:.3f}, "
                               f"—Ä–∏—Å–∫: {best_strategy[1]['risk_level']})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                self._update_prediction_accuracy(recommendation)
                
                return recommendation
            else:
                self.logger.debug(f"–õ—É—á—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {best_strategy[1]['combined_score']:.3f} "
                                f"–Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ {dynamic_threshold:.3f}")
                return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            return None
    
    def _calculate_adaptive_threshold(self, recommendations: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥
            base_threshold = 0.6
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            scores = [rec['combined_score'] for rec in recommendations.values()]
            if not scores:
                return base_threshold
            
            max_score = max(scores)
            avg_score = np.mean(scores)
            score_std = np.std(scores)
            
            # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–∞–±—ã–µ, —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
            if max_score < 0.55:
                adaptive_threshold = base_threshold - 0.05
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥
            elif max_score > 0.8 and score_std > 0.1:
                adaptive_threshold = base_threshold + 0.05
            else:
                adaptive_threshold = base_threshold
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            neural_stats = self.neural_trader.get_statistics()
            win_rate = neural_stats.get('win_rate', 50) / 100
            
            if win_rate > 0.6:
                adaptive_threshold -= 0.05  # –ë–æ–ª–µ–µ –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            elif win_rate < 0.4:
                adaptive_threshold += 0.05  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –ø—Ä–∏ –ø–ª–æ—Ö–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            return np.clip(adaptive_threshold, 0.5, 0.8)
            
        except:
            return 0.6
    
    def _assess_current_market_conditions(self, market_data: Dict) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            conditions = {
                'volatility': 'medium',
                'trend': 'sideways',
                'volume': 'normal',
                'risk_level': 'medium'
            }
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            for tf in ['5m', '15m', '1h']:
                if tf in market_data and market_data[tf] is not None and not market_data[tf].empty:
                    df = market_data[tf].tail(20)
                    if len(df) > 1:
                        returns = df['close'].pct_change().dropna()
                        if len(returns) > 0:
                            volatility = returns.std()
                            
                            if volatility > 0.02:  # 2%
                                conditions['volatility'] = 'high'
                            elif volatility < 0.01:  # 1%
                                conditions['volatility'] = 'low'
                            
                            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
                            price_change = (df['close'].iloc[-1] - df['close'].iloc[0]) / df['close'].iloc[0]
                            if price_change > 0.01:  # 1%
                                conditions['trend'] = 'bullish'
                            elif price_change < -0.01:  # -1%
                                conditions['trend'] = 'bearish'
                            
                            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
                            volume_avg = df['volume'].mean()
                            volume_current = df['volume'].iloc[-1]
                            if volume_current > volume_avg * 1.5:
                                conditions['volume'] = 'high'
                            elif volume_current < volume_avg * 0.7:
                                conditions['volume'] = 'low'
                            
                            break
            
            # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            risk_factors = 0
            if conditions['volatility'] == 'high':
                risk_factors += 1
            if conditions['volume'] == 'low':
                risk_factors += 1
            
            if risk_factors >= 2:
                conditions['risk_level'] = 'high'
            elif risk_factors == 1:
                conditions['risk_level'] = 'medium'
            else:
                conditions['risk_level'] = 'low'
            
            return conditions
            
        except:
            return {'volatility': 'medium', 'trend': 'sideways', 'volume': 'normal', 'risk_level': 'medium'}
    
    def _update_prediction_accuracy(self, recommendation: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        try:
            self.prediction_accuracy_history.append({
                'timestamp': datetime.now().isoformat(),
                'strategy': recommendation['strategy'],
                'confidence': recommendation['confidence'],
                'neural_score': recommendation['neural_score'],
                'historical_score': recommendation['historical_score']
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.prediction_accuracy_history) > 1000:
                self.prediction_accuracy_history = self.prediction_accuracy_history[-1000:]
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: {e}")
    
    def place_neural_bet(self, market_data: Dict, strategy_signals: Dict) -> Optional[Dict]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = self.make_neural_recommendation(market_data, strategy_signals)
            if not recommendation:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
            bet = self.neural_trader.make_bet(market_data, strategy_signals)
            
            if bet:
                bet_id = f"neural_bet_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:20]}"
                bet['bet_id'] = bet_id
                bet['type'] = 'neural_bet'
                bet['recommendation'] = recommendation
                bet['market_conditions'] = recommendation.get('market_conditions', {})
                
                # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                if self.risk_integration_enabled and self.risk_manager:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                    try:
                        virtual_signal = {
                            'signal': 'BUY',  # –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –≤—Å–µ–≥–¥–∞ "–ø–æ–∫—É–ø–∞—é—Ç" —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                            'entry_price': bet['bet_amount'],
                            'stop_loss': bet['bet_amount'] * 0.5,  # 50% —Å—Ç–æ–ø-–ª–æ—Å—Å
                            'take_profit': bet['bet_amount'] * 1.5,  # 50% –ø—Ä–∏–±—ã–ª—å
                            'strategy': f"neural_{bet['strategy']}",
                            'comment': f"Neural bet on {bet['strategy']}"
                        }
                        
                        # –§–∏–∫—Ç–∏–≤–Ω—ã–π order_response –¥–ª—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
                        mock_response = {
                            'retCode': 0,
                            'result': {
                                'orderId': bet_id,
                                'qty': str(bet['bet_amount'])
                            }
                        }
                        
                        self.risk_manager.register_trade(
                            f"neural_{bet['strategy']}", virtual_signal, mock_response
                        )
                        
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–µ: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
                self.active_bets[bet_id] = bet
                
                self.logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {bet_id} –Ω–∞ {bet['strategy']} "
                               f"(—Å—É–º–º–∞: ${bet['bet_amount']:.2f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {bet['confidence']:.3f})")
                
                return bet
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
            return None
    
    def update_bet_results(self, bet_id: str, result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–≤–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        if bet_id not in self.active_bets:
            self.logger.warning(f"–°—Ç–∞–≤–∫–∞ {bet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö")
            return
        
        try:
            bet = self.active_bets.pop(bet_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            self.neural_trader.update_performance(bet, result)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            self._analyze_bet_result(bet, result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            completed_trade = {
                'bet': bet,
                'result': result,
                'completion_time': datetime.now().isoformat(),
                'duration_hours': self._calculate_bet_duration(bet),
                'market_conditions_at_close': self._get_current_market_snapshot(),
                'analysis': {
                    'expected_outcome': bet['confidence'],
                    'actual_outcome': 1.0 if result.get('success') else 0.0,
                    'confidence_error': abs(bet['confidence'] - (1.0 if result.get('success') else 0.0)),
                    'strategy_match': bet['strategy'] == result.get('winning_strategy', '')
                }
            }
            
            self.completed_trades.append(completed_trade)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
            if len(self.completed_trades) > 1000:
                self.completed_trades = self.completed_trades[-1000:]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            if self.risk_integration_enabled and self.risk_manager:
                try:
                    realized_pnl = result.get('profit', -bet['bet_amount'])
                    self.risk_manager.close_position(
                        f"neural_{bet['strategy']}", "NEURAL", bet['bet_amount'], realized_pnl
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            
            success_msg = "—É—Å–ø–µ—à–Ω–∞ ‚úÖ" if result.get('success') else "–Ω–µ—É—Å–ø–µ—à–Ω–∞ ‚ùå"
            profit_msg = f"${result.get('profit', 0):.2f}"
            
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏ {bet_id}: {success_msg}, "
                           f"–ø—Ä–∏–±—ã–ª—å: {profit_msg}, "
                           f"–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {completed_trade['duration_hours']:.1f}—á")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._trigger_auto_learning()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–≤–∫–∏ {bet_id}: {e}")
    
    def _analyze_bet_result(self, bet: Dict, result: Dict):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            confidence = bet.get('confidence', 0.5)
            success = result.get('success', False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            self.confidence_calibration_history.append({
                'timestamp': datetime.now().isoformat(),
                'predicted_confidence': confidence,
                'actual_outcome': 1.0 if success else 0.0,
                'strategy': bet.get('strategy'),
                'bet_amount': bet.get('bet_amount', 0),
                'market_conditions': bet.get('market_conditions', {})
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.confidence_calibration_history) > 500:
                self.confidence_calibration_history = self.confidence_calibration_history[-500:]
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {e}")
    
    def _calculate_bet_duration(self, bet: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–∫–∏ –≤ —á–∞—Å–∞—Ö"""
        try:
            bet_time = datetime.fromisoformat(bet['timestamp'])
            current_time = datetime.now()
            duration = (current_time - bet_time).total_seconds() / 3600
            return duration
        except:
            return 0.0
    
    def _get_current_market_snapshot(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–Ω–∏–º–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return {
            'timestamp': datetime.now().isoformat(),
            'note': 'Market snapshot not implemented'
        }
    
    def _trigger_auto_learning(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            if not self.auto_learning_enabled:
                return
            
            current_time = datetime.now()
            time_since_last = (current_time - self.last_performance_check).total_seconds() / 3600
            
            if (time_since_last >= self.learning_frequency_hours and 
                len(self.completed_trades) >= self.min_samples_for_learning):
                
                self.logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                recent_trades = self.completed_trades[-self.min_samples_for_learning:]
                success_rate = sum(1 for trade in recent_trades 
                                 if trade['result'].get('success', False)) / len(recent_trades)
                
                # –û–±—É—á–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è
                if success_rate < 0.5:
                    self.neural_trader.train_with_validation()
                    self.logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. "
                                   f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {success_rate:.1%}")
                
                self.last_performance_check = current_time
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def get_neural_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            neural_stats = self.neural_trader.get_advanced_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            integration_stats = {
                'active_bets': len(self.active_bets),
                'completed_trades': len(self.completed_trades),
                'total_neural_trades': len(self.completed_trades),
                'integration_uptime_hours': (datetime.now() - self.last_performance_check).total_seconds() / 3600
            }
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            strategy_analysis = self.analyze_strategy_results()
            
            # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            calibration_stats = self._analyze_confidence_calibration()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            recent_performance = self._analyze_recent_performance()
            
            return {
                'neural_trader': neural_stats,
                'integration': integration_stats,
                'strategy_analysis': strategy_analysis,
                'confidence_calibration': calibration_stats,
                'recent_performance': recent_performance,
                'risk_integration': {
                    'enabled': self.risk_integration_enabled,
                    'max_exposure_pct': self.max_neural_exposure_pct,
                    'position_limit': self.neural_position_limit
                },
                'auto_learning': {
                    'enabled': self.auto_learning_enabled,
                    'frequency_hours': self.learning_frequency_hours,
                    'min_samples': self.min_samples_for_learning,
                    'last_check': self.last_performance_check.isoformat()
                }
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def _analyze_confidence_calibration(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            if not self.confidence_calibration_history:
                return {'status': 'insufficient_data'}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_bins = {
                'low': [],      # 0.5 - 0.6
                'medium': [],   # 0.6 - 0.7
                'high': [],     # 0.7 - 0.8
                'very_high': [] # 0.8+
            }
            
            for record in self.confidence_calibration_history:
                confidence = record['predicted_confidence']
                outcome = record['actual_outcome']
                
                if confidence < 0.6:
                    confidence_bins['low'].append(outcome)
                elif confidence < 0.7:
                    confidence_bins['medium'].append(outcome)
                elif confidence < 0.8:
                    confidence_bins['high'].append(outcome)
                else:
                    confidence_bins['very_high'].append(outcome)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
            calibration_analysis = {}
            for bin_name, outcomes in confidence_bins.items():
                if outcomes:
                    actual_success_rate = np.mean(outcomes)
                    calibration_analysis[bin_name] = {
                        'count': len(outcomes),
                        'actual_success_rate': actual_success_rate,
                        'sample_size': len(outcomes)
                    }
                else:
                    calibration_analysis[bin_name] = {
                        'count': 0,
                        'actual_success_rate': 0.0,
                        'sample_size': 0
                    }
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            all_predictions = [r['predicted_confidence'] for r in self.confidence_calibration_history]
            all_outcomes = [r['actual_outcome'] for r in self.confidence_calibration_history]
            
            # Brier Score (—á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ)
            brier_score = np.mean([(pred - outcome)**2 for pred, outcome in zip(all_predictions, all_outcomes)])
            
            return {
                'brier_score': brier_score,
                'calibration_by_confidence': calibration_analysis,
                'total_samples': len(self.confidence_calibration_history),
                'overall_accuracy': np.mean(all_outcomes)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            return {'error': str(e)}
    
    def _analyze_recent_performance(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not self.completed_trades:
                return {'status': 'no_data'}
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–¥–µ–ª–æ–∫ –∏–ª–∏ –≤—Å–µ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ
            recent_count = min(50, len(self.completed_trades))
            recent_trades = self.completed_trades[-recent_count:]
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            successes = sum(1 for trade in recent_trades if trade['result'].get('success', False))
            success_rate = successes / len(recent_trades)
            
            # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
            total_profit = sum(trade['result'].get('profit', 0) for trade in recent_trades)
            avg_profit = total_profit / len(recent_trades)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_performance = {}
            for trade in recent_trades:
                strategy = trade['bet'].get('strategy', 'unknown')
                if strategy not in strategy_performance:
                    strategy_performance[strategy] = {'wins': 0, 'total': 0, 'profit': 0}
                
                strategy_performance[strategy]['total'] += 1
                if trade['result'].get('success', False):
                    strategy_performance[strategy]['wins'] += 1
                strategy_performance[strategy]['profit'] += trade['result'].get('profit', 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–Ω—Ä–µ–π—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for strategy, stats in strategy_performance.items():
                stats['win_rate'] = stats['wins'] / stats['total'] if stats['total'] > 0 else 0
            
            # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            calibration_errors = []
            for trade in recent_trades:
                predicted = trade['bet'].get('confidence', 0.5)
                actual = 1.0 if trade['result'].get('success', False) else 0.0
                calibration_errors.append(abs(predicted - actual))
            
            avg_calibration_error = np.mean(calibration_errors) if calibration_errors else 0
            
            return {
                'sample_size': len(recent_trades),
                'success_rate': success_rate,
                'total_profit': total_profit,
                'avg_profit_per_trade': avg_profit,
                'avg_calibration_error': avg_calibration_error,
                'strategy_breakdown': strategy_performance,
                'best_strategy': max(strategy_performance.items(), 
                                   key=lambda x: x[1]['win_rate'])[0] if strategy_performance else None,
                'worst_strategy': min(strategy_performance.items(), 
                                    key=lambda x: x[1]['win_rate'])[0] if strategy_performance else None
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'error': str(e)}
    
    def get_strategy_ranking(self) -> List[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            strategy_results = self.analyze_strategy_results()
            
            ranking = []
            for strategy_name, results in strategy_results.items():
                performance = results.get('performance', {})
                risk_metrics = results.get('risk_metrics', {})
                signal_quality = results.get('signal_quality', {})
                
                # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                score_components = {
                    'success_rate': performance.get('success_rate', 0.5) * 0.3,
                    'profit_factor': min(performance.get('profit_factor', 1.0) / 2.0, 1.0) * 0.25,
                    'signal_quality': signal_quality.get('quality_score', 0.5) * 0.2,
                    'stability': risk_metrics.get('stability_score', 0.5) * 0.15,
                    'risk_adjustment': {'low': 0.1, 'medium': 0.05, 'high': 0.0}.get(
                        risk_metrics.get('risk_level', 'medium'), 0.05) * 0.1
                }
                
                overall_score = sum(score_components.values())
                
                ranking.append({
                    'strategy': strategy_name,
                    'overall_score': overall_score,
                    'score_components': score_components,
                    'total_signals': results.get('basic_stats', {}).get('total_signals', 0),
                    'success_rate': performance.get('success_rate', 0.5) * 100,
                    'avg_profit': performance.get('avg_profit', 0),
                    'profit_factor': performance.get('profit_factor', 1.0),
                    'risk_level': risk_metrics.get('risk_level', 'medium'),
                    'signal_quality': signal_quality.get('quality_score', 0.5),
                    'recent_activity': results.get('time_patterns', {}).get('recent_activity', 0)
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–µ
            ranking.sort(key=lambda x: x['overall_score'], reverse=True)
            
            return ranking
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return []
    
    def cleanup_old_bets(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫"""
        current_time = datetime.now()
        expired_bets = []
        
        for bet_id, bet in self.active_bets.items():
            try:
                bet_time = datetime.fromisoformat(bet['timestamp'])
                hours_elapsed = (current_time - bet_time).total_seconds() / 3600
                
                if hours_elapsed > self.timeout_hours:
                    expired_bets.append(bet_id)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏ {bet_id}: {e}")
                expired_bets.append(bet_id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
        
        for bet_id in expired_bets:
            try:
                bet = self.active_bets[bet_id]
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é —Å–¥–µ–ª–∫—É
                result = {
                    'success': False,
                    'profit': -bet['bet_amount'],
                    'reason': 'timeout',
                    'timeout_hours': self.timeout_hours
                }
                
                self.update_bet_results(bet_id, result)
                self.logger.info(f"–°—Ç–∞–≤–∫–∞ {bet_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è "
                               f"(–≤–æ–∑—Ä–∞—Å—Ç: {self.timeout_hours}—á)")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏ {bet_id}: {e}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç–∞–≤–∫—É
                if bet_id in self.active_bets:
                    del self.active_bets[bet_id]
    
    def save_state(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            state = {
                'version': '2.0',
                'timestamp': datetime.now().isoformat(),
                'active_bets': self.active_bets,
                'completed_trades': self.completed_trades[-200:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–¥–µ–ª–æ–∫
                'prediction_accuracy_history': self.prediction_accuracy_history[-100:],
                'confidence_calibration_history': self.confidence_calibration_history[-100:],
                'settings': {
                    'profit_threshold': self.profit_threshold,
                    'timeout_hours': self.timeout_hours,
                    'cache_ttl_minutes': self.cache_ttl_minutes,
                    'max_neural_exposure_pct': self.max_neural_exposure_pct,
                    'neural_position_limit': self.neural_position_limit,
                    'auto_learning_enabled': self.auto_learning_enabled,
                    'learning_frequency_hours': self.learning_frequency_hours
                },
                'statistics': {
                    'last_performance_check': self.last_performance_check.isoformat(),
                    'total_active_bets': len(self.active_bets),
                    'total_completed_trades': len(self.completed_trades)
                }
            }
            
            os.makedirs('data/ai', exist_ok=True)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with open('data/ai/neural_integration_state.json', 'w') as f:
                json.dump(state, f, indent=2, default=str)
            
            # –ë—ç–∫–∞–ø —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            backup_filename = f"data/ai/neural_integration_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(backup_filename, 'w') as f:
                json.dump(state, f, default=str)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            self._cleanup_old_integration_backups()
            
            self.logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _cleanup_old_integration_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            import glob
            backup_files = glob.glob('data/ai/neural_integration_backup_*.json')
            backup_files.sort()
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±—ç–∫–∞–ø–∞
            for old_backup in backup_files[:-3]:
                try:
                    os.remove(old_backup)
                except:
                    pass
        except:
            pass
    
    def load_state(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            state_path = 'data/ai/neural_integration_state.json'
            if not os.path.exists(state_path):
                self.logger.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return
            
            with open(state_path, 'r') as f:
                state = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            version = state.get('version', '1.0')
            if version != '2.0':
                self.logger.warning(f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ {version}, –æ–∂–∏–¥–∞–ª–∞—Å—å 2.0")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.active_bets = state.get('active_bets', {})
            self.completed_trades = state.get('completed_trades', [])
            self.prediction_accuracy_history = state.get('prediction_accuracy_history', [])
            self.confidence_calibration_history = state.get('confidence_calibration_history', [])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = state.get('settings', {})
            self.profit_threshold = settings.get('profit_threshold', self.profit_threshold)
            self.timeout_hours = settings.get('timeout_hours', self.timeout_hours)
            self.cache_ttl_minutes = settings.get('cache_ttl_minutes', self.cache_ttl_minutes)
            self.max_neural_exposure_pct = settings.get('max_neural_exposure_pct', self.max_neural_exposure_pct)
            self.neural_position_limit = settings.get('neural_position_limit', self.neural_position_limit)
            self.auto_learning_enabled = settings.get('auto_learning_enabled', self.auto_learning_enabled)
            self.learning_frequency_hours = settings.get('learning_frequency_hours', self.learning_frequency_hours)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            statistics = state.get('statistics', {})
            if 'last_performance_check' in statistics:
                try:
                    self.last_performance_check = datetime.fromisoformat(statistics['last_performance_check'])
                except:
                    self.last_performance_check = datetime.now()
            
            self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.active_bets)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫, "
                           f"{len(self.completed_trades)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self.logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def reset_integration(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.logger.info("–°–±—Ä–æ—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        self.active_bets = {}
        self.completed_trades = []
        self.strategy_performance_cache = {}
        self.prediction_accuracy_history = []
        self.confidence_calibration_history = []
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        self.last_performance_check = datetime.now()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
        self.neural_trader.reset_model()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–±—Ä–æ—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_state()
        
        self.logger.info("–ù–µ–π—Ä–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")