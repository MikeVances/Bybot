#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —á–∞—Å—Ç—ã–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–∏–±—ã–ª—è–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.exchange.api_adapter import create_trading_bot_adapter
from bot.strategy.implementations.volume_vwap_strategy import create_volume_vwap_strategy
from bot.strategy.base import VolumeVWAPConfig
import pandas as pd

def test_scalping_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    print("üéØ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api = create_trading_bot_adapter(
        symbol="BTCUSDT",
        use_v5=True,
        testnet=True
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    scalping_config = VolumeVWAPConfig(
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
        stop_loss_atr_multiplier=0.8,  # –ë—ã–ª–æ 1.5
        
        # –£–º–µ–Ω—å—à–∞–µ–º R:R –¥–ª—è —á–∞—Å—Ç—ã—Ö –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π
        risk_reward_ratio=1.2,  # –ë—ã–ª–æ 1.5
        
        # –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        signal_strength_threshold=0.5,  # –ë—ã–ª–æ 0.6
        confluence_required=1,  # –ë—ã–ª–æ 2
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        adaptive_parameters=True,
        market_regime_adaptation=True
    )
    
    print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞:")
    print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å ATR –º–Ω–æ–∂–∏—Ç–µ–ª—å: {scalping_config.stop_loss_atr_multiplier}")
    print(f"   Risk/Reward —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {scalping_config.risk_reward_ratio}")
    print(f"   –ü–æ—Ä–æ–≥ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {scalping_config.signal_strength_threshold}")
    print(f"   –¢—Ä–µ–±—É–µ–º—ã–µ confluence —Ñ–∞–∫—Ç–æ—Ä—ã: {scalping_config.confluence_required}")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    strategy = create_volume_vwap_strategy(scalping_config)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    df = api.get_ohlcv("1", 100)
    
    if df is None or df.empty:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    current_price = df['close'].iloc[-1]
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    print("\nüìâ –¢–µ—Å—Ç SHORT –ø–æ–∑–∏—Ü–∏–∏ (—Å–∫–∞–ª—å–ø–∏–Ω–≥):")
    entry_price_short = current_price
    stop_loss_short, take_profit_short = strategy.calculate_dynamic_levels(df, entry_price_short, 'SELL')
    
    print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price_short:.2f}")
    print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss_short:.2f}")
    print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit_short:.2f}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º R:R
    risk = stop_loss_short - entry_price_short
    reward = entry_price_short - take_profit_short
    rr_ratio = reward / risk if risk > 0 else 0
    
    print(f"   –†–∏—Å–∫: ${risk:.2f}")
    print(f"   –ü—Ä–∏–±—ã–ª—å: ${reward:.2f}")
    print(f"   R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {rr_ratio:.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
    if stop_loss_short > entry_price_short:
        print("   ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    else:
        print("   ‚ùå –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    
    if take_profit_short < entry_price_short:
        print("   ‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    else:
        print("   ‚ùå –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    
    if rr_ratio >= 1.0:
        print("   ‚úÖ R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
    else:
        print(f"   ‚ö†Ô∏è R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–µ ({rr_ratio:.3f}), –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    print("\nüéØ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—Å–∫–∞–ª—å–ø–∏–Ω–≥):")
    market_data = {
        '1m': df,
        '5m': df,
        '15m': df,
        '1h': df
    }
    
    signal = strategy.execute(market_data, symbol="BTCUSDT")
    
    if signal:
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal')}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.get('entry_price', 0):.2f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.get('stop_loss', 0):.2f}")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.get('take_profit', 0):.2f}")
        print(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal_strength', 0):.3f}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º R:R –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        sl = signal.get('stop_loss', 0)
        tp = signal.get('take_profit', 0)
        entry = signal.get('entry_price', 0)
        
        if entry > 0 and sl > 0 and tp > 0:
            if signal.get('signal') == 'SELL':
                risk = sl - entry
                reward = entry - tp
            else:
                risk = entry - sl
                reward = tp - entry
            
            rr = reward / risk if risk > 0 else 0
            print(f"   R:R –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞: {rr:.3f}")
    else:
        print("   ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç —Å–∫–∞–ª—å–ø–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüí° –í—ã–≤–æ–¥—ã:")
    print("   - –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –≤—ã—Ö–æ–¥—ã")
    print("   - –ù–∏–∑–∫–∏–π R:R —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç—ã—Ö –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–±—ã–ª—è—Ö")
    print("   - –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")

if __name__ == "__main__":
    test_scalping_config() 