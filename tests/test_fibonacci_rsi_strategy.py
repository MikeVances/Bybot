"""
–¢–µ—Å—Ç –¥–ª—è Fibonacci RSI Volume Strategy
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –°–µ—Ä–≥–µ—è –Ω–∞ SoloConf
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.strategy.implementations.fibonacci_rsi_strategy import (
    FibonacciRSIStrategy,
    FibonacciRSIConfig,
    create_fibonacci_rsi_strategy,
    create_conservative_fibonacci_rsi,
    create_aggressive_fibonacci_rsi
)


class MockState:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    def __init__(self):
        self.in_position = False
        self.position_side = None
        self.entry_price = None
        self.entry_time = None
        self.stop_loss = None
        self.take_profit = None
        self.position_size = 0.0
        self.unrealized_pnl = 0.0


def create_mock_market_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    end_time = datetime.now()
    start_time = end_time - timedelta(hours=24)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 15m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    timestamps_15m = pd.date_range(start=start_time, end=end_time, freq='15T')
    data_15m = []
    
    base_price = 45000.0
    for i, ts in enumerate(timestamps_15m):
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
        trend_factor = 1 + (i / len(timestamps_15m)) * 0.02  # –ù–µ–±–æ–ª—å—à–æ–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        noise = np.random.normal(0, 100)
        
        open_price = base_price * trend_factor + noise
        high_price = open_price + np.random.uniform(50, 200)
        low_price = open_price - np.random.uniform(50, 200)
        close_price = open_price + np.random.uniform(-100, 100)
        volume = np.random.uniform(1000, 5000)
        
        data_15m.append({
            'timestamp': ts,
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': volume
        })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    timestamps_1h = pd.date_range(start=start_time, end=end_time, freq='1H')
    data_1h = []
    
    for i, ts in enumerate(timestamps_1h):
        trend_factor = 1 + (i / len(timestamps_1h)) * 0.02
        noise = np.random.normal(0, 200)
        
        open_price = base_price * trend_factor + noise
        high_price = open_price + np.random.uniform(100, 400)
        low_price = open_price - np.random.uniform(100, 400)
        close_price = open_price + np.random.uniform(-200, 200)
        volume = np.random.uniform(2000, 10000)
        
        data_1h.append({
            'timestamp': ts,
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': volume
        })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df_15m = pd.DataFrame(data_15m)
    df_1h = pd.DataFrame(data_1h)
    
    return {
        '15m': df_15m,
        '1h': df_1h
    }


def test_fibonacci_rsi_strategy_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy = create_fibonacci_rsi_strategy()
        assert strategy is not None
        assert isinstance(strategy, FibonacciRSIStrategy)
        print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        conservative = create_conservative_fibonacci_rsi()
        assert conservative is not None
        assert isinstance(conservative, FibonacciRSIStrategy)
        print("‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        aggressive = create_aggressive_fibonacci_rsi()
        assert aggressive is not None
        assert isinstance(aggressive, FibonacciRSIStrategy)
        print("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False


def test_fibonacci_rsi_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Fibonacci RSI...")
    
    try:
        config = FibonacciRSIConfig()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        assert config.fast_tf == '15m'
        assert config.slow_tf == '1h'
        assert config.ema_short == 20
        assert config.ema_long == 50
        assert config.rsi_period == 14
        assert config.volume_multiplier == 1.5
        assert config.atr_period == 14
        assert config.fib_lookback == 50
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_fibonacci_rsi_indicators():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    
    try:
        strategy = create_fibonacci_rsi_strategy()
        market_data = create_mock_market_data()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = strategy.calculate_strategy_indicators(market_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        assert 'ema_short' in indicators
        assert 'ema_long' in indicators
        assert 'rsi' in indicators
        assert 'volume_spike' in indicators
        assert 'atr' in indicators
        assert 'fib_levels' in indicators
        assert 'trend_up' in indicators
        assert 'trend_down' in indicators
        
        print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: RSI={indicators.get('rsi', 0):.1f}, "
              f"EMA_short={indicators.get('ema_short', 0):.1f}, "
              f"Volume_ratio={indicators.get('volume_ratio', 0):.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False


def test_fibonacci_rsi_signal_strength():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞...")
    
    try:
        strategy = create_fibonacci_rsi_strategy()
        market_data = create_mock_market_data()
        indicators = strategy.calculate_strategy_indicators(market_data)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è BUY
        buy_strength = strategy.calculate_signal_strength(market_data, indicators, 'BUY')
        assert 0 <= buy_strength <= 1
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SELL
        sell_strength = strategy.calculate_signal_strength(market_data, indicators, 'SELL')
        assert 0 <= sell_strength <= 1
        
        print(f"‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: BUY={buy_strength:.2f}, SELL={sell_strength:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return False


def test_fibonacci_rsi_confluence_factors():
    """–¢–µ—Å—Ç confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤...")
    
    try:
        strategy = create_fibonacci_rsi_strategy()
        market_data = create_mock_market_data()
        indicators = strategy.calculate_strategy_indicators(market_data)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º confluence –¥–ª—è BUY
        buy_count, buy_factors = strategy.check_confluence_factors(market_data, indicators, 'BUY')
        assert buy_count >= 0
        assert isinstance(buy_factors, list)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º confluence –¥–ª—è SELL
        sell_count, sell_factors = strategy.check_confluence_factors(market_data, indicators, 'SELL')
        assert sell_count >= 0
        assert isinstance(sell_factors, list)
        
        print(f"‚úÖ Confluence —Ñ–∞–∫—Ç–æ—Ä—ã: BUY={buy_count} ({buy_factors}), SELL={sell_count} ({sell_factors})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
        return False


def test_fibonacci_rsi_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        strategy = create_fibonacci_rsi_strategy()
        market_data = create_mock_market_data()
        state = MockState()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
        signal = strategy.execute(market_data, state)
        
        # –°–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å None (–Ω–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞)
        if signal is not None:
            assert 'signal' in signal
            assert 'entry_price' in signal
            assert 'stop_loss' in signal
            assert 'take_profit' in signal
            assert 'strategy' in signal
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal['signal']} –ø–æ —Ü–µ–Ω–µ {signal['entry_price']}")
        else:
            print("‚úÖ –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False


def test_fibonacci_rsi_variants():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        conservative = create_conservative_fibonacci_rsi()
        assert conservative.config.rsi_overbought == 75.0
        assert conservative.config.rsi_oversold == 25.0
        assert conservative.config.volume_multiplier == 2.0
        assert conservative.config.signal_strength_threshold == 0.7
        print("‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        aggressive = create_aggressive_fibonacci_rsi()
        assert aggressive.config.rsi_overbought == 65.0
        assert aggressive.config.rsi_oversold == 35.0
        assert aggressive.config.volume_multiplier == 1.2
        assert aggressive.config.signal_strength_threshold == 0.5
        print("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False


def test_fibonacci_rsi_fibonacci_levels():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏...")
    
    try:
        strategy = create_fibonacci_rsi_strategy()
        market_data = create_mock_market_data()
        indicators = strategy.calculate_strategy_indicators(market_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
        if 'fib_levels' in indicators:
            fib_levels = indicators['fib_levels']
            assert isinstance(fib_levels, dict)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            expected_levels = ['fib_382', 'fib_500', 'fib_618', 'fib_786']
            for level in expected_levels:
                if level in fib_levels:
                    assert isinstance(fib_levels[level], (int, float))
            
            print(f"‚úÖ –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {list(fib_levels.keys())}")
        else:
            print("‚ö†Ô∏è –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Fibonacci RSI Strategy")
    print("=" * 50)
    
    tests = [
        test_fibonacci_rsi_strategy_creation,
        test_fibonacci_rsi_config,
        test_fibonacci_rsi_indicators,
        test_fibonacci_rsi_signal_strength,
        test_fibonacci_rsi_confluence_factors,
        test_fibonacci_rsi_execution,
        test_fibonacci_rsi_variants,
        test_fibonacci_rsi_fibonacci_levels
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    run_all_tests() 