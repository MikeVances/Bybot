# integration_test.py
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import logging
import traceback
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)
logger = logging.getLogger(__name__)


def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    test_results = {}
    
    # 1. –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    try:
        from bot.strategy.base import (
            BaseStrategy, VolumeVWAPConfig, MarketRegime, 
            SignalType, ConfluenceFactor, get_version_info
        )
        test_results['base_architecture'] = True
        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        test_results['base_architecture'] = False
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
    
    # 2. VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    try:
        from bot.strategy.implementations.volume_vwap_strategy import (
            VolumeVWAPStrategy, create_volume_vwap_strategy
        )
        test_results['volume_vwap_strategy'] = True
        logger.info("‚úÖ VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        test_results['volume_vwap_strategy'] = False
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
    
    # 3. –£—Ç–∏–ª–∏—Ç—ã
    try:
        from bot.strategy.utils.indicators import TechnicalIndicators
        from bot.strategy.utils.validators import DataValidator
        from bot.strategy.utils.market_analysis import MarketRegimeAnalyzer
        test_results['utilities'] = True
        logger.info("‚úÖ –£—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        test_results['utilities'] = False
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —É—Ç–∏–ª–∏—Ç: {e}")
    
    # 4. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        # –≠—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from bot.config_manager import config
        test_results['bot_core'] = True
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        test_results['bot_core'] = False
        logger.warning(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    return test_results


def test_strategy_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ main.py
        from main import StrategyManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        strategy_manager = StrategyManager()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        init_success = strategy_manager.initialize_strategies()
        
        if init_success:
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
            info = strategy_manager.get_strategy_info()
            logger.info(f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {info['total_strategies']}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: {info['active_strategies']}")
            logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ: {info['strategy_names']}")
            logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ: {info['active_names']}")
            
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        logger.error(traceback.format_exc())
        return False


def test_strategy_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import pandas as pd
        import numpy as np
        from datetime import datetime, timedelta
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start=datetime.now() - timedelta(days=1), periods=100, freq='5min')
        
        np.random.seed(42)
        base_price = 45000
        prices = base_price + np.cumsum(np.random.normal(0, 50, 100))
        
        test_data = pd.DataFrame({
            'timestamp': dates,
            'open': prices + np.random.normal(0, 10, 100),
            'high': prices + np.abs(np.random.normal(0, 20, 100)),
            'low': prices - np.abs(np.random.normal(0, 20, 100)),
            'close': prices,
            'volume': np.random.normal(1000000, 200000, 100)
        })
        
        test_data.set_index('timestamp', inplace=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        from bot.strategy.implementations.volume_vwap_strategy import create_volume_vwap_strategy
        
        strategy = create_volume_vwap_strategy()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = strategy.calculate_strategy_indicators(test_data)
        
        if indicators:
            logger.info(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(indicators)} —à—Ç—É–∫")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            mock_state = {'position': None, 'balance': 10000}
            
            signal = strategy.execute(test_data, mock_state, symbol='BTCUSDT')
            
            if signal:
                logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª: {signal['signal']}")
                logger.info(f"üìä –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal['signal_strength']:.3f}")
                logger.info(f"üéØ Confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {len(signal['confluence_factors'])}")
                return True
            else:
                logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
                return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        logger.error(traceback.format_exc())
        return False


def test_data_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from bot.strategy.utils.validators import DataValidator, ValidationLevel
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã)
        validator = DataValidator
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import pandas as pd
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        dates = pd.date_range(start='2024-01-01', periods=60, freq='1h')
        np.random.seed(42)
        base_price = 45000
        prices = base_price + np.cumsum(np.random.normal(0, 50, 60))
        
        test_data = pd.DataFrame({
            'open': prices + np.random.normal(0, 10, 60),
            'high': prices + np.abs(np.random.normal(0, 20, 60)),
            'low': prices - np.abs(np.random.normal(0, 20, 60)),
            'close': prices,
            'volume': np.random.normal(1000000, 200000, 60)
        }, index=dates)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        result = validator.validate_basic_data(test_data)
        
        if result.is_valid:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –∫–∞—á–µ—Å—Ç–≤–æ: {result.quality.value}")
            return True
        else:
            logger.info(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã: {result.errors}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


def test_market_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
    
    try:
        from bot.strategy.utils.market_analysis import MarketRegimeAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = MarketRegimeAnalyzer()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import pandas as pd
        import numpy as np
        
        dates = pd.date_range(start='2024-01-01', periods=50, freq='1h')
        prices = 45000 + np.cumsum(np.random.normal(0, 100, 50))
        
        test_data = pd.DataFrame({
            'open': prices + np.random.normal(0, 50, 50),
            'high': prices + np.abs(np.random.normal(0, 100, 50)),
            'low': prices - np.abs(np.random.normal(0, 100, 50)),
            'close': prices,
            'volume': np.random.normal(1000000, 300000, 50)
        }, index=dates)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
        analysis = analyzer.analyze_market_condition(test_data)
        
        logger.info(f"‚úÖ –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞: {analysis.regime.value}")
        logger.info(f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞: {analysis.trend_direction}")
        logger.info(f"üí™ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis.trend_strength:.2f}")
        logger.info(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
        return False


def test_technical_indicators():
    """–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    
    try:
        from bot.strategy.utils.indicators import TechnicalIndicators
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import pandas as pd
        import numpy as np
        
        dates = pd.date_range(start='2024-01-01', periods=50, freq='1h')
        prices = 45000 + np.cumsum(np.random.normal(0, 100, 50))
        
        test_data = pd.DataFrame({
            'open': prices + np.random.normal(0, 50, 50),
            'high': prices + np.abs(np.random.normal(0, 100, 50)),
            'low': prices - np.abs(np.random.normal(0, 100, 50)),
            'close': prices,
            'volume': np.random.normal(1000000, 300000, 50)
        }, index=dates)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators_tested = 0
        
        # RSI
        rsi_result = TechnicalIndicators.calculate_rsi(test_data)
        if rsi_result.is_valid:
            indicators_tested += 1
            logger.info(f"‚úÖ RSI: {rsi_result.last_value:.2f}")
        
        # VWAP
        vwap_result = TechnicalIndicators.calculate_vwap(test_data)
        if vwap_result.is_valid:
            indicators_tested += 1
            logger.info(f"‚úÖ VWAP: {vwap_result.last_value:.2f}")
        
        # ATR
        atr_result = TechnicalIndicators.calculate_atr_safe(test_data)
        if atr_result.is_valid:
            indicators_tested += 1
            logger.info(f"‚úÖ ATR: {atr_result.value:.2f}")
        
        # Bollinger Bands
        bb_result = TechnicalIndicators.calculate_bollinger_bands(test_data)
        if bb_result.is_valid:
            indicators_tested += 1
            logger.info(f"‚úÖ Bollinger Bands: –ø–æ–∑–∏—Ü–∏—è {bb_result.value['position'].iloc[-1]:.2f}")
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {indicators_tested}/4")
        return indicators_tested >= 3
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False


def run_comprehensive_integration_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.info("=" * 80)
    
    test_results = {}
    
    # –¢–µ—Å—Ç—ã
    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", test_strategy_manager),
        ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", test_strategy_execution),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", test_data_validation),
        ("–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", test_market_analysis),
        ("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", test_technical_indicators)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\n--- –¢–µ—Å—Ç: {test_name} ---")
        try:
            if test_name == "–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã":
                # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
                result_dict = test_func()
                result = all(result_dict.values())
                test_results[test_name] = result_dict
            else:
                result = test_func()
                test_results[test_name] = result
            
            if result:
                logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed_tests += 1
            else:
                logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            logger.error(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
            test_results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 80)
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 80)
    
    for test_name, result in test_results.items():
        if isinstance(result, dict):
            # –î–ª—è —Ç–µ—Å—Ç–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            logger.info(f"{test_name}:")
            for subtest, subresult in result.items():
                status = "‚úÖ" if subresult else "‚ùå"
                logger.info(f"  {status} {subtest}")
        else:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{test_name}: {status}")
    
    logger.info(f"\nüìä –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        logger.info("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        logger.warning("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return False


if __name__ == "__main__":
    try:
        success = run_comprehensive_integration_test()
        
        if success:
            print("\n" + "="*60)
            print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: python main.py")
            print("="*60)
            sys.exit(0)
        else:
            print("\n" + "="*60)
            print("‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û!")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
            print("="*60)
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)