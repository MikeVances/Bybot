#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è Multi-Timeframe Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ v2.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import sys
import os
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)

def test_multitf_strategy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiTF —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multi-Timeframe Volume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ v2.0")
    print("=" * 60)
    
    try:
        # 1. –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        from bot.strategy.implementations.multitf_volume_strategy import (
            MultiTFVolumeStrategy, 
            create_multitf_volume_strategy,
            create_conservative_multitf_volume,
            create_aggressive_multitf_volume
        )
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–µ–Ω")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        dates_5m = pd.date_range(start='2024-01-01', periods=100, freq='5min')
        dates_1h = pd.date_range(start='2024-01-01', periods=50, freq='1h')
        
        np.random.seed(42)
        base_price = 45000
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è 5m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        prices_5m = base_price + np.cumsum(np.random.normal(0, 20, 100))
        test_data_5m = pd.DataFrame({
            'open': prices_5m + np.random.normal(0, 5, 100),
            'high': prices_5m + np.abs(np.random.normal(0, 10, 100)),
            'low': prices_5m - np.abs(np.random.normal(0, 10, 100)),
            'close': prices_5m + np.random.normal(0, 5, 100),
            'volume': np.random.randint(1000, 3000, 100)
        })
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        prices_1h = base_price + np.cumsum(np.random.normal(0, 50, 50))
        test_data_1h = pd.DataFrame({
            'open': prices_1h + np.random.normal(0, 10, 50),
            'high': prices_1h + np.abs(np.random.normal(0, 20, 50)),
            'low': prices_1h - np.abs(np.random.normal(0, 20, 50)),
            'close': prices_1h + np.random.normal(0, 10, 50),
            'volume': np.random.randint(5000, 15000, 50)
        })
        
        # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã–µ
        market_data = {
            '5m': test_data_5m,
            '1h': test_data_1h
        }
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        strategy = create_multitf_volume_strategy()
        print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy.strategy_name}")
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        conservative = create_conservative_multitf_volume()
        print(f"‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {conservative.strategy_name}")
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        aggressive = create_aggressive_multitf_volume()
        print(f"‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {aggressive.strategy_name}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
        indicators = strategy.calculate_strategy_indicators(market_data)
        print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        key_indicators = ['fast_trend', 'slow_trend', 'volume_analysis', 'trends_aligned_bullish']
        for indicator in key_indicators:
            if indicator in indicators:
                print(f"‚úÖ {indicator}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ö†Ô∏è {indicator}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        print("\nüí™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞:")
        buy_strength = strategy.calculate_signal_strength(market_data, indicators, 'BUY')
        sell_strength = strategy.calculate_signal_strength(market_data, indicators, 'SELL')
        print(f"‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ BUY: {buy_strength:.3f}")
        print(f"‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ SELL: {sell_strength:.3f}")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤:")
        buy_confluence, buy_factors = strategy.check_confluence_factors(market_data, indicators, 'BUY')
        sell_confluence, sell_factors = strategy.check_confluence_factors(market_data, indicators, 'SELL')
        print(f"‚úÖ Confluence BUY: {buy_confluence} —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {buy_factors}")
        print(f"‚úÖ Confluence SELL: {sell_confluence} —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {sell_factors}")
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        result = strategy.execute(market_data)
        if result:
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result['signal']}")
            print(f"üìä –î–µ—Ç–∞–ª–∏: {result.get('comment', 'N/A')}")
        else:
            print("‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        # 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        info = strategy.get_strategy_info()
        print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {info['strategy_name']}")
        print(f"‚úÖ –í–µ—Ä—Å–∏—è: {info['version']}")
        print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: {info['is_active']}")
        print(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –¢–§: {info['config']['fast_tf']}")
        print(f"‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –¢–§: {info['config']['slow_tf']}")
        
        # 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        stats = strategy.get_strategy_statistics()
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['signals_generated']}")
        print(f"‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['signals_executed']}")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ MULTITF –°–¢–†–ê–¢–ï–ì–ò–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_multitf_strategy()
    sys.exit(0 if success else 1) 