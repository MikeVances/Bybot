# main.py
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
–í–µ—Ä—Å–∏—è 2.0 —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

–§—É–Ω–∫—Ü–∏–∏: 
- –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
- Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ 
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
- –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import threading
import logging
import signal
import sys
import time
import traceback
from datetime import datetime
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
from bot.core import run_trading_with_risk_management
from bot.services.telegram_bot import TelegramBot
from bot.config_manager import config
from bot.risk import RiskManager
from bot.monitoring.metrics_exporter import MetricsExporter

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
from bot.strategy.base import (
    BaseStrategy, 
    VolumeVWAPConfig,
    CumDeltaConfig,
    MultiTFConfig,
    get_version_info,
    validate_imports
)
from bot.strategy.implementations.volume_vwap_strategy import (
    VolumeVWAPStrategy,
    create_volume_vwap_strategy,
    create_conservative_volume_vwap,
    create_aggressive_volume_vwap
)
from bot.strategy.implementations.cumdelta_sr_strategy import (
    CumDeltaSRStrategy,
    create_cumdelta_sr_strategy,
    create_conservative_cumdelta_sr,
    create_aggressive_cumdelta_sr
)
from bot.strategy.implementations.multitf_volume_strategy import (
    MultiTFVolumeStrategy,
    create_multitf_volume_strategy,
    create_conservative_multitf_volume,
    create_aggressive_multitf_volume
)
from bot.strategy.implementations.fibonacci_rsi_strategy import (
    FibonacciRSIStrategy,
    create_fibonacci_rsi_strategy,
    create_conservative_fibonacci_rsi,
    create_aggressive_fibonacci_rsi
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),  # –ï–¥–∏–Ω—ã–π –ª–æ–≥ –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
risk_manager = None
telegram_bot = None
metrics_exporter = None
strategy_manager = None
shutdown_event = threading.Event()


class StrategyManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    def __init__(self):
        self.strategies: Dict[str, BaseStrategy] = {}
        self.active_strategies: List[str] = []
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
    def initialize_strategies(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            import_status, import_message = validate_imports()
            if not import_status:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: {import_message}")
                return False
            
            # 2. –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
            version_info = get_version_info()
            self.logger.info(f"üì¶ –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: v{version_info['version']}")
            
            # 3. –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            try:
                with open("bot/strategy/active_strategies.txt") as f:
                    configured_strategies = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            except FileNotFoundError:
                configured_strategies = getattr(config, 'ACTIVE_STRATEGIES', ['volume_vwap_default'])
                self.logger.warning("‚ö†Ô∏è –§–∞–π–ª active_strategies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ config")

            self.logger.info(f"üìã –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {configured_strategies}")

            # 4. –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for strategy_name in configured_strategies:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º factory —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    if strategy_name == 'volume_vwap_default':
                        strategy_instance = create_volume_vwap_strategy()
                    elif strategy_name == 'volume_vwap_conservative':
                        strategy_instance = create_conservative_volume_vwap()
                    elif strategy_name == 'volume_vwap_aggressive':
                        strategy_instance = create_aggressive_volume_vwap()
                    elif strategy_name == 'cumdelta_sr_default':
                        strategy_instance = create_cumdelta_sr_strategy()
                    elif strategy_name == 'cumdelta_sr_conservative':
                        strategy_instance = create_conservative_cumdelta_sr()
                    elif strategy_name == 'cumdelta_sr_aggressive':
                        strategy_instance = create_aggressive_cumdelta_sr()
                    elif strategy_name == 'multitf_volume_default':
                        strategy_instance = create_multitf_volume_strategy()
                    elif strategy_name == 'multitf_volume_conservative':
                        strategy_instance = create_conservative_multitf_volume()
                    elif strategy_name == 'multitf_volume_aggressive':
                        strategy_instance = create_aggressive_multitf_volume()
                    elif strategy_name == 'fibonacci_rsi_default':
                        strategy_instance = create_fibonacci_rsi_strategy()
                    elif strategy_name == 'fibonacci_rsi_conservative':
                        strategy_instance = create_conservative_fibonacci_rsi()
                    elif strategy_name == 'fibonacci_rsi_aggressive':
                        strategy_instance = create_aggressive_fibonacci_rsi()
                    elif strategy_name == 'range_trading_default':
                        from bot.strategy.implementations.range_trading_strategy import create_range_trading_strategy
                        strategy_instance = create_range_trading_strategy()
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    self.strategies[strategy_name] = strategy_instance
                    self.active_strategies.append(strategy_name)
                    self.logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_name}': {e}")
            
            if not self.active_strategies:
                # Fallback - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if 'volume_vwap_default' in self.strategies:
                    self.active_strategies.append('volume_vwap_default')
                    self.logger.info("üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è VolumeVWAP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
            
            self.logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategies)}")
            self.logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.active_strategies)}")
            
            return len(self.active_strategies) > 0
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            self.logger.error(traceback.format_exc())
            return False
    
    def get_active_strategies(self) -> List[BaseStrategy]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return [self.strategies[name] for name in self.active_strategies if name in self.strategies]
    
    def get_strategy(self, name: str) -> Optional[BaseStrategy]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        return self.strategies.get(name)
    
    def get_strategy_info(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
        return {
            'total_strategies': len(self.strategies),
            'active_strategies': len(self.active_strategies),
            'strategy_names': list(self.strategies.keys()),
            'active_names': self.active_strategies
        }
    
    def activate_strategy(self, name: str) -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if name in self.strategies and name not in self.active_strategies:
            self.active_strategies.append(name)
            self.logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        return False
    
    def deactivate_strategy(self, name: str) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if name in self.active_strategies:
            self.active_strategies.remove(name)
            self.logger.info(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{name}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        return False


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f'–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    shutdown_event.set()
    
    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    if risk_manager:
        risk_manager.emergency_stop_all("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    if telegram_bot:
        try:
            telegram_bot.send_admin_message("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    time.sleep(5)
    
    logger.info('Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω')
    sys.exit(0)


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if hasattr(signal, 'SIGHUP'):  # Unix-—Å–∏—Å—Ç–µ–º—ã
        signal.signal(signal.SIGHUP, signal_handler)


def start_trading():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º –∏ –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    logger.info('=== –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª ===')
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        global risk_manager
        risk_config_path = getattr(config, 'RISK_CONFIG_PATH', None)
        risk_manager = RiskManager(risk_config_path)
        logger.info('‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        global strategy_manager
        strategy_manager = StrategyManager()
        
        if not strategy_manager.initialize_strategies():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        logger.info('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if telegram_bot:
            try:
                risk_report = risk_manager.get_risk_report()
                strategy_info = strategy_manager.get_strategy_info()
                
                startup_message = f"""üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç v2.0 –∑–∞–ø—É—â–µ–Ω!
                
üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –õ–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {risk_report['limits']['max_daily_trades']}
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {risk_report['limits']['max_open_positions']}
‚Ä¢ –õ–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å: {risk_report['limits']['max_daily_loss_pct']}%

üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_info['total_strategies']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_info['active_strategies']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(strategy_info['active_names'])}

‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîí –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: –∞–∫—Ç–∏–≤–µ–Ω
üß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: v2.0"""
                
                telegram_bot.send_admin_message(startup_message, with_menu=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        run_trading_with_risk_management(
            risk_manager, 
            shutdown_event
        )
        
    except KeyboardInterrupt:
        logger.info('–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    except Exception as e:
        logger.error(f'–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}', exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if telegram_bot:
            try:
                telegram_bot.send_admin_message(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ:\n{str(e)}")
            except Exception:
                pass
    finally:
        logger.info('=== –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω ===')
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if risk_manager:
            try:
                final_report = risk_manager.get_risk_report()
                strategy_info = strategy_manager.get_strategy_info() if strategy_manager else {}
                
                logger.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_report['daily_trades']} —Å–¥–µ–ª–æ–∫, "
                           f"P&L: ${final_report['daily_pnl']:.2f}")
                
                if telegram_bot:
                    shutdown_message = f"""‚õî –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç v2.0 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    
üìà –ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏:
‚Ä¢ –°–¥–µ–ª–æ–∫ –∑–∞ –¥–µ–Ω—å: {final_report['daily_trades']}
‚Ä¢ P&L –∑–∞ –¥–µ–Ω—å: ${final_report['daily_pnl']:.2f}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {final_report['open_positions_count']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(final_report['blocked_strategies'])}

üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_info.get('active_strategies', 0)}

‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
                    
                    telegram_bot.send_admin_message(shutdown_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")


def start_telegram():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)"""
    logger.info('=== Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ===')
    
    try:
        if telegram_bot:
            logger.info('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∞–º')
        else:
            logger.warning('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}', exc_info=True)


def start_metrics_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    logger.info('=== –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª ===')
    
    try:
        global metrics_exporter
        metrics_exporter = MetricsExporter(
            risk_manager=risk_manager,
            strategy_manager=strategy_manager,  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            port=getattr(config, 'METRICS_PORT', 8000)
        )
        
        metrics_exporter.start(shutdown_event)
        
    except Exception as e:
        logger.error(f'–ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}', exc_info=True)
    finally:
        logger.info('=== –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à—ë–Ω ===')


def start_risk_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫)"""
    logger.info('=== –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª ===')
    
    try:
        while not shutdown_event.is_set():
            if risk_manager and strategy_manager:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π —á–∞—Å
                risk_manager.cleanup_old_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
                risk_report = risk_manager.get_risk_report()
                strategy_info = strategy_manager.get_strategy_info()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
                if risk_report['daily_pnl'] < -1000:  # –ü–æ—Ç–µ—Ä–∏ –±–æ–ª—å—à–µ $1000
                    risk_manager.emergency_stop_all("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏")
                    
                    if telegram_bot:
                        telegram_bot.send_admin_message(
                            f"üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!\n–î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: ${risk_report['daily_pnl']:.2f}"
                        )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)
                current_hour = datetime.now().hour
                if current_hour % 4 == 0 and datetime.now().minute < 5:
                    if telegram_bot and risk_report['open_positions_count'] > 0:
                        report_message = f"""üìä –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–∏—Å–∫–∞—Ö:
                        
üî¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {risk_report['open_positions_count']}
‚Ä¢ –î–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {risk_report['daily_trades']}
‚Ä¢ –î–Ω–µ–≤–Ω—ã–π P&L: ${risk_report['daily_pnl']:.2f}
‚Ä¢ –û–±—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è: ${risk_report['total_exposure']:.2f}

üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_info['active_strategies']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(risk_report['blocked_strategies'])}

‚ö†Ô∏è –°—Ç–∞—Ç—É—Å:
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø: {'–î–∞' if risk_report['emergency_stop'] else '–ù–µ—Ç'}"""
                        
                        telegram_bot.send_admin_message(report_message)
                        time.sleep(300)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            shutdown_event.wait(300)
            
    except Exception as e:
        logger.error(f'–ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}', exc_info=True)
    finally:
        logger.info('=== –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω ===')


def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        checks = {
            'risk_manager': risk_manager is not None,
            'strategy_manager': strategy_manager is not None,
            'telegram_bot': telegram_bot is not None,
            'emergency_stop': risk_manager.emergency_stop if risk_manager else False,
            'blocked_strategies': len(risk_manager.blocked_strategies) if risk_manager else 0,
            'active_strategies': len(strategy_manager.active_strategies) if strategy_manager else 0
        }
        
        logger.debug(f"Health check: {checks}")
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞ –µ—Å–ª–∏:
        # - –ï—Å—Ç—å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        # - –ù–µ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
        # - –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        return all([
            checks['risk_manager'], 
            checks['strategy_manager'],
            not checks['emergency_stop'],
            checks['active_strategies'] > 0
        ])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
        return False


def run_strategy_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        from test_volume_vwap_strategy import run_comprehensive_test
        
        test_results = run_comprehensive_test()
        
        if all(test_results.values()):
            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True
        else:
            failed_tests = [test for test, result in test_results.items() if not result]
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã: {failed_tests}")
            return False
            
    except ImportError:
        logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info('='*60)
    logger.info('üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê v2.0 –° –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô –°–¢–†–ê–¢–ï–ì–ò–ô')
    logger.info('='*60)

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    try:
        from bot.core.singleton import ensure_single_instance
        if not ensure_single_instance("trading_bot_main"):
            logger.error("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            logger.error("   –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python -c 'from bot.core.singleton import kill_existing_bots; kill_existing_bots()'")
            return
        logger.info("‚úÖ Singleton –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è  Singleton —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if getattr(config, 'RUN_TESTS_ON_STARTUP', False):
        if not run_strategy_tests():
            logger.error("‚ùå –¢–µ—Å—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            return
    
    threads = []
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞ –ü–ï–†–ï–î —Ç–æ—Ä–≥–æ–≤—ã–º –ø–æ—Ç–æ–∫–æ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        logger.info(f'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º TELEGRAM_ENABLED: {getattr(config, "TELEGRAM_ENABLED", False)}')
        if getattr(config, 'TELEGRAM_ENABLED', False):
            logger.info('üì± TELEGRAM_ENABLED=True, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...')
            try:
                global telegram_bot
                telegram_bot = TelegramBot(token=config.TELEGRAM_TOKEN)
                logger.info('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ start()
                telegram_bot.start()
                logger.info('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω')
                
                # –î–∞–µ–º –≤—Ä–µ–º—è Telegram –±–æ—Ç—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                time.sleep(3)
            except Exception as e:
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}')
                telegram_bot = None
        else:
            logger.info('üì± TELEGRAM_ENABLED=False, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é')
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        trading_thread = threading.Thread(
            target=start_trading, 
            name="TradingThread",
            daemon=True  # –î–µ–ª–∞–µ–º daemon, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        )
        threads.append(trading_thread)
        trading_thread.start()
        logger.info('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω')
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤
        risk_monitoring_thread = threading.Thread(
            target=start_risk_monitoring,
            name="RiskMonitoringThread", 
            daemon=True
        )
        threads.append(risk_monitoring_thread)
        risk_monitoring_thread.start()
        logger.info('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω')
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if getattr(config, 'METRICS_ENABLED', False):
            metrics_thread = threading.Thread(
                target=start_metrics_monitoring,
                name="MetricsThread",
                daemon=True
            )
            threads.append(metrics_thread)
            metrics_thread.start()
            logger.info('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω')
        
        logger.info(f'üéØ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –≤—Å–µ {len(threads)} –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        time.sleep(10)

        while not shutdown_event.is_set():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                if not health_check():
                    logger.debug("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
            except Exception as e:
                logger.debug(f"Health check error: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤–æ—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤
            for thread in threads:
                if not thread.is_alive() and thread.name == "TradingThread":
                    logger.error(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ {thread.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!")
                    shutdown_event.set()
                    break
            
            time.sleep(30)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤...')
        for thread in threads:
            if thread.is_alive():
                thread.join(timeout=10)  # –î–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                
    except KeyboardInterrupt:
        logger.info('‚ùå –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        shutdown_event.set()
    except Exception as e:
        logger.error(f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}', exc_info=True)
        shutdown_event.set()
    finally:
        logger.info('üèÅ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω: –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        logger.info('='*60)


# –ó–∞–ø—É—Å–∫–∞–µ–º main() –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å
if __name__ == "__main__":
    main()
else:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–æ–¥—É–ª—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º
    main()