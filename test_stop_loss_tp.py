#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.exchange.api_adapter import create_trading_bot_adapter
from bot.strategy.implementations.volume_vwap_strategy import create_volume_vwap_strategy
import pandas as pd

def test_stop_loss_tp_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api = create_trading_bot_adapter(
        symbol="BTCUSDT",
        use_v5=True,
        testnet=True
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy = create_volume_vwap_strategy()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    df = api.get_ohlcv("1", 100)
    
    if df is None or df.empty:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    current_price = df['close'].iloc[-1]
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏
    print("\nüìà –¢–µ—Å—Ç LONG –ø–æ–∑–∏—Ü–∏–∏:")
    entry_price_long = current_price
    stop_loss_long, take_profit_long = strategy.calculate_dynamic_levels(df, entry_price_long, 'BUY')
    
    print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price_long:.2f}")
    print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss_long:.2f}")
    print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit_long:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
    if stop_loss_long < entry_price_long:
        print("   ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è LONG)")
    else:
        print("   ‚ùå –°—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è LONG)")
    
    if take_profit_long > entry_price_long:
        print("   ‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è LONG)")
    else:
        print("   ‚ùå –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è LONG)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏
    print("\nüìâ –¢–µ—Å—Ç SHORT –ø–æ–∑–∏—Ü–∏–∏:")
    entry_price_short = current_price
    stop_loss_short, take_profit_short = strategy.calculate_dynamic_levels(df, entry_price_short, 'SELL')
    
    print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price_short:.2f}")
    print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss_short:.2f}")
    print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit_short:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
    if stop_loss_short > entry_price_short:
        print("   ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    else:
        print("   ‚ùå –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    
    if take_profit_short < entry_price_short:
        print("   ‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    else:
        print("   ‚ùå –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è SHORT)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    print("\nüéØ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞:")
    market_data = {
        '1m': df,
        '5m': df,
        '15m': df,
        '1h': df
    }
    
    signal = strategy.execute(market_data, symbol="BTCUSDT")
    
    if signal:
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal')}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.get('entry_price', 0):.2f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.get('stop_loss', 0):.2f}")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.get('take_profit', 0):.2f}")
        print(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal_strength', 0):.3f}")
    else:
        print("   ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
    print("\nüîß –¢–µ—Å—Ç API —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:")
    if signal:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä (–Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º)
            order_params = {
                "symbol": "BTCUSDT",
                "side": "Sell" if signal.get('signal') == 'SELL' else "Buy",
                "orderType": "Market",
                "qty": "0.001",
                "stopLoss": str(signal.get('stop_loss', 0)),
                "takeProfit": str(signal.get('take_profit', 0))
            }
            
            print("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
            for key, value in order_params.items():
                print(f"     {key}: {value}")
            
            print("   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_stop_loss_tp_calculation() 