#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.exchange.api_adapter import create_trading_bot_adapter
from bot.strategy.implementations.fibonacci_rsi_strategy import create_fibonacci_rsi_strategy
import pandas as pd

def test_fibonacci_rsi_strategy():
    """–¢–µ—Å—Ç Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üéØ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api = create_trading_bot_adapter(
        symbol="BTCUSDT",
        use_v5=True,
        testnet=True
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy = create_fibonacci_rsi_strategy()
    
    print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.config.strategy_name}")
    print(f"üìä –í–µ—Ä—Å–∏—è: {strategy.config.strategy_version}")
    print(f"üìà –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {strategy.config.fast_tf} / {strategy.config.slow_tf}")
    print(f"üìä R:R –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: risk_reward_ratio={strategy.config.risk_reward_ratio}, min_risk_reward_ratio={strategy.config.min_risk_reward_ratio}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    df_15m = api.get_ohlcv("15", 100)
    df_1h = api.get_ohlcv("60", 100)
    
    if df_15m is None or df_1h is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    current_price = df_15m['close'].iloc[-1]
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    market_data = {
        '15m': df_15m,
        '1h': df_1h
    }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("\nüîß –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    indicators = strategy.calculate_strategy_indicators(market_data)
    
    if not indicators:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        return
    
    print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(indicators)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("\nüìä –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
    print(f"   EMA —Ç—Ä–µ–Ω–¥: {'UP' if indicators.get('trend_up') else 'DOWN' if indicators.get('trend_down') else 'NEUTRAL'}")
    print(f"   RSI: {indicators.get('rsi', 0):.1f}")
    print(f"   –û–±—ä–µ–º–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫: {'–î–∞' if indicators.get('volume_spike') else '–ù–µ—Ç'}")
    print(f"   ATR: {indicators.get('atr', 0):.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
    print("\nüìà –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π:")
    stop_loss, take_profit = strategy.calculate_dynamic_levels(df_15m, current_price, 'BUY')
    
    print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${current_price:.2f}")
    print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.2f}")
    print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.2f}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º R:R
    risk = current_price - stop_loss
    reward = take_profit - current_price
    rr_ratio = reward / risk if risk > 0 else 0
    
    print(f"   –†–∏—Å–∫: ${risk:.2f}")
    print(f"   –ü—Ä–∏–±—ã–ª—å: ${reward:.2f}")
    print(f"   R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {rr_ratio:.3f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    print("\nüéØ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞:")
    signal = strategy.execute(market_data, symbol="BTCUSDT")
    
    if signal:
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal')}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.get('entry_price', 0):.2f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.get('stop_loss', 0):.2f}")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.get('take_profit', 0):.2f}")
        print(f"   –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal_strength', 0):.3f}")
        print(f"   Confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {signal.get('confluence_count', 0)}")
    else:
        print("   ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç Fibonacci RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüí° –í—ã–≤–æ–¥—ã:")
    print("   - –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π")
    print("   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

if __name__ == "__main__":
    test_fibonacci_rsi_strategy() 