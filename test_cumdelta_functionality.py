#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start='2024-01-01', periods=100, freq='1H')
    
    # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
    base_price = 50000
    prices = []
    volumes = []
    
    for i in range(100):
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        if i < 30:
            # –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö
            price = base_price + i * 100 + np.random.normal(0, 50)
        elif i < 60:
            # –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            price = base_price + 3000 + np.random.normal(0, 200)
        else:
            # –¢—Ä–µ–Ω–¥ –≤–Ω–∏–∑
            price = base_price + 3000 - (i - 60) * 80 + np.random.normal(0, 50)
        
        prices.append(price)
        
        # –û–±—ä–µ–º —Å –≤—Å–ø–ª–µ—Å–∫–∞–º–∏
        if i % 10 == 0:
            volume = np.random.uniform(1000, 5000)
        else:
            volume = np.random.uniform(100, 500)
        volumes.append(volume)
    
    # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
    df = pd.DataFrame({
        'open': prices,
        'high': [p + np.random.uniform(0, 100) for p in prices],
        'low': [p - np.random.uniform(0, 100) for p in prices],
        'close': prices,
        'volume': volumes
    }, index=dates)
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
    df['high'] = df[['open', 'high', 'close']].max(axis=1)
    df['low'] = df[['open', 'low', 'close']].min(axis=1)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} –±–∞—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    return df

def test_cumdelta_indicators():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig(
            delta_window=20,
            min_delta_threshold=100.0,
            support_window=20,
            support_resistance_tolerance=0.002,
            volume_multiplier=1.5
        )
        strategy = CumDeltaSRStrategy(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = create_test_data()
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = strategy.calculate_strategy_indicators({'1h': df})
        
        if indicators:
            print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            key_indicators = [
                'cum_delta', 'delta_momentum', 'delta_strength',
                'support_levels', 'resistance_levels', 'trend_slope',
                'trend_strength', 'volume_ratio'
            ]
            
            for indicator in key_indicators:
                if indicator in indicators:
                    print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {indicator} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä {indicator}")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False

def test_cumdelta_signal_strength():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig()
        strategy = CumDeltaSRStrategy(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = create_test_data()
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = strategy.calculate_strategy_indicators({'1h': df})
        
        if not indicators:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            return False
        
        # –¢–µ—Å—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è BUY
        buy_strength = strategy.calculate_signal_strength({'1h': df}, indicators, 'BUY')
        print(f"‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ BUY: {buy_strength:.3f}")
        
        # –¢–µ—Å—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SELL
        sell_strength = strategy.calculate_signal_strength({'1h': df}, indicators, 'SELL')
        print(f"‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ SELL: {sell_strength:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if 0 <= buy_strength <= 1 and 0 <= sell_strength <= 1:
            print("‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
            return True
        else:
            print("‚ùå –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, 1]")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return False

def test_cumdelta_confluence():
    """–¢–µ—Å—Ç confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig()
        strategy = CumDeltaSRStrategy(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = create_test_data()
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = strategy.calculate_strategy_indicators({'1h': df})
        
        if not indicators:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            return False
        
        # –¢–µ—Å—Ç confluence –¥–ª—è BUY
        buy_confluence, buy_factors = strategy.check_confluence_factors({'1h': df}, indicators, 'BUY')
        print(f"‚úÖ Confluence BUY: {buy_confluence} —Ñ–∞–∫—Ç–æ—Ä–æ–≤ - {buy_factors}")
        
        # –¢–µ—Å—Ç confluence –¥–ª—è SELL
        sell_confluence, sell_factors = strategy.check_confluence_factors({'1h': df}, indicators, 'SELL')
        print(f"‚úÖ Confluence SELL: {sell_confluence} —Ñ–∞–∫—Ç–æ—Ä–æ–≤ - {sell_factors}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if isinstance(buy_confluence, int) and isinstance(sell_confluence, int):
            print("‚úÖ Confluence —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå Confluence —Ñ–∞–∫—Ç–æ—Ä—ã –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ confluence —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
        return False

def test_cumdelta_execute():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig(
            signal_strength_threshold=0.3,  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            confluence_required=1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        )
        strategy = CumDeltaSRStrategy(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = create_test_data()
        
        # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
        result = strategy.execute({'1h': df}, state=None, symbol='BTCUSDT')
        
        if result is None:
            print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ None (–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞)")
        else:
            print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª: {result.get('signal', 'UNKNOWN')}")
            print(f"   Entry: {result.get('entry_price', 'N/A')}")
            print(f"   SL: {result.get('stop_loss', 'N/A')}")
            print(f"   TP: {result.get('take_profit', 'N/A')}")
            print(f"   Strength: {result.get('signal_strength', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False

def test_cumdelta_dynamic_levels():
    """–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig()
        strategy = CumDeltaSRStrategy(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = create_test_data()
        current_price = df['close'].iloc[-1]
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è BUY
        stop_loss_buy, take_profit_buy = strategy.calculate_dynamic_levels(df, current_price, 'BUY')
        print(f"‚úÖ BUY —É—Ä–æ–≤–Ω–∏ - SL: {stop_loss_buy:.2f}, TP: {take_profit_buy:.2f}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è SELL
        stop_loss_sell, take_profit_sell = strategy.calculate_dynamic_levels(df, current_price, 'SELL')
        print(f"‚úÖ SELL —É—Ä–æ–≤–Ω–∏ - SL: {stop_loss_sell:.2f}, TP: {take_profit_sell:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —É—Ä–æ–≤–Ω–µ–π
        if (stop_loss_buy < current_price < take_profit_buy and 
            stop_loss_sell > current_price > take_profit_sell):
            print("‚úÖ –õ–æ–≥–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        else:
            print("‚ùå –õ–æ–≥–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
        return False

def test_cumdelta_rr_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ R:R"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ R:R...")
    
    try:
        from bot.strategy.base import CumDeltaConfig
        from bot.strategy.implementations.cumdelta_sr_strategy import CumDeltaSRStrategy
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = CumDeltaConfig()
        strategy = CumDeltaSRStrategy(config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ min_risk_reward_ratio
        if hasattr(strategy.config, 'min_risk_reward_ratio'):
            print(f"‚úÖ min_risk_reward_ratio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {strategy.config.min_risk_reward_ratio}")
            
            if strategy.config.min_risk_reward_ratio == 0.8:
                print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫–∞–ª—å–ø–∏–Ω–≥—É")
                return True
            else:
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {strategy.config.min_risk_reward_ratio}")
                return False
        else:
            print("‚ùå min_risk_reward_ratio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ R:R: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("=" * 80)
    
    tests = [
        test_cumdelta_indicators,
        test_cumdelta_signal_strength,
        test_cumdelta_confluence,
        test_cumdelta_dynamic_levels,
        test_cumdelta_rr_validation,
        test_cumdelta_execute
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("\n" + "=" * 80)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
        return True
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é CumDelta SR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
