#!/usr/bin/env python3
"""
üî¨ –ú–û–ù–ò–¢–û–† –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ BYBOT

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:
- –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- Memory usage
- TTL cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- Confluence —Ñ–∞–∫—Ç–æ—Ä—ã
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import time
import psutil
import os
import re
from datetime import datetime
from collections import defaultdict, deque

class PerformanceMonitor:
    def __init__(self, log_file="fixed_system.log"):
        self.log_file = log_file
        self.metrics = {
            'strategy_latency': defaultdict(list),
            'memory_usage': deque(maxlen=100),
            'signal_count': 0,
            'cache_operations': defaultdict(int),
            'confluence_stats': defaultdict(list),
            'errors': 0
        }
        self.start_time = datetime.now()

    def parse_log_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        timestamp_match = re.search(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}', line)
        if not timestamp_match:
            return None

        # –ò—â–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' in line or 'execution time' in line.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            time_match = re.search(r'(\d+\.?\d*)\s*ms', line)
            if time_match:
                latency = float(time_match.group(1))
                strategy_match = re.search(r'(VolumeVWAP|MultiTF|CumDelta|Fibonacci|Range)', line)
                strategy = strategy_match.group(1) if strategy_match else 'Unknown'
                self.metrics['strategy_latency'][strategy].append(latency)

        # –ò—â–µ–º TTL –æ–ø–µ—Ä–∞—Ü–∏–∏
        if 'TTL' in line or '–∫—ç—à' in line.lower() or 'cache' in line.lower():
            if 'hit' in line.lower():
                self.metrics['cache_operations']['hits'] += 1
            elif 'miss' in line.lower():
                self.metrics['cache_operations']['misses'] += 1
            elif '–æ—á–∏—Å—Ç–∫–∞' in line.lower() or 'cleanup' in line.lower():
                self.metrics['cache_operations']['cleanups'] += 1

        # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã
        if '—Å–∏–≥–Ω–∞–ª' in line.lower() or 'signal' in line.lower():
            if 'BUY' in line or 'SELL' in line:
                self.metrics['signal_count'] += 1

        # –ò—â–µ–º confluence —Ñ–∞–∫—Ç–æ—Ä—ã
        confluence_match = re.search(r'confluence.*?(\d+).*?—Ñ–∞–∫—Ç–æ—Ä–æ–≤?', line.lower())
        if confluence_match:
            factors = int(confluence_match.group(1))
            self.metrics['confluence_stats']['factors'].append(factors)

        # –ò—â–µ–º –æ—à–∏–±–∫–∏
        if 'ERROR' in line or '–æ—à–∏–±–∫–∞' in line.lower():
            self.metrics['errors'] += 1

    def get_memory_usage(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        try:
            # –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã Python, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å bybot
            memory_mb = 0
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info']):
                try:
                    if 'python' in proc.info['name'].lower():
                        cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                        if 'main.py' in cmdline or 'bybot' in cmdline.lower():
                            memory_mb += proc.info['memory_info'].rss / 1024 / 1024
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            return memory_mb
        except Exception:
            return 0

    def monitor_logs(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not os.path.exists(self.log_file):
            print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª {self.log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        print(f"üî¨ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {self.log_file}")
        print(f"‚è∞ –ù–∞—á–∞–ª–æ: {self.start_time.strftime('%H:%M:%S')}")
        print("=" * 60)

        with open(self.log_file, 'r', encoding='utf-8') as f:
            # –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            f.seek(0, 2)

            while True:
                line = f.readline()
                if line:
                    self.parse_log_line(line.strip())
                else:
                    time.sleep(0.5)
                    self.update_display()

    def update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        # –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
        os.system('clear' if os.name == 'posix' else 'cls')

        print(f"üî¨ BYBOT PERFORMANCE MONITOR - {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 70)

        # Runtime
        runtime = datetime.now() - self.start_time
        print(f"‚è±Ô∏è  Runtime: {str(runtime).split('.')[0]}")

        # Memory Usage
        current_memory = self.get_memory_usage()
        self.metrics['memory_usage'].append(current_memory)
        avg_memory = sum(self.metrics['memory_usage']) / len(self.metrics['memory_usage']) if self.metrics['memory_usage'] else 0
        print(f"üß† Memory: {current_memory:.1f}MB (avg: {avg_memory:.1f}MB)")

        # Strategy Latency
        print(f"\n‚ö° –õ–ê–¢–ï–ù–¢–ù–û–°–¢–¨ –°–¢–†–ê–¢–ï–ì–ò–ô:")
        for strategy, latencies in self.metrics['strategy_latency'].items():
            if latencies:
                avg_latency = sum(latencies[-10:]) / len(latencies[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                max_latency = max(latencies[-10:])
                status = "‚úÖ" if avg_latency < 50 else "‚ö†Ô∏è"
                print(f"   {status} {strategy}: {avg_latency:.1f}ms avg, {max_latency:.1f}ms max ({len(latencies)} calls)")

        # Signal Statistics
        signals_per_hour = self.metrics['signal_count'] / max(runtime.total_seconds() / 3600, 0.01)
        print(f"\nüìä –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´:")
        print(f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.metrics['signal_count']}")
        print(f"   üìä –°–∏–≥–Ω–∞–ª–æ–≤/—á–∞—Å: {signals_per_hour:.1f}")

        # Cache Statistics
        cache_hits = self.metrics['cache_operations']['hits']
        cache_misses = self.metrics['cache_operations']['misses']
        total_cache_ops = cache_hits + cache_misses
        hit_rate = (cache_hits / total_cache_ops * 100) if total_cache_ops > 0 else 0

        print(f"\nüóÇÔ∏è  TTL –ö–≠–®–ò–†–û–í–ê–ù–ò–ï:")
        print(f"   ‚úÖ Cache hits: {cache_hits}")
        print(f"   ‚ùå Cache misses: {cache_misses}")
        print(f"   üìä Hit rate: {hit_rate:.1f}%")
        print(f"   üßπ Cleanups: {self.metrics['cache_operations']['cleanups']}")

        # Confluence Statistics
        confluence_factors = self.metrics['confluence_stats']['factors']
        if confluence_factors:
            avg_confluence = sum(confluence_factors) / len(confluence_factors)
            print(f"\nüéØ CONFLUENCE –§–ê–ö–¢–û–†–´:")
            print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {avg_confluence:.1f}/3")
            print(f"   üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ: {confluence_factors[-5:] if len(confluence_factors) >= 5 else confluence_factors}")

        # Error Statistics
        error_rate = self.metrics['errors'] / max(runtime.total_seconds() / 60, 0.01)  # errors per minute
        status_errors = "‚úÖ" if error_rate < 0.1 else "‚ö†Ô∏è" if error_rate < 1 else "‚ùå"
        print(f"\n{status_errors} –û–®–ò–ë–ö–ò:")
        print(f"   ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.metrics['errors']}")
        print(f"   üìä –û—à–∏–±–æ–∫/–º–∏–Ω: {error_rate:.2f}")

        # System Status
        print(f"\nüöÄ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        memory_ok = current_memory < 1000  # <1GB
        latency_ok = all(
            sum(latencies[-5:]) / len(latencies[-5:]) < 50
            for latencies in self.metrics['strategy_latency'].values()
            if latencies
        ) if self.metrics['strategy_latency'] else True

        overall_status = "üü¢ –û–¢–õ–ò–ß–ù–û" if memory_ok and latency_ok and error_rate < 0.1 else \
                        "üü° –•–û–†–û–®–û" if memory_ok and error_rate < 1 else \
                        "üî¥ –ü–†–û–ë–õ–ï–ú–´"

        print(f"   {overall_status}")
        print(f"   Memory: {'‚úÖ' if memory_ok else '‚ùå'} | Latency: {'‚úÖ' if latency_ok else '‚ùå'} | Errors: {'‚úÖ' if error_rate < 0.1 else '‚ùå'}")

        print("\n" + "="*70)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

if __name__ == "__main__":
    monitor = PerformanceMonitor()
    try:
        monitor.monitor_logs()
    except KeyboardInterrupt:
        print(f"\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üíæ Memory: {monitor.get_memory_usage():.1f}MB")
        print(f"   üìà –°–∏–≥–Ω–∞–ª–æ–≤: {monitor.metrics['signal_count']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {monitor.metrics['errors']}")