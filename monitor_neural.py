#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python monitor_neural.py
"""

import sys
import os
import time
import json
from datetime import datetime
from pathlib import Path

sys.path.insert(0, '.')

def check_neural_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è"""
    files = {
        'config': 'bot/strategy/active_strategies.txt',
        'state': 'data/neural_state.json',
        'bets': 'data/neural_bets.json',
        'logs': 'full_system.log',
        'main_log': 'trading_bot.log'  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
    }

    status = {}
    for name, path in files.items():
        if os.path.exists(path):
            mtime = os.path.getmtime(path)
            size = os.path.getsize(path)
            status[name] = {
                'exists': True,
                'modified': datetime.fromtimestamp(mtime).strftime('%H:%M:%S'),
                'size': size
            }
        else:
            status[name] = {'exists': False}

    return status

def check_neural_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–æ–≥ —Ñ–∞–π–ª–∞
    log_files = ['full_system.log', 'trading_bot.log']

    for log_file in log_files:
        try:
            if os.path.exists(log_file) and os.path.getsize(log_file) > 0:
                with open(log_file, 'r') as f:
                    lines = f.readlines()

                neural_lines = [line for line in lines[-100:] if 'üß†' in line or 'neural' in line.lower()]
                if neural_lines:
                    return neural_lines[-5:]
        except:
            continue

    return []

def check_neural_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è"""
    try:
        from bot.ai.neural_integration import NeuralIntegration
        neural = NeuralIntegration()
        neural.reload_active_strategies()

        stats = neural.get_neural_statistics()
        return {
            'loaded': True,
            'strategies': len(neural.strategy_mapping),
            'active_bets': len(neural.active_bets),
            'completed_trades': len(neural.completed_trades),
            'neural_trader_status': stats.get('neural_trader', {}).get('total_bets', 0)
        }
    except Exception as e:
        return {'loaded': False, 'error': str(e)}

def print_status():
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª—è"""
    print("\n" + "="*60)
    print(f"üß† –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–ï–ô–†–û–ú–û–î–£–õ–Ø - {datetime.now().strftime('%H:%M:%S')}")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    files = check_neural_files()
    print("\nüìÅ –§–ê–ô–õ–´:")
    for name, info in files.items():
        if info['exists']:
            print(f"   ‚úÖ {name}: –∏–∑–º–µ–Ω–µ–Ω {info['modified']}, —Ä–∞–∑–º–µ—Ä {info['size']} –±–∞–π—Ç")
        else:
            print(f"   ‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration = check_neural_integration()
    print("\nüîß –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:")
    if integration['loaded']:
        print(f"   ‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"   üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {integration['strategies']}")
        print(f"   üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {integration['active_bets']}")
        print(f"   üìà –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {integration['completed_trades']}")
        print(f"   üéØ –í—Å–µ–≥–æ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {integration['neural_trader_status']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {integration.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    logs = check_neural_logs()
    print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò:")
    if logs:
        for log in logs:
            print(f"   üìù {log.strip()}")
    else:
        print("   ‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª–µ –≤ –ª–æ–≥–∞—Ö")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –°–ü–û–°–û–ë–´ –ü–†–û–í–ï–†–ö–ò:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏: grep 'üß†' full_system.log")
    print("   2. –í Telegram –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ: ü§ñ –ù–µ–π—Ä–æ–Ω–∫–∞")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏: curl localhost:8000/metrics | grep neural")
    print("   4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è: watch -n 5 'cat data/neural_state.json'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if len(sys.argv) > 1 and sys.argv[1] == "--watch":
        print("üîÑ –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        try:
            while True:
                print_status()
                time.sleep(10)
        except KeyboardInterrupt:
            print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print_status()
        print("\nüí° –î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python monitor_neural.py --watch")

if __name__ == "__main__":
    main()