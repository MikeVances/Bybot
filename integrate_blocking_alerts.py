#!/usr/bin/env python3
"""
üö® –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ü–û–í–ï–©–ï–ù–ò–ô –û –ë–õ–û–ö–ò–†–û–í–ö–ê–•

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç blocking_alerts –≤–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""

import os
import re
import shutil
from datetime import datetime
from typing import List, Tuple


def create_backup(file_path: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–∞"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_path = f"{file_path}.backup_{timestamp}"
    shutil.copy2(file_path, backup_path)
    return backup_path


def integrate_risk_manager():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ RiskManager"""
    file_path = "bot/risk.py"

    print(f"üîß –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º blocking alerts –≤ {file_path}...")

    backup = create_backup(file_path)
    print(f"üíæ Backup: {backup}")

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    import_addition = """
from bot.core.blocking_alerts import report_order_block, BlockType"""

    if "from bot.core.blocking_alerts" not in content:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        import_position = content.find("from dataclasses import dataclass")
        if import_position != -1:
            content = content[:import_position] + import_addition + "\n" + content[import_position:]

    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ check_pre_trade_risk
    replacements = [
        # Emergency stop
        (
            'return False, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø"',
            '''report_order_block(BlockType.EMERGENCY_STOP.value, "BTCUSDT", strategy_name, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø")
            return False, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø"'''
        ),
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        (
            'return False, f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"',
            '''report_order_block(BlockType.RISK_LIMIT.value, "BTCUSDT", strategy_name, f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            return False, f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"'''
        ),
        # –õ–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        (
            'return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ({limits.max_daily_trades})"',
            '''report_order_block(BlockType.RISK_LIMIT.value, "BTCUSDT", strategy_name,
                               f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ({daily_trades_count}/{limits.max_daily_trades})",
                               {"daily_trades": daily_trades_count, "limit": limits.max_daily_trades})
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ({limits.max_daily_trades})"'''
        ),
        # –õ–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
        (
            'return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å (${daily_loss:.2f} >= ${max_daily_loss:.2f})"',
            '''report_order_block(BlockType.RISK_LIMIT.value, "BTCUSDT", strategy_name,
                               f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å (${daily_loss:.2f} >= ${max_daily_loss:.2f})",
                               {"daily_loss": daily_loss, "limit": max_daily_loss, "balance": current_balance})
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å (${daily_loss:.2f} >= ${max_daily_loss:.2f})"'''
        ),
    ]

    for old, new in replacements:
        if old in content:
            content = content.replace(old, new)
            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {old[:50]}...")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

    print(f"‚úÖ {file_path} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π blocking alerts")


def integrate_order_manager():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ OrderManager"""
    file_path = "bot/core/order_manager.py"

    print(f"üîß –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º blocking alerts –≤ {file_path}...")

    backup = create_backup(file_path)
    print(f"üíæ Backup: {backup}")

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    import_addition = """
from bot.core.blocking_alerts import report_order_block, report_successful_order, BlockType"""

    if "from bot.core.blocking_alerts" not in content:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        import_position = content.find("from bot.core.exceptions import")
        if import_position != -1:
            line_end = content.find('\n', import_position)
            content = content[:line_end] + "\n" + import_addition + content[line_end:]

    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
    replacements = [
        # Emergency stop
        (
            'raise OrderRejectionError("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")',
            '''report_order_block(BlockType.EMERGENCY_STOP.value, symbol, request.strategy_name, "–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                raise OrderRejectionError("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")'''
        ),
        # Rate limit
        (
            'raise RateLimitError(f"Rate limit –¥–ª—è {symbol}: {rate_msg}")',
            '''report_order_block(BlockType.RATE_LIMIT.value, symbol, request.strategy_name, f"Rate limit: {rate_msg}")
                raise RateLimitError(f"Rate limit –¥–ª—è {symbol}: {rate_msg}")'''
        ),
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
        (
            'raise OrderRejectionError(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}: {dup_msg}")',
            '''report_order_block(BlockType.DUPLICATE_ORDER.value, symbol, request.strategy_name, f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä: {dup_msg}")
                raise OrderRejectionError(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}: {dup_msg}")'''
        ),
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–π
        (
            'raise PositionConflictError(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {pos_msg}")',
            '''report_order_block(BlockType.POSITION_CONFLICT.value, symbol, request.strategy_name, f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–∏: {pos_msg}")
                raise PositionConflictError(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {pos_msg}")'''
        ),
    ]

    for old, new in replacements:
        if old in content:
            content = content.replace(old, new)
            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {old[:50]}...")

    # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
    success_pattern = r'(self\.logger\.info\(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è \{symbol\}: \{order_id\}"\))'
    success_replacement = r'''\1

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
                    report_successful_order(symbol, request.strategy_name, order_id)'''

    content = re.sub(success_pattern, success_replacement, content)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

    print(f"‚úÖ {file_path} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π blocking alerts")


def integrate_rate_limiter():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ RateLimiter"""
    file_path = "bot/core/rate_limiter.py"

    print(f"üîß –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º blocking alerts –≤ {file_path}...")

    backup = create_backup(file_path)
    print(f"üíæ Backup: {backup}")

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    import_addition = """
from bot.core.blocking_alerts import report_order_block, BlockType"""

    if "from bot.core.blocking_alerts" not in content:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        import_position = content.find("from bot.core.exceptions import")
        if import_position != -1:
            line_end = content.find('\n', import_position)
            content = content[:line_end] + "\n" + import_addition + content[line_end:]

    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ _activate_emergency_stop
    replacement = (
        'self.logger.critical(\n                f"üö® EMERGENCY STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù: {reason}"\n            )',
        '''self.logger.critical(
                f"üö® EMERGENCY STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù: {reason}"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ blocking alerts
            report_order_block(BlockType.EMERGENCY_STOP.value, "GLOBAL", "rate_limiter", reason)'''
    )

    if replacement[0] in content:
        content = content.replace(replacement[0], replacement[1])
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ emergency stop")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

    print(f"‚úÖ {file_path} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π blocking alerts")


def create_telegram_integration():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º"""

    integration_code = '''
# –î–æ–±–∞–≤–∏—Ç—å –≤ main.py –∏–ª–∏ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞

def setup_blocking_alerts_with_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ blocking alerts —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram"""
    try:
        from bot.services.telegram_bot import telegram_bot
        from bot.core.blocking_alerts import get_blocking_alerts_manager

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å Telegram –±–æ—Ç–æ–º
        blocking_manager = get_blocking_alerts_manager(telegram_bot)

        print("‚úÖ Blocking alerts –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å Telegram")
        return blocking_manager

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ blocking alerts —Å Telegram: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ Telegram
        from bot.core.blocking_alerts import get_blocking_alerts_manager
        return get_blocking_alerts_manager()

# –í—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
blocking_manager = setup_blocking_alerts_with_telegram()
'''

    with open("telegram_blocking_integration.py", 'w', encoding='utf-8') as f:
        f.write(integration_code)

    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª telegram_blocking_integration.py")


def create_startup_diagnostics():
    """–°–æ–∑–¥–∞–Ω–∏–µ startup –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""

    diagnostic_code = '''#!/usr/bin/env python3
"""
üö® STARTUP –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ë–õ–û–ö–ò–†–û–í–û–ö

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
"""

def startup_blocking_diagnostics():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")

    issues = []
    warnings = []

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ emergency stops
        from bot.core.rate_limiter import get_rate_limiter
        rate_limiter = get_rate_limiter()

        global_status = rate_limiter.get_global_status()
        if global_status.get('emergency_stop_active'):
            issues.append(f"üö® Rate Limiter Emergency Stop: {global_status.get('emergency_reason')}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ risk manager
        from bot.risk import RiskManager
        risk_manager = RiskManager()

        if risk_manager.emergency_stop:
            issues.append("üö® Risk Manager Emergency Stop –∞–∫—Ç–∏–≤–µ–Ω")

        if risk_manager.blocked_strategies:
            warnings.append(f"‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {list(risk_manager.blocked_strategies)}")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
        from bot.exchange.bybit_api_v5 import BybitAPIV5
        from config import get_api_credentials

        api_key, api_secret = get_api_credentials()
        api = BybitAPIV5(api_key, api_secret, testnet=True)

        positions = api.get_positions('BTCUSDT')
        if positions.get('retCode') == 0:
            active_positions = [p for p in positions.get('result', {}).get('list', [])
                             if float(p.get('size', 0)) != 0]

            if active_positions:
                warnings.append(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {len(active_positions)}")
                for pos in active_positions:
                    warnings.append(f"   - {pos.get('symbol')} {pos.get('side')} {pos.get('size')}")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = api.get_wallet_balance_v5()
        if balance.get('retCode') == 0:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            pass

        # 5. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if issues:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in issues:
                print(f"   {issue}")

        if warnings:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in warnings:
                print(f"   {warning}")

        if not issues and not warnings:
            print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")

        return len(issues) == 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False

if __name__ == "__main__":
    startup_blocking_diagnostics()
'''

    with open("startup_diagnostics.py", 'w', encoding='utf-8') as f:
        f.write(diagnostic_code)

    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª startup_diagnostics.py")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("="*60)
    print("üö® –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ü–û–í–ï–©–ï–ù–ò–ô –û –ë–õ–û–ö–ò–†–û–í–ö–ê–•")
    print("="*60)
    print()

    print("üìã –ü–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("1. RiskManager - –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("2. OrderManager - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤")
    print("3. RateLimiter - emergency stops")
    print("4. Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("5. Startup –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print()

    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é? (y/N): ").lower()
    if response != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    try:
        # 1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º RiskManager
        integrate_risk_manager()

        # 2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º OrderManager
        integrate_order_manager()

        # 3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º RateLimiter
        integrate_rate_limiter()

        # 4. –°–æ–∑–¥–∞–µ–º Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        create_telegram_integration()

        # 5. –°–æ–∑–¥–∞–µ–º startup –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        create_startup_diagnostics()

        print()
        print("="*60)
        print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*60)
        print()
        print("üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å startup_diagnostics.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å telegram_blocking_integration.py –≤ main.py")
        print()
        print("üéØ –¢–µ–ø–µ—Ä—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±—É–¥—É—Ç –ì–†–û–ú–ö–û –æ–∑–≤—É—á–µ–Ω—ã!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()